/*=============================================================================
 |		Gamemode:  	Romania Gaming v3 (rG3)
 |		Author: 	Maurice (Mihai-Alexandru Matraguna)
 |		Type:		RPG
 |      Description:
 *===========================================================================*/
 
 /*
 Usefull update query 
	mysql_format(SQL, str,128,"UPDATE `users` SET `Char`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Char],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
*/
/**
 * Includes
 */

#include <a_samp>
#include <a_mysql>
#include <playerprogress>
#include <YSI\y_commands>
#include <YSI\y_master>
#include <sscanf2>
#include <streamer>
#include <crashdetect>
#include <foreach>
#include <geoip>
#include <AutoAFK>

#define ADMINFS_MESSAGE_COLOR 0xFF444499
#define ADMIN_NETSTATS_DIALOGID 12898

#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.8)

new gNetStatsPlayerId = INVALID_PLAYER_ID;
new gNetStatsTimerId = 0;

#define function%0(%1) forward %0(%1); public %0(%1) // Shortcut
#define KEY_AIM KEY_HANDBRAKE

#define KickEx(%0) SetTimerEx("KickPlayerr", 100, 0, "d", %0) 
function KickPlayerr(playerid) Kick(playerid);

#define BanExx(%0,%1) SetTimerEx("BanPlayerr", 100, 0, "d", %0)
function BanPlayerr(playerid,reason[]) Ban(playerid);

#define PlayerToPoint(%0,%1,%2,%3,%4) IsPlayerInRangeOfPoint(%1,%0,%2,%3,%4)

#define AdminOnly "{5CAD5C}Error: Your admin level isn't high enough to use this command."
#define CopOnly "{F5DEB3}Error: You are not a cop."
#define LeaderOnly "{FFB673}Error: Only leaders can use this command."
#define NoFaction "{FFB673}Error: You aren't member of a faction."
#define MedicOnly "{FFB673}Error: You aren't a medic."
#define ReporterOnly "{FFB673}Error: You're not a reporter."

#define MAXVEHICLES 1000

#define TurfColorGrove 0x40863CDD
#define TurfColorGSW 0xD900D9DD
#define TurfColorVNE 0x98B1ACDD


native WP_Hash(buffer[], len, const str[]); // Whirpool

/**
 * MySQL stuffs
 */

new conType = -1;

new SQL = -1, vehss = 0, houses = 0, bizzs = 0, sbizzs = 0, safeboxss = 0, turfss = 0, dsvehs = 0, pecos = 0, numplayers = 0, pvehs = 0, ads = 1, idad = 0;
new Medics = 0;
new sirena1, sirena2, sirena3, sirena4, policecar1, policecar2, policecar3, policecar4;
new CS = 0, Team1 = 0, Team2 = 0, bariera, lspdgate, cell[21];
new Kart = 0, KartPlayers = 0, KartCar[22], KartPrize = 0;

/**
 * Dialog IDs
 */
 
#define DIALOG_UNUSED 0
#define DIALOG_LOGIN 1
#define DIALOG_REGISTER 2
#define DIALOG_ATELEPORT 3 // + 3
#define DIALOG_SERVER 7 // + 4
#define DIALOG_WANTED 12
#define DIALOG_SKINS 13
#define DIALOG_DSINFO 14
#define DIALOG_RADIO 15
#define DIALOG_FAQ 16
#define DIALOG_BLICENSE 17
#define DIALOG_TUTORIAL 18 // + 9
#define DIALOG_BUY 28
#define DIALOG_HELP 29
#define DIALOG_EMAIL 30
#define DIALOG_JOBS 31
#define DIALOG_BUS 32 // + 1
#define DIALOG_GPS 34 // + 2
#define DIALOG_REFFERAL 37 // + 2
#define DIALOG_MISSION 40

#define SERVER_GM_TEXT "rG3 v1.0"

#define ResetMoneyBar ResetPlayerMoney
#define UpdateMoneyBar GivePlayerMoney

/**
 * COLORS
 */
 
#define COLOR_NICERED 0xFF0000FF
#define COLOR_President 0xB3F856FF
#define RED	0xE60000FF
#define TEAM_MEDIC_COLOR 0xE56E94FF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_AFK 0x565656FF
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_REDD 0xF81414FF
#define COLOR_BRED 0xFF4545AA
#define COLOR_PINK 0xFF66FFAA
#define COLOR_BBLUE 0x1E519DAA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTBLUE2 0xC2FFE1AA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_ADMCHAT 0xFFC266AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0xFFA500AA
#define	COLOR_YELLOW_DIALOG 0xFFFF00FF
#define COLOR_OOC 0xE0FFFFAA
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define COLOR_SPEC 0xBFC0C200
#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2
#define COLOR_1BLUE 0x0080FFFF
#define COLOR_1GREEN 0x6BD700FF
#define COLOR_1RED 0xFF5B5BFF
#define COLOR_LICENSES 0x0080C0FF
#define COLOR_ADMIN 0xFF4A4AFF
#define COLOR_3DTEXT 0x0063C6FF

new Peds[163][1] = {
{1},{2},{5},{6},{7},{8},{9},{10},{14},{15},{18},{19},{21},{22},{23},{26},{28},{29},{30},{31},
{32},{33},{34},{35},{36},{37},{38},{39},{40},{41},{42},{43},{44},{45},{48},{49},{51},{52},{53},
{54},{58},{62},{63},{64},{65},{68},{72},{74},{75},{77},{80},{81},{82},{83},{84},
{85},{86},{87},{88},{89},{90},{91},{92},{94},{95},{96},{97},{99},{100},{101},{119},{122},{128},{129},
{130},{131},{132},{135},{136},{138},{139},{140},{143},{144},{145},{146},{149},{151},{152},
{154},{155},{158},{159},{160},{161},{162},{167},{168},{170},{176},{177},{178},{179},{180},{181},
{182},{183},{184},{190},{191},{196},{197},{198},{199},{200},{200},{201},{203},{204},{205},{207},{208},
{209},{213},{215},{218},{221},{222},{224},{225},{229},{230},{231},{232},{234},{235},{236},
{237},{238},{239},{241},{242},{243},{244},{245},{246},{247},{247},{248},{250},{251},{252},{254},{256},
{257},{259},{273},{289},{291},{293},{297},{298},{299}
};

enum SAZONE_MAIN {
                SAZONE_NAME[28],
                Float:SAZONE_AREA[6]
};
static const gSAZones[][SAZONE_MAIN] = {
        //      NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
        {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
        {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
        {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
        {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
        {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
        {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
        {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
        {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
        {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
        {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
        {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
        {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
        {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
        {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
        {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
        {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
        {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
        {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
        {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
        {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
        {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
        {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
        {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
        {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
        {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
        {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
        {"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
        {"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
        {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
        {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
        {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
        {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
        {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
        {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
        {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
        {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
        {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
        {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
        {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
        {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
        {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
        {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
        {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
        {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
        {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
        {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
        {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
        {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
        {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
        {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
        {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
        {"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
        {"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
        {"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
        {"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
        {"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
        {"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
        {"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
        {"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
        {"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
        {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
        {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
        {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
        {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
        {"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
        {"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
        {"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
        {"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
        {"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
        {"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
        {"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
        {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
        {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
        {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
        {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
        {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
        {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
        {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
        {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
        {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
        {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
        {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
        {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
        {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
        {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
        {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
        {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
        {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
        {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
        {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
        {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
        {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
        {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
        {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
        {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
        {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
        {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
        {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
        {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
        {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
        {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
        {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
        {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
        {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
        {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
        {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
        {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
        {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
        {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
        {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
        {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
        {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
        {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
        {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
        {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
        {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
        {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
        {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
        {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
        {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
        {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
        {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
        {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
        {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
        {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
        {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
        {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
        {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
        {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
        {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
        {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
        {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
        {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
        {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
        {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
        {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
        {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
        {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
        {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
        {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
        {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
        {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
        {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
        {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
        {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
        {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
        {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
        {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
        {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
        {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
        {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
        {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
        {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
        {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
        {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
        {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
        {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
        {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
        {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
        {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
        {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
        {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
        {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
        {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
        {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
        {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
        {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
        {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
        {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
        {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
        {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
        {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
        {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
        {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
        {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
        {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
        {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
        {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
        {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
        {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
        {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
        {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
        {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
        {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
        {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
        {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
        {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
        {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
        {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
        {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
        {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
        {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
        {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
        {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
        {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
        {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
        {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
        {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
        {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
        {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
        {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
        {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
        {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
        {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
        {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
        {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
        {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
        {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
        {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
        {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
        {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
        {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
        {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
        {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
        {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
        {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
        {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
        {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
        {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
        {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
        {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
        {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
        {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
        {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
        {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
        {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
        {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
        {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
        {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
        {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
        {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
        {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
        {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
        {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
        {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
        {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
        {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
        {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
        {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
        {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
        {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
        {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
        {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
        {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
        {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
        {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
        {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
        {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
        {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
        {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
        {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
        {"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
        {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
        {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
        {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
        {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
        {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
        {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
        {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
        {"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
        {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
        {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
        {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
        {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
        {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
        {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
        {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
        {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
        {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
        {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
        {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
        {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
        {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
        {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
        {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
        {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
        {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
        {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
        {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
        {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
        {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
        {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
        {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
        {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
        {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
        {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
        {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
        {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
        {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
        {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
        {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
        {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
        {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
        {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
        {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
        {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
        {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
        {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
        {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
        {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
        {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
        {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
        {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
        {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
        {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
        {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
        {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
        {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
        {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
        {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
        {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
        {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
        {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
        {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
        {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
        {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
        {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
        {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
        {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
        {"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
        {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
        {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
        {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
        {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
        {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
        {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
        {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
        {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
        {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
        {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
        {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
        {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
        {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
        {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
        {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
        {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
        {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
        {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
        {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
        {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
        {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
        {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
        {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
        {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
        {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
        {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
        {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
        {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
        {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
        {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
        {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
        {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
        {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
        {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
        {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
        {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
        // Main Zones
        {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
        {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
        {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
        {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
        {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
        {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
        {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
        {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
        {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

/*
 * Pizzaboy
 */

new Float:FarmerCP[62][3] = {
{-1184.7330,-1057.2025,129.2188},
{-1182.0505,-1047.9340,130.0555},
{-1181.2095,-1039.2585,130.0729},
{-1177.8176,-1027.8783,129.2188},
{-1190.6715,-1055.3101,129.2188},
{-1188.5544,-1047.2554,129.2188},
{-1176.6908,-1037.9633,129.2188},
{-1180.9260,-1020.3943,129.2188},
{-1168.7784,-1010.2512,129.2188},
{-1174.6627,-988.6727,129.2188},
{-1165.5800,-982.9389,129.2188},
{-1164.4843,-973.7057,129.2188},
{-1154.2067,-975.4506,129.2188},
{-1156.7524,-968.2583,129.2188},
{-1164.6458,-964.8710,129.2119},
{-1174.8402,-952.0563,129.2119},
{-1169.3485,-931.7105,129.2188},
{-1158.5471,-936.7346,129.2188},
{-1145.5247,-957.7192,129.2188},
{-1110.8628,-979.8690,129.2188},
{-1110.4592,-983.6483,129.2188},
{-1109.7700,-985.1765,129.2188},
{-1097.1040,-991.5689,129.2188},
{-1093.4611,-988.4227,129.2188},
{-1089.3196,-977.1440,129.2188},
{-1084.7570,-967.0233,129.2188},
{-1080.0801,-955.6721,129.2188},
{-1075.1759,-950.5182,129.2188},
{-1067.4169,-945.3806,129.2188},
{-1066.3652,-933.5925,129.2188},
{-1055.3894,-922.8911,129.2188},
{-1044.2822,-921.1588,129.2188},
{-1035.9348,-924.2974,129.2188},
{-1026.1591,-919.6811,129.2126},
{-1016.4851,-921.2460,129.2126},
{-1016.4984,-930.2941,129.2188},
{-1021.9794,-936.9327,129.2188},
{-1019.2901,-948.0623,129.2188},
{-1026.9137,-954.7494,129.2188},
{-1021.1954,-963.3629,129.2188},
{-1015.5831,-979.9092,129.2188},
{-1021.1586,-989.1246,129.2126},
{-1018.9532,-1000.9474,129.2126},
{-1012.5120,-1006.7274,129.2126},
{-1029.8455,-1015.3331,129.2188},
{-1038.0959,-1019.5640,129.2119},
{-1043.8519,-1020.9884,129.2119},
{-1037.6980,-1028.4989,129.2119},
{-1027.6744,-1029.4021,129.2188},
{-1020.1740,-1030.5972,129.2188},
{-1016.8517,-1039.7197,129.2188},
{-1011.8314,-1049.3920,129.2188},
{-1010.9407,-1055.3903,129.2188},
{-1016.9509,-1055.8711,129.2188},
{-1025.4675,-1057.4178,129.2188},
{-1035.2345,-1047.4647,129.2188},
{-1041.1904,-1048.4178,129.2188},
{-1046.7261,-1039.1467,129.2188},
{-1057.7117,-1025.5576,129.2119},
{-1067.5223,-1012.8103,129.2188},
{-1071.5131,-1007.7061,129.2188},
{-1090.9283,-1016.6706,129.2188}
};
new Float:TruckerCP[20][4] = {
{-545.1097,-547.1974,25.5234,50.0},
{63.7560,-282.9862,1.5781,66.0},
{1354.2772,362.9476,19.9792,130.0},
{1219.3727,190.0903,19.8497,128.0},
{1150.8655,-1206.7278,19.1651,78.0},
{-1726.5042,-118.2653,3.5489,156.0},
{-1820.0842,-163.5816,9.4056,156.0},
{-1557.8158,1273.7889,7.1776,186.0},
{-1870.9152,1415.1915,7.1832,200.0},
{-2262.6050,2388.0996,4.9778,256.0},
{1479.9235,2371.5002,10.8203,210.0},
{1638.1719,2312.4280,10.2530,218.0},
{2201.4673,2787.1174,10.8203,202.0},
{2399.1533,2800.3040,10.8203,204.0},
{2367.5872,2754.2314,10.8203,210.0},
{2790.4695,2571.5168,10.3988,226.0},
{2840.7820,956.7831,10.7500,192.0},
{2841.9966,996.7662,10.7500,196.0},
{1645.0560,1068.9883,10.8203,196.0},
{1721.0654,712.1196,10.8203,200.0}
};

new Float:PizzaCP[57][4] = {
{191.902, -1308.37, 70.2973, 96.0},
{221.615, -1251.18, 78.3199, 90.0},
{252.636, -1268.29, 73.8125, 92.0},
{254.916, -1223.53, 74.9224, 98.0},
{298.611, -1157.04, 80.9099, 90.0},
{349.455, -1196.18, 76.5156, 100.0},
{228.746, -1402.25, 51.601, 94.0},
{256.678, -1363.74, 53.1094, 96.0},
{295.767, -1334.91, 53.4415, 98.0},
{354.126, -1278.94, 53.7036, 90.0},
{400.238, -1269.86, 50.0198, 94.0},
{421.953, -1256.92, 51.581, 100.0},
{144.54, -1468.27, 25.2737, 92.0},
{550.845, -1197.69, 44.5342, 100.0},
{572.098, -1128.43, 50.6797, 94.0},
{554.86, -1160.36, 54.4223, 96.0},
{471.169, -1165.91, 66.8957, 92.0},
{415.085, -1156.19, 76.6876, 98.0},
{498.101, -1092.66, 82.3592, 90.0},
{556.998, -1074.58, 72.922, 96.0},
{725.352, -997.112, 52.7344, 92.0},
{698.609, -1058.7, 49.4217, 100.0},
{638.832, -1122.6, 44.207, 94.0},
{622.893, -1099.4, 46.841, 98.0},
{791.27, -841.951, 60.6373, 76.0},
{829.065, -860.469, 69.9219, 78.0},
{835.786, -893.271, 68.7689, 82.0},
{864.069, -847.053, 77.1819, 86.0},
{926.271, -852.245, 93.4565, 76.0},
{912.504, -831.876, 92.3688, 86.0},
{936.039, -847.167, 93.7941, 80.0},
{981.976, -831.238, 95.4686, 86.0},
{1021.08, -776.543, 103.003, 82.0},
{1033.98, -811.693, 101.852, 78.0},
{1093.51, -804.255, 107.419, 84.0},
{977.665, -770.025, 112.203, 76.0},
{785.122, -827.054, 70.2896, 80.0},
{809.973, -758.352, 76.5314, 86.0},
{840.497, -757.208, 85.3017, 86.0},
{890.407, -781.425, 101.295, 78.0},
{868.04, -715.398, 105.68, 80.0},
{898.521, -677.614, 116.89, 84.0},
{944.179, -707.64, 122.211, 76.0},
{979.941, -673.514, 121.976, 80.0},
{1044.19, -641.011, 120.117, 78.0},
{1095.3, -645.047, 113.498, 82.0},
{1111.33, -741.057, 100.133, 86.0},
{1299.72, -799.708, 84.1406, 76.0},
{1329.51, -631.976, 109.135, 84.0},
{1442.65, -631.78, 95.7114, 80.0},
{1497.53, -689.87, 94.7862, 78.0},
{1525.25, -774.585, 79.8729, 86.0},
{1532.44, -799.215, 72.6625, 82.0},
{1539.46, -850.469, 64.3361, 84.0},
{1536.73, -883.623, 57.6575, 78.0},
{1468.81, -904.586, 54.8359, 84.0},
{1422.12, -884.527, 50.6241, 82.0}
};

new Float:KartCP[24][3] = {
{2760.6743,-2423.0627,12.8145},
{2657.1194,-2403.6953,12.8034},
{2574.0022,-2371.3425,13.3822},
{2285.3049,-2082.6021,12.6462},
{2199.5376,-2165.5667,12.6744},
{2163.1555,-2132.3362,12.6621},
{2115.3230,-2112.6851,12.6334},
{2100.9578,-2083.8086,12.8306},
{2110.8284,-2072.7393,12.8382},
{2123.4844,-2074.2295,12.8308},
{2125.8828,-2085.4524,12.8306},
{2134.3240,-2092.4978,12.8308},
{2149.9617,-2101.8298,12.8307},
{2229.9783,-2135.2292,12.6628},
{2282.4302,-2083.7100,12.6666},
{2387.5469,-2185.8772,22.9628},
{2589.4468,-2387.1570,12.6691},
{2588.6606,-2417.7405,12.7512},
{2630.4092,-2451.7729,12.9165},
{2667.3909,-2469.2114,12.9191},
{2724.1941,-2503.1621,12.7708},
{2760.1687,-2486.8794,12.7955},
{2761.1440,-2453.8042,12.8327},
{0.0,0.0,0.0}
};

new Float:GarbageCP[12][3] = {
{1934.9026,-2004.0287,13.5469},
{1941.0300,-1879.9418,13.5241},
{1806.9127,-1689.2512,13.5353},
{1742.6941,-1757.8728,13.5387},
{1707.7867,-1493.8885,13.5469},
{1702.0320,-1555.4133,13.5469},
{1219.8761,-1113.5184,24.5794},
{1032.1385,-1083.7374,23.8281},
{2018.7588,-1777.1405,13.5537},
{1855.7201,-1886.8657,13.4408},
{1606.2705,-1673.8463,13.5469},
{0.0,0.0,0.0}
};

new Float:SweeperCP[25][3] = {
{1640.72, -1875.94, 14.0657},
{1693.47, -1776.74, 14.2378},
{1693.47, -1614.42, 14.2378},
{1661.65, -1561.69, 14.2456},
{1697.0, -1504.89, 14.2378},
{1662.0, -1460.84, 14.2378},
{1718.61, -1407.83, 14.2249},
{1718.11, -1262.94, 14.2205},
{1692.86, -1157.09, 24.4991},
{1581.62, -1145.51, 24.6757},
{1471.33, -1029.28, 24.5718},
{1348.52, -1063.73, 27.1572},
{1388.32, -1146.78, 24.52},
{1450.55, -1174.24, 24.6551},
{1450.62, -1416.51, 14.3589},
{1447.07, -1596.35, 14.2888},
{1526.2318, -1607.1693, 13.3828},
{1525.5503, -1719.1377, 13.3828},
{1462.5029, -1729.0201, 13.3828},
{1386.2438, -1748.7227, 13.3828},
{1386.3875, -1844.8047, 13.3828},
{1418.3124, -1875.2656, 13.3828},
{1536.6471, -1875.0531, 13.3828},
{1618.7550, -1880.2307, 13.3828},
{0.0,0.0,0.0}
};

/**
 * Examen - Airport
 */
 

new Float:ExamenD1[8][3] = {
{1422.1556,-1648.8845,13.0338},
{1427.4624,-1734.7935,13.0668},
{1818.4553,-1733.8788,13.0666},
{1820.2146,-1933.2534,13.0599},
{1959.8840,-1934.7037,13.0673},
{1959.3435,-2154.6616,13.0679},
{1975.5015,-2216.1116,13.2304},
{1976.5553,-2213.3857,13.2310}
};

new Float:ExamenD2[19][3] = {
{1844.3966,-2496.3052,13.2383},
{1835.9949,-2494.2402,13.2378},
{1828.3816,-2490.6755,13.2381},
{1823.4033,-2493.3518,13.2386},
{1818.4375,-2497.1489,13.2389},
{1811.6001,-2494.6453,13.2386},
{1807.3718,-2490.8081,13.2390},
{1800.6022,-2494.0540,13.2385},
{1792.6121,-2494.2773,13.2390},
{1787.2435,-2489.9055,13.2385},
{1774.9591,-2488.6868,13.2387},
{1759.0833,-2493.8945,13.2390},
{1745.5303,-2492.9121,13.2390},
{1742.2181,-2491.5286,13.2387},
{1736.4525,-2491.2412,13.2388},
{1734.4850,-2494.0986,13.2388},
{1729.5198,-2496.4861,13.2380},
{1723.3649,-2493.3445,13.2389},
{1713.4845,-2493.9973,13.2391}
};


new Float:ExamenD3[7][3] = {
{1964.0042,-1961.0103,13.3951},
{1963.5471,-1750.4642,13.0675},
{1825.4053,-1749.8981,13.0673},
{1824.0128,-1730.5364,13.0668},
{1432.0709,-1731.2740,13.0675},
{1432.3884,-1649.3701,13.0669},
{1379.3967,-1648.5856,13.0635}
};

new Float:ExamenF[16][3] = {
{1673.7622,-2587.1445,14.0297},
{1676.4435,-2519.0042,25.1317},
{1681.8258,-2384.0696,38.5634},
{1693.7175,-2115.4270,53.4976},
{1577.1370,-1819.7847,76.3505},
{1484.9913,-1587.9258,81.2901},
{1587.9946,-1474.5863,105.8450},
{1986.0520,-1427.4329,82.7775},
{2544.3435,-1780.6025,45.4709},
{2811.3376,-2034.4193,44.6925},
{2750.3274,-2197.2202,64.8594},
{2608.3057,-2380.2102,44.3928},
{2173.7566,-2555.7559,32.7407},
{1961.9561,-2598.8625,17.9377},
{1848.7751,-2589.9512,14.1890},
{1709.9622,-2590.5266,14.0221}
};

new Float:ExamenS[12][3] = {
{729.6461,-1580.7148,-0.3933},
{722.9798,-1711.6471,-0.2723},
{723.9014,-1922.1228,-0.3473},
{871.6203,-2009.0304,-0.0148},
{948.8953,-2165.5830,-0.0766},
{1001.9946,-2324.9858,-0.0382},
{1244.4335,-2513.0991,-0.3102},
{984.3990,-2321.9836,-0.1503},
{824.3082,-2068.1948,-0.3388},
{726.6353,-1924.6431,-0.1475},
{718.1938,-1748.7554,-0.1388},
{723.2352,-1526.9739,-0.1238}
};

/**
 * Spawns
 */
 
new Float:SpawnSpawns[12][4] = {
{1417.7534,-1695.9192,13.5469,267.0418},
{1418.0037,-1698.6172,13.5469,267.0418},
{1417.8297,-1701.0676,13.5395,267.0418},
{1417.2920,-1703.1320,13.5395,267.0418},
{1416.6782,-1705.5649,13.5469,267.0418},
{1416.9843,-1708.1161,13.5469,267.0418},
{1413.0446,-1707.9164,13.5469,267.0418},
{1412.9655,-1705.2417,13.5395,267.0418},
{1413.5363,-1702.5577,13.5395,267.0418},
{1410.7467,-1702.3213,13.5395,267.0418},
{1410.4771,-1705.0696,13.5395,267.0418},
{1410.2561,-1707.0909,13.5469,267.0418}
};

/**
 * Jails
 */

new Float:JailSpawns[20][4] = {
{172.1669,-203.2810,342.9163,4.0120},
{167.3739,-203.3728,342.9163,1.1293},
{162.7048,-203.1434,342.9163,1.6098},
{157.6633,-203.3787,342.9163,4.9729},
{171.8841,-181.2247,342.9163,177.5977},
{167.0560,-181.8071,342.9163,180.0000},
{162.3061,-181.5653,342.9163,181.4414},
{157.5824,-181.7088,342.9163,180.4805},
{171.3581,-202.8537,346.9174,354.5467},
{167.2576,-202.8443,346.9174,0.7925},
{162.5787,-202.7310,346.9174,2.2338},
{157.9245,-203.2501,346.9174,2.7143},
{152.9730,-203.3318,346.9174,358.3903},
{148.1369,-203.2624,346.9174,355.0271},
{148.2460,-182.7622,346.9174,179.6632},
{152.7247,-182.6222,346.9174,174.8587},
{157.4455,-182.7536,346.9174,188.7917},
{162.0473,-182.9957,346.9174,181.5850},
{167.4720,-182.8368,346.9174,174.8587},
{171.3321,-183.0900,346.9174,177.2609}
};

new Float:InviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};

new factionskins[9][10] = {
{0},
{284, 280, 281, 266, 267, 71, 265},
{105, 106, 107, 269, 270, 195},
{102, 103, 104, 185, 296, 13},
{114, 115, 116, 46, 292, 55},
{17, 227, 59, 295, 148},
{57, 187, 188, 147, 141},
{274, 275, 276, 70, 150},
{0}
};

new tfactionskins[9] = {0,7,6,6,6,5,5,5,0};

enum dInfo
{
	dID,
	dModel,
	dPrice,
	dStock,
	dDoors,
	dType[20],
	dMaxSpeed
};
new DSModels[212][dInfo];

/**
 * Player Data
 */

enum pPaperInfo
{
	PaperID,
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128]
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];

enum pData
{
	ID,
	Name[MAX_PLAYER_NAME],
	Password[129],
	Level,
	Cash,
	Admin,
	Banned,
	Muted,
	MutedTime,
	CarLic,
	FlyLic,
	BoatLic,
	FishLic,
	GunLic,
	MatsLic,
	Warns,
	Job,
	Jailed,
	JailTime,
	Wanted,
	Leader,
	Member,
	SpawnChange,
	Rank,
	FacWarns,
	Char,
	Drugs,
	Materials,
	Exp,
	FPunish,
	Bizkey,
	WantedLevel,
	LastCrime[50],
	LastReporter[25],
	LastDate[50],
	Crimes,
	Arrests,
	TrackLose,
	CarKey1,
	TotalExp,
	LastLog[50],
	RegDate[50],
	online,
	ipCountry[30],
	ipCity[30],
	ipISP[30],
	Helper,
	JobTime,
	PhoneNr,
	Fuel,
	Bank,
	WDeaths,
	HKey,
	Tutorial,
	Email[50],
	PIN,
	Activated,
	CarKey2,
	CarKey3,
	CarKey4,
	CarKey5,
	Premium,
	Refferal,
	
	PhoneOnline,
    SpeakerPhone,
	CSkin,
	PlayerCuffed,
	Speed,
	PlayerToFind,
	MDC,
	OnDuty,
	InBizz,
	InHouse,
	InHQ,
	SpectateP,
	Spectate,
	WatchingTV,
	Disguise,
	nTime,
	RadarUse,
	Speedlimit,
	SC,
	bool:IsLoggedIn,
	LoginAttempts,
	WarOffer,
	WarOffered,
	WarPrice,
	WarTurf,
};
new DealerID[MAX_PLAYERS], VehicleDealer[MAX_PLAYERS], InDealer[MAX_PLAYERS], Float:DSAngle[MAX_PLAYERS], MedicCall[MAX_PLAYERS], MedicAns[MAX_PLAYERS], DestinationSet[MAX_PLAYERS], RadioSet[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS], LiveReporter[MAX_PLAYERS], TalkingLive[MAX_PLAYERS], PaperOffer[MAX_PLAYERS], PaperReporter[MAX_PLAYERS], BringingPaper[MAX_PLAYERS];
new GotPaper[MAX_PLAYERS], WritingPaper[MAX_PLAYERS], WritingPaperNumber[MAX_PLAYERS], WritingLine[MAX_PLAYERS], Float:DestSet[MAX_PLAYERS][3], PlayerTied[MAX_PLAYERS];
new VSpecial[MAX_PLAYERS], ExamPoint[MAX_PLAYERS], EStep[MAX_PLAYERS], VHits[MAX_PLAYERS], rTime[MAX_PLAYERS], PPizzaCP[MAX_PLAYERS], VJob[MAX_PLAYERS], PSweeperCP[MAX_PLAYERS];
new Dice[MAX_PLAYERS], Death[MAX_PLAYERS], Float:PosX[MAX_PLAYERS], Float:PosY[MAX_PLAYERS], Float:PosZ[MAX_PLAYERS];
new PlayerAFK[MAX_PLAYERS], AFKLoggin[MAX_PLAYERS], PTruckerCP[MAX_PLAYERS], PFarmerCP[MAX_PLAYERS], Mobile[MAX_PLAYERS], PBusCP[MAX_PLAYERS], Key[MAX_PLAYERS], KeyC[MAX_PLAYERS], SwitchKey[MAX_PLAYERS], ByPASS[MAX_PLAYERS];
new Authorised[MAX_PLAYERS], OnExp[MAX_PLAYERS], JoinedCS[MAX_PLAYERS], KeyReset[MAX_PLAYERS], curid[MAX_PLAYERS], Mats[MAX_PLAYERS], GunOffer[MAX_PLAYERS], GunOffered[MAX_PLAYERS], GunPrice[MAX_PLAYERS], GunModel[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS], DrugOffered[MAX_PLAYERS], DrugPrice[MAX_PLAYERS], DrugAmount[MAX_PLAYERS], PlayerStoned[MAX_PLAYERS], MaterialsOffer[MAX_PLAYERS], MaterialsOffered[MAX_PLAYERS], MaterialsPrice[MAX_PLAYERS], MaterialsAmount[MAX_PLAYERS];
new PGarbageCP[MAX_PLAYERS], Allowed[MAX_PLAYERS], TicketOffer[MAX_PLAYERS], TicketMoney[MAX_PLAYERS], OwnableCarOffer[MAX_PLAYERS], OwnableCarOffered[MAX_PLAYERS], OwnableCarID[MAX_PLAYERS], OwnableCarPrice[MAX_PLAYERS], OwnableCarSlot[MAX_PLAYERS];
new JoinedKart[MAX_PLAYERS], PKartCP[MAX_PLAYERS], Sleeping[MAX_PLAYERS], SleepXP[MAX_PLAYERS], OwnableHouseOffer[MAX_PLAYERS], OwnableHouseOffered[MAX_PLAYERS], OwnableHouseID[MAX_PLAYERS], OwnableHousePrice[MAX_PLAYERS];
new PMTo[MAX_PLAYERS], NeedAns[MAX_PLAYERS];

new PlayerData			[MAX_PLAYERS]	[pData];
new MysqlRaceCheck		[MAX_PLAYERS];
new Float:TeleportDest	[MAX_PLAYERS]	[7];
new TeleportInt[MAX_PLAYERS];
new TeleportVW[MAX_PLAYERS];
new Text:TextDrawSpec	[MAX_PLAYERS]	[5];
new War[7];

new PlayerText:		GiveDamage;
new PlayerText:		TakeDamage;

new PlayerText:		Odometerr;
new PlayerText:		Speedd;
new PlayerText:		Fuell;
new PlayerText:		Destination;
new PlayerText:		DestinationKM;
new PlayerText:		Radio;

new PlayerText:		DSBox;
new PlayerText:     DSModel;
new PlayerText:		DSName;
new PlayerText:		DSPrice;
new PlayerText:		DSStock;
new PlayerText:		DSTest;
new PlayerText:		DSInfo;
new PlayerText:		DSBuy;
new PlayerText:		DSCancel;
new PlayerText:		DSPrev;
new PlayerText:		DSNext;

new PlayerText:		XPRemain;
new PlayerText:		XPTLeft;
new PlayerText:		XPTotal;
new PlayerBar:		barxp;

new 			Text:txtTimeDisp;
new 			Text:txtDateDisp;

enum cInfo
{
	cID,
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[25],
	cValue,
	cLicense[14],
	cAlarm,
	cLock,
	mod0,
	mod1,
	mod2,
	mod3,
	mod4,
	mod5,
	mod6,
	mod7,
	mod8,
	mod9,
	mod10,
	mod11,
	mod12,
	mod13,
	paintjob,
	Float:KM,
	Userid,
	Confiscated,
	Spawned,
	cSpecial,
};

new CarInfo[1000][cInfo];

/**
 * MDC Data
 */
 
enum mData
{
	mReporter[25],
	mReason[50],
	mDate[50],
};
new MDCData[MAX_PLAYERS][16][mData];
new Suspects[MAX_PLAYERS][128];

/**
 * SafeBoxs
 */
 
enum SBxinfo
{
	sbID,
	sbMoney,
	sbDrugs,
	sbMats,
	sbMembers,
};
new SafeBox[8][SBxinfo];

/**
 * Static Vehicles
 */
 
#define GasMax 110
new Float: Gas[MAX_VEHICLES];
 
enum vInfo
{
	vID,
	vModel,
	Float:vLocationx,
	Float:vLocationy,
	Float:vLocationz,
	Float:vAngle,
	vColorOne,
	vColorTwo,
	vRespawnDelay,
	vSpecial,
	vFaction,
	vJob,
	vRank,
	vLicense[25]
};
new StaticVeh[MAXVEHICLES][vInfo];

new vehName[][] = { "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier",
"Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy",
"Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick",
"News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster",
"Stunt", "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover",
"Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune",
"Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club", "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car", "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha", "Phoenix",
"Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville", "Tiller", "Utility Trailer" };

enum BusStatProp
{
	bsID,
	bsName[25],
	Float:bsX,
	Float:bsY,
	Float:bsZ,
};

new BusStations[9][BusStatProp] = {
{0,"-",0.0,0.0,0.0},
{1,"Downtown",1655.3193,-1504.2418,13.3828},
{2,"Spawn Building",1442.9922,-1730.3226,13.3828},
{3,"Market",1360.3771,-1327.2415,13.3906},
{4,"Bank of Los Santos",1401.7406,-1036.7830,24.4662},
{5,"Gun Shop",1788.5912,-1175.1185,23.8281},
{6,"Bus Depot",1845.2272,-1386.5067,13.3906},
{7,"Bus Depot II",1736.5316,-1323.9353,13.6672},
{8,"-",0.0,0.0,0.0}
};

new Line1[7] = {1,2,3,4,5,6,7};
new Text3D:BusText[10];

/**
 * Server Info's
 */
 
enum SInfo
{
	users,
	banned,
	newestacc[25],
	recorddate[20],
	recordnumber,
	tax,
};
new ServerInfo[SInfo];

new spdtimer, usetimer, othtimer, spectatetimer;
new nonewbie = 1;

enum hInfo
{
    hID,
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hHealth,
	hArmour,
	hOwner[25],
	hValue,
	hInt,
	hLock,
	hOwned,
	hRent,
	hRentabil,
	hTakings,
	hDate,
	hLevel,
	hDrugs,
	hMaterials,
};

new HouseInfo[171][hInfo];
new Text3D:HouseLabel[sizeof(HouseInfo)];


enum zInfo
{
	zID,
	zOwned,
	zTime,
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY,
};
new TurfInfo[49][zInfo];
new Turfs[49];

enum wInfo
{
	wFaction,
	wAttacker,
	wTime,
	wPrice,
};
new WarInfo[49][wInfo];
new WarScore[MAX_PLAYERS][49];
new WarDeaths[MAX_PLAYERS][49];

enum peInfo
{
	peID,
	peOwned,
	peOwner[25],
	peMessage[128],
	Float:peEntranceX,
	Float:peEntranceY,
	Float:peEntranceZ,
	Float:peExitX,
	Float:peExitY,
	Float:peExitZ,
	peLevelNeeded,
	peBuyPrice,
	peEntranceCost,
	peTill,
	peLocked,
	peProducts,
	peMaxProducts,
	pePriceProd,
}
new PecoInfo[15][peInfo];
new Text3D:PecoLabel[sizeof(PecoInfo)];
new PecoPickup[sizeof(PecoInfo)];

enum bInfo
{
    bID,
    bOwned,
	bOwner[25],
	bMessage[128],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
	bGunPrice,
	bVW,
};
new BizzInfo[40][bInfo];
new Text3D:BizzLabel[sizeof(BizzInfo)];
new BizzPickup[sizeof(BizzInfo)];

enum sbInfo
{
	sbID,
	sbOwned,
	sbOwner[25],
	sbMessage[128],
	Float:sbEntranceX,
	Float:sbEntranceY,
	Float:sbEntranceZ,
	sbLevelNeeded,
	sbBuyPrice,
	sbEntranceCost,
	sbTill,
	sbLocked,
	sbInterior,
	sbProducts,
	sbMaxProducts,
	sbPriceProd,
	sbGunPrice,
};
new SBizzInfo[40][sbInfo];
new Text3D:SBizzLabel[sizeof(SBizzInfo)];
new SBizzPickup[sizeof(SBizzInfo)];

function TakeOAd()
{
	new user[25], message[128], phone[15], string[144], query[128];
    new answer = cache_num_rows();
    if(answer == 1)
    {
		idad = cache_get_field_content_int(0, "ID");
    	cache_get_field_content(0, "user", user, SQL, 129);
    	cache_get_field_content(0, "message", message, SQL, 129);
    	cache_get_field_content(0, "phone", phone, SQL, 129);

		format(string, sizeof(string), "Advertisement: %s by {FFFFFF}%s {00D900}({FFFFFF}%s{00D900})", message, user, phone);
		SendClientMessageToAll(0x00D900FF,string);
		
		mysql_format(SQL, query, sizeof(query), "DELETE FROM ads WHERE ID ORDER BY ID ASC LIMIT 1");
		mysql_tquery(SQL, query, "", "");
		
		SetTimer("TakeAd", 30 * 1000, false);
	}
	else
	{
	    mysql_format(SQL, query, sizeof(query), "ALTER TABLE ads AUTO_INCREMENT = 1");
		mysql_tquery(SQL, query, "", "");
		idad = 0;
		ads = 0;
	}
}

function TakeAd()
{
	new query[128];
	
    mysql_format(SQL, query, sizeof(query), "SELECT `ID`, `user`, `message`, `phone` FROM `ads` WHERE ID ORDER BY ID ASC LIMIT 1");
	mysql_tquery(SQL, query, "TakeOAd", "");
	return 1;
}

function closebarieralspd()
{
    SetObjectRot(bariera, 0, 270, 270);
	return 1;
}
function closegatelspd()
{
    MoveObject(lspdgate,1588.84, -1637.89, 13.18,2);
	return 1;
}
function ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//radi = 2.0; //Trigger Radius
	foreach(Player, i)
	{
		if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			/*if(!BigEar[i])
			{*/
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					SendClientMessage(i, col2, string);
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					SendClientMessage(i, col3, string);
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					SendClientMessage(i, col4, string);
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessage(i, col5, string);
				}
			/*}
			else
			{
				SendClientMessage(i, col1, string);
			}*/
		}
	}
	return 1;
}

function LoadVehicles()
{
	vehss = cache_num_rows();
	for(new i = 1; i <= vehss; i++)
	{
		new j = i - 1;
		StaticVeh[i][vID] 				= i;
		StaticVeh[i][vModel] 			= cache_get_field_content_int(j, "Model");
		StaticVeh[i][vLocationx] 		= cache_get_field_content_float(j, "Locationx");
		StaticVeh[i][vLocationy]		= cache_get_field_content_float(j, "Locationy");
		StaticVeh[i][vLocationz]		= cache_get_field_content_float(j, "Locationz");
		StaticVeh[i][vAngle] 			= cache_get_field_content_float(j, "Angle");
		StaticVeh[i][vColorOne] 		= cache_get_field_content_int(j, "ColorOne");
		StaticVeh[i][vColorTwo] 		= cache_get_field_content_int(j, "ColorTwo");
		StaticVeh[i][vRespawnDelay] 	= cache_get_field_content_int(j, "RespawnDelay");
		StaticVeh[i][vSpecial] 			= cache_get_field_content_int(j, "Special");
		StaticVeh[i][vFaction] 			= cache_get_field_content_int(j, "Faction");
		StaticVeh[i][vJob] 				= cache_get_field_content_int(j, "Job");
		StaticVeh[i][vRank] 			= cache_get_field_content_int(j, "Rank");
		cache_get_field_content(j, "License", StaticVeh[i][vLicense], SQL, 129);
		if(StaticVeh[i][vModel] == 666)
		{
			CreateVehicle(400,StaticVeh[i][vLocationx],StaticVeh[i][vLocationy],StaticVeh[i][vLocationz]+1.0,StaticVeh[i][vAngle],StaticVeh[i][vColorOne],StaticVeh[i][vColorTwo],StaticVeh[i][vRespawnDelay]);
		}
		else
		{	
			CreateVehicle(StaticVeh[i][vModel],StaticVeh[i][vLocationx],StaticVeh[i][vLocationy],StaticVeh[i][vLocationz]+1.0,StaticVeh[i][vAngle],StaticVeh[i][vColorOne],StaticVeh[i][vColorTwo],StaticVeh[i][vRespawnDelay]);
		}
		SetVehicleNumberPlate(i,StaticVeh[i][vLicense]);
		if(StaticVeh[i][vModel] == 481 || StaticVeh[i][vModel] == 509 || StaticVeh[i][vModel] == 510 || StaticVeh[i][vModel] == 462)
		{
			new e,l,a,d,b,bo,o;
			GetVehicleParamsEx(i,e,l,a,d,b,bo,o);
			SetVehicleParamsEx(i,1,l,a,d,b,bo,o);
		}
		else
		{
		    new e,l,a,d,b,bo,o;
			GetVehicleParamsEx(i,e,l,a,d,b,bo,o);
			SetVehicleParamsEx(i,0,l,a,d,b,bo,o);
		}
		if(i >= 242 && i <= 262)
		{
			SetVehicleVirtualWorld(i, 10001);
			KartCar[i-242] = i;
		}
	}
	printf("[MYSQL] Static Vehicles: %d", vehss);
	AttachDynamicObjectToVehicle(sirena1, StaticVeh[52][vID], 0.0, 0.0, 0.7, 0.0, 0.0, 0.0); //
	AttachDynamicObjectToVehicle(policecar1, StaticVeh[52][vID], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(sirena2, StaticVeh[64][vID], 0.0, 0.0, 0.7, 0.0, 0.0, 0.0); //
	AttachDynamicObjectToVehicle(policecar2, StaticVeh[64][vID], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(sirena3, StaticVeh[65][vID], 0.0, 0.0, 0.7, 0.0, 0.0, 0.0); //
	AttachDynamicObjectToVehicle(policecar3, StaticVeh[65][vID], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(sirena4, StaticVeh[66][vID], 0.0, 0.0, 0.7, 0.0, 0.0, 0.0); //
	AttachDynamicObjectToVehicle(policecar4, StaticVeh[66][vID], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);
	
	Attach3DTextLabelToVehicle(BusText[0], StaticVeh[182][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[1], StaticVeh[183][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[2], StaticVeh[184][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[3], StaticVeh[185][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[4], StaticVeh[186][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[5], StaticVeh[187][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[6], StaticVeh[188][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[7], StaticVeh[189][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[8], StaticVeh[190][vID], 0.0352, 5.6202, 1.7338);
	Attach3DTextLabelToVehicle(BusText[9], StaticVeh[191][vID], 0.0352, 5.6202, 1.7338);
}

/*public OnPlayerCheat(playerid, cheatid, source[])
{
    new elc_str[120],elc_reason[60];
    format(elc_str,sizeof(elc_str),"Warning: %s(%d) might use ", PlayerData[playerid][Name], playerid);
    switch(cheatid)
    {
        case 1: format(elc_reason,sizeof(elc_reason),"money cheat (+$%s)",source);
        case 2:
		{
		    new string[128];
			format(elc_reason,sizeof(elc_reason),"weapon cheat (%s)",source);
   			KickLog(playerid,1024,elc_reason);

			format(string, sizeof(string), "AdmCmd: %s was kicked by AdmBot, reason: %s", PlayerData[playerid][Name], elc_reason);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			KickEx(playerid);
		}
        case 3: format(elc_reason,sizeof(elc_reason),"ammmo cheat (%s bullets)",source);
        case 4: format(elc_reason,sizeof(elc_reason),"ammo block cheat");
        case 5: format(elc_reason,sizeof(elc_reason),"speed cheat");
        case 6: format(elc_reason,sizeof(elc_reason),"airbreak/teleport cheat");
        case 7: format(elc_reason,sizeof(elc_reason),"health cheat");
        case 8: format(elc_reason,sizeof(elc_reason),"armour cheat");
        case 9: format(elc_reason,sizeof(elc_reason),"vehicle spawn cheat");
        case 10: format(elc_reason,sizeof(elc_reason),"vehicle crasher");
    }
    strcat(elc_str,elc_reason);
    ABroadCast(RED,elc_str,1);
	return 1;
}*/

public OnVehicleSpawn(vehicleid)
{
	new carid = FindSpawnID(vehicleid);
	SetTunning(carid);
 	if(StaticVeh[vehicleid][vModel] == 481 || StaticVeh[vehicleid][vModel] == 509 || StaticVeh[vehicleid][vModel] == 510 || StaticVeh[vehicleid][vModel] == 462)
	{
		new e,l,a,d,b,bo,o;
		GetVehicleParamsEx(vehicleid,e,l,a,d,b,bo,o);
		SetVehicleParamsEx(vehicleid,1,l,a,d,b,bo,o);
	}
	else
	{
	    new e,l,a,d,b,bo,o;
		GetVehicleParamsEx(vehicleid,e,l,a,d,b,bo,o);
		SetVehicleParamsEx(vehicleid,0,l,a,d,b,bo,o);
	}
	return 1;
}

function SendRadioMessage(member, color, string[])
{
	foreach(Player, i)
	{
	    if(PlayerData[i][Member] == member || PlayerData[i][Leader] == member || PlayerData[i][SC] == member)
			SendClientMessage(i, color, string);
	}
}

function LoadHouses()
{
    new PropertyString[256];
	houses = cache_num_rows();
	for(new i = 1; i <= houses; i++)
	{
		new j = i - 1;
		HouseInfo[i][hID] 					= i;
		HouseInfo[i][hEntrancex] 			= cache_get_field_content_float(j, "Entrancex");
		HouseInfo[i][hEntrancey] 			= cache_get_field_content_float(j, "Entrancey");
		HouseInfo[i][hEntrancez] 			= cache_get_field_content_float(j, "Entrancez");
		HouseInfo[i][hExitx] 				= cache_get_field_content_float(j, "Exitx");
		HouseInfo[i][hExity] 				= cache_get_field_content_float(j, "Exity");
		HouseInfo[i][hExitz] 				= cache_get_field_content_float(j, "Exitz");
		HouseInfo[i][hHealth] 				= cache_get_field_content_int(j, "Health");
		HouseInfo[i][hArmour] 				= cache_get_field_content_int(j, "Armour");
		cache_get_field_content(j, "Owner", HouseInfo[i][hOwner], SQL, 129);
		HouseInfo[i][hValue] 				= cache_get_field_content_int(j, "Value");
		HouseInfo[i][hInt] 					= cache_get_field_content_int(j, "Int");
		HouseInfo[i][hLock] 				= cache_get_field_content_int(j, "Lockk");
		HouseInfo[i][hOwned] 				= cache_get_field_content_int(j, "Owned");
		HouseInfo[i][hRent] 				= cache_get_field_content_int(j, "Rent");
		HouseInfo[i][hRentabil] 			= cache_get_field_content_int(j, "Rentabil");
		HouseInfo[i][hTakings] 				= cache_get_field_content_int(j, "Takings");
		HouseInfo[i][hDate] 				= cache_get_field_content_int(j, "Date");
		HouseInfo[i][hLevel] 				= cache_get_field_content_int(j, "Level");
		if(HouseInfo[i][hOwned] == 0)
		{
			format(PropertyString, sizeof(PropertyString), "{009900}House %d\nThis house is for sale\nPrice: {FFFFFF}$%s\n{009900}Level: {FFFFFF}%d\n{009900}Type {FFFFFF}/buyhouse {009900}to buy",i,Decimal(HouseInfo[i][hValue]),HouseInfo[i][hLevel]);
			HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00FF,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
		else if(HouseInfo[i][hOwned] == 1)
		{
			if(HouseInfo[i][hRentabil] == 1)
			{
				format(PropertyString, sizeof(PropertyString), "{009900}House %d\nOwner: {FFFFFF}%s\n{009900}Level: {FFFFFF}%d",i,HouseInfo[i][hOwner],HouseInfo[i][hLevel]);
				HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00FF,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			}
			else
			{
				format(PropertyString, sizeof(PropertyString), "{009900}House %d\nOwner: {FFFFFF}%s\n{009900}Level: {FFFFFF}%d\n{009900}Rent: {FFFFFF}$%s\n{009900}to rent a room type {FFFFFF}/rentroom",i,HouseInfo[i][hOwner],HouseInfo[i][hLevel],Decimal(HouseInfo[i][hRent]));
				HouseLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00FF,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			}
		}
	}
	printf("[MYSQL] Houses: %d", houses);
}

function LoadBiz()
{
	new PropertyString[256];
	bizzs = cache_num_rows();
	for(new i = 1; i <= bizzs; i++)
	{
		new j = i - 1;
		BizzInfo[i][bID] 					= i;
		BizzInfo[i][bOwned] 				= cache_get_field_content_int(j, "Owned");
		cache_get_field_content(j, "Owner", BizzInfo[i][bOwner], SQL, 129);
		cache_get_field_content(j, "Message", BizzInfo[i][bMessage], SQL, 129);
		BizzInfo[i][bEntranceX] 			= cache_get_field_content_float(j, "EntranceX");
		BizzInfo[i][bEntranceY] 			= cache_get_field_content_float(j, "EntranceY");
		BizzInfo[i][bEntranceZ] 			= cache_get_field_content_float(j, "EntranceZ");
		BizzInfo[i][bExitX]					= cache_get_field_content_float(j, "ExitX");
		BizzInfo[i][bExitY]					= cache_get_field_content_float(j, "ExitY");
		BizzInfo[i][bExitZ]					= cache_get_field_content_float(j, "ExitZ");
		BizzInfo[i][bLevelNeeded] 			= cache_get_field_content_int(j, "LevelNeeded");
		BizzInfo[i][bBuyPrice] 				= cache_get_field_content_int(j, "BuyPrice");
		BizzInfo[i][bEntranceCost] 			= cache_get_field_content_int(j, "EntranceCost");
		BizzInfo[i][bTill] 					= cache_get_field_content_int(j, "Till");
		BizzInfo[i][bLocked] 				= cache_get_field_content_int(j, "Locked");
		BizzInfo[i][bInterior] 				= cache_get_field_content_int(j, "Interior");
		BizzInfo[i][bProducts] 				= cache_get_field_content_int(j, "Products");
		BizzInfo[i][bMaxProducts] 			= cache_get_field_content_int(j, "MaxProducts");
		BizzInfo[i][bPriceProd] 			= cache_get_field_content_int(j, "PriceProd");
		BizzInfo[i][bGunPrice] 				= cache_get_field_content_int(j, "GunPrice");
		BizzInfo[i][bVW] 					= cache_get_field_content_int(j, "Virtual");
		if(BizzInfo[i][bOwned] == 0)
		{
			format(PropertyString,sizeof(PropertyString),"{3366FF}Biz %d\n{FFFFFF}%s\n{3366FF}This biz is for sale\nPrice: {FFFFFF}$%s\n{3366FF}Level: {FFFFFF}%d\n{3366FF}Type {FFFFFF}/buybiz {3366FF}to buy",i,BizzInfo[i][bMessage],Decimal(BizzInfo[i][bBuyPrice]),BizzInfo[i][bLevelNeeded]);
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			BizzPickup[i] = CreateDynamicPickup(1239, 23, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], -1,-1,-1,100.0);
		}
		else if(BizzInfo[i][bOwned] == 1)
		{
			format(PropertyString,sizeof(PropertyString),"{3366FF}Biz %d\n{FFFFFF}%s\n{3366FF}Owner: {FFFFFF}%s\n{3366FF}Entrance Fee: {FFFFFF}$%s\n{3366FF}Type {FFFFFF}/enter {3366FF}to enter",i,BizzInfo[i][bMessage],BizzInfo[i][bOwner],Decimal(BizzInfo[i][bEntranceCost]));
			BizzLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			BizzPickup[i] = CreateDynamicPickup(1239, 23, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], -1,-1,-1,100.0);
		}
	}
	printf("[MYSQL] Biz: %d", bizzs);
}

function LoadSBiz()
{
	new PropertyString[256];
	sbizzs = cache_num_rows();
	for(new i = 1; i <= sbizzs; i++)
	{
		new j = i - 1;
		SBizzInfo[i][sbID] 					= i;
		SBizzInfo[i][sbOwned] 				= cache_get_field_content_int(j, "Owned");
		cache_get_field_content(j, "Owner", SBizzInfo[i][sbOwner], SQL, 129);
		cache_get_field_content(j, "Message", SBizzInfo[i][sbMessage], SQL, 129);
		SBizzInfo[i][sbEntranceX] 			= cache_get_field_content_float(j, "EntranceX");
		SBizzInfo[i][sbEntranceY] 			= cache_get_field_content_float(j, "EntranceY");
		SBizzInfo[i][sbEntranceZ] 			= cache_get_field_content_float(j, "EntranceZ");
		SBizzInfo[i][sbLevelNeeded] 		= cache_get_field_content_int(j, "LevelNeeded");
		SBizzInfo[i][sbBuyPrice] 			= cache_get_field_content_int(j, "BuyPrice");
		SBizzInfo[i][sbEntranceCost] 		= cache_get_field_content_int(j, "EntranceCost");
		SBizzInfo[i][sbTill] 				= cache_get_field_content_int(j, "Till");
		SBizzInfo[i][sbLocked] 				= cache_get_field_content_int(j, "Locked");
		SBizzInfo[i][sbInterior] 			= cache_get_field_content_int(j, "Interior");
		SBizzInfo[i][sbProducts] 			= cache_get_field_content_int(j, "Products");
		SBizzInfo[i][sbMaxProducts] 		= cache_get_field_content_int(j, "MaxProducts");
		SBizzInfo[i][sbPriceProd] 			= cache_get_field_content_int(j, "PriceProd");
		SBizzInfo[i][sbGunPrice] 			= cache_get_field_content_int(j, "GunPrice");
		if(SBizzInfo[i][sbOwned] == 0)
		{
			format(PropertyString,sizeof(PropertyString),"{3366FF}SBiz %d\n{FFFFFF}%s\n{3366FF}This biz is for sale\nPrice: {FFFFFF}$%s\n{3366FF}Level: {FFFFFF}%d\n{3366FF}Type {FFFFFF}/buybiz {3366FF}to buy",i,SBizzInfo[i][sbMessage],Decimal(SBizzInfo[i][sbBuyPrice]),SBizzInfo[i][sbLevelNeeded]);
			SBizzLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			SBizzPickup[i] = CreateDynamicPickup(1239, 23, SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ], -1,-1,-1,100.0);
		}
		else if(SBizzInfo[i][sbOwned] == 1)
		{
			format(PropertyString,sizeof(PropertyString),"{3366FF}SBiz %d\n{FFFFFF}%s\n{3366FF}Owner: {FFFFFF}%s\n{3366FF}Fee: {FFFFFF}$%s",i,SBizzInfo[i][sbMessage],SBizzInfo[i][sbOwner],Decimal(SBizzInfo[i][sbEntranceCost]));
			SBizzLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			SBizzPickup[i] = CreateDynamicPickup(1239, 23, SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ], -1,-1,-1,100.0);
		}
	}
	printf("[MYSQL] SBiz: %d", sbizzs);
}

function LoadPecos()
{
	new PropertyString[256];
	pecos = cache_num_rows();
	for(new i = 1; i <= pecos; i++)
	{
		new j = i - 1;
		PecoInfo[i][peID] 					= i;
		PecoInfo[i][peOwned] 				= cache_get_field_content_int(j, "Owned");
		cache_get_field_content(j, "Owner", PecoInfo[i][peOwner], SQL, 129);
		cache_get_field_content(j, "Message", PecoInfo[i][peMessage], SQL, 129);
		PecoInfo[i][peEntranceX] 			= cache_get_field_content_float(j, "EntranceX");
		PecoInfo[i][peEntranceY] 			= cache_get_field_content_float(j, "EntranceY");
		PecoInfo[i][peEntranceZ] 			= cache_get_field_content_float(j, "EntranceZ");
		PecoInfo[i][peExitX]				= cache_get_field_content_float(j, "ExitX");
		PecoInfo[i][peExitY]				= cache_get_field_content_float(j, "ExitY");
		PecoInfo[i][peExitZ]				= cache_get_field_content_float(j, "ExitZ");
		PecoInfo[i][peLevelNeeded] 			= cache_get_field_content_int(j, "LevelNeeded");
		PecoInfo[i][peBuyPrice] 			= cache_get_field_content_int(j, "BuyPrice");
		PecoInfo[i][peEntranceCost] 		= cache_get_field_content_int(j, "EntranceCost");
		PecoInfo[i][peTill] 				= cache_get_field_content_int(j, "Till");
		PecoInfo[i][peLocked] 				= cache_get_field_content_int(j, "Locked");
		PecoInfo[i][peProducts] 			= cache_get_field_content_int(j, "Products");
		PecoInfo[i][peMaxProducts] 			= cache_get_field_content_int(j, "MaxProducts");
		PecoInfo[i][pePriceProd] 			= cache_get_field_content_int(j, "PriceProd");
		if(PecoInfo[i][peOwned] == 0)
		{
			format(PropertyString,sizeof(PropertyString),"{3366FF}Gas Station %d\n{FFFFFF}%s\n{3366FF}This station is for sale\nPrice: {FFFFFF}$%d\n{3366FF}Level: {FFFFFF}%d\n{3366FF}Type {FFFFFF}/buygstation {3366FF}to buy",i,PecoInfo[i][peMessage],PecoInfo[i][peBuyPrice],PecoInfo[i][peLevelNeeded]);
			PecoLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,PecoInfo[i][peEntranceX],PecoInfo[i][peEntranceY], PecoInfo[i][peEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			PecoPickup[i] = CreateDynamicPickup(1239, 23, PecoInfo[i][peEntranceX], PecoInfo[i][peEntranceY], PecoInfo[i][peEntranceZ], -1,-1,-1,100.0);
		}
		else if(PecoInfo[i][peOwned] == 1)
		{
			format(PropertyString,sizeof(PropertyString),"{3366FF}Gas Station %d\n{FFFFFF}%s\n{3366FF}Owner: {FFFFFF}%s\n{3366FF}Price per liter: {FFFFFF}$%d",i,PecoInfo[i][peMessage],PecoInfo[i][peOwner],PecoInfo[i][peEntranceCost]);
			PecoLabel[i] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,PecoInfo[i][peEntranceX],PecoInfo[i][peEntranceY], PecoInfo[i][peEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			PecoPickup[i] = CreateDynamicPickup(1239, 23, PecoInfo[i][peEntranceX], PecoInfo[i][peEntranceY], PecoInfo[i][peEntranceZ], -1,-1,-1,100.0);
		}
	}
	printf("[MYSQL] Peco: %d", bizzs);
}

function LoaSdBiz()
{
	sbizzs = cache_num_rows();
	for(new i = 1; i <= bizzs; i++)
	{

	}
	printf("[MYSQL] SBiz: %d", sbizzs);
}

function LoadSafebox()
{
	safeboxss = cache_num_rows();
	for(new i = 1; i <= safeboxss; i++)
	{
		new j = i - 1;
		SafeBox[i][sbID] 				= i;
		SafeBox[i][sbMoney] 			= cache_get_field_content_int(j, "Money");
		SafeBox[i][sbDrugs] 			= cache_get_field_content_int(j, "Drugs");
		SafeBox[i][sbMats] 				= cache_get_field_content_int(j, "Mats");
		SafeBox[i][sbMembers] 			= cache_get_field_content_int(j, "Members");
	}
	printf("[MYSQL] Safeboxs: %d", safeboxss);
}

function LoadTurfs()
{
	turfss = cache_num_rows();
	for(new i = 1; i <= turfss; i++)
	{
		new j = i - 1;
		TurfInfo[i][zID] 				= i;
		TurfInfo[i][zOwned] 			= cache_get_field_content_int(j, "Owned");
		TurfInfo[i][zTime] 				= cache_get_field_content_int(j, "Time");
		TurfInfo[i][zMinX] 				= cache_get_field_content_float(j, "MinX");
		TurfInfo[i][zMinY] 				= cache_get_field_content_float(j, "MinY");
		TurfInfo[i][zMaxX] 				= cache_get_field_content_float(j, "MaxX");
		TurfInfo[i][zMaxY] 				= cache_get_field_content_float(j, "MaxY");
		Turfs[i] = GangZoneCreate(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
	}
	printf("[MYSQL] Turfs: %d", turfss);
}

function LoadDSVeh()
{
	dsvehs = cache_num_rows();
	for(new i = 1; i <= dsvehs; i++)
	{
		new j = i - 1;
		DSModels[i][dID] 				= i;
		DSModels[i][dModel]             = cache_get_field_content_int(j, "Model");
		DSModels[i][dPrice]             = cache_get_field_content_int(j, "Price");
		DSModels[i][dStock]             = cache_get_field_content_int(j, "Stock");
		DSModels[i][dDoors]             = cache_get_field_content_int(j, "Doors");
		cache_get_field_content(j, "Type", DSModels[i][dType], SQL, 129);
		DSModels[i][dMaxSpeed]          = cache_get_field_content_int(j, "MaxSpeed");
	}
	printf("[MYSQL] Dealership Vehicles: %d", dsvehs);
}

function LoadGInfo()
{
	ServerInfo[users]            = cache_get_field_content_int(0, "users");
	ServerInfo[banned]           = cache_get_field_content_int(0, "banned");
	cache_get_field_content(0, "newestacc", ServerInfo[newestacc], SQL, 129);
	cache_get_field_content(0, "recorddate", ServerInfo[recorddate], SQL, 129);
	ServerInfo[recordnumber]     = cache_get_field_content_int(0, "recordnumber");
	ServerInfo[tax]            	 = cache_get_field_content_int(0, "tax");
	printf("[MYSQL] Users: %d | Record: %d (%s)", ServerInfo[users], ServerInfo[recordnumber], ServerInfo[recorddate]);
}

function LoadCars(id)
{
	new string[128];
	new temp = cache_num_rows();
	if(temp == 0)
	{
        CarInfo[id][cID] = -2;
	}
	else
	{
		CarInfo[id][cID] 				= cache_get_field_content_int(0, "ID");
		CarInfo[id][cModel]             = cache_get_field_content_int(0, "Model");
		CarInfo[id][cLocationx]         = cache_get_field_content_float(0, "Locationx");
		CarInfo[id][cLocationy]         = cache_get_field_content_float(0, "Locationy");
		CarInfo[id][cLocationz]         = cache_get_field_content_float(0, "Locationz");
		CarInfo[id][cAngle]		        = cache_get_field_content_float(0, "Angle");
		CarInfo[id][cColorOne]          = cache_get_field_content_int(0, "ColorOne");
		CarInfo[id][cColorTwo]          = cache_get_field_content_int(0, "ColorTwo");
		cache_get_field_content(0, "Owner", CarInfo[id][cOwner], SQL, 129);
		CarInfo[id][cValue]         	= cache_get_field_content_int(0, "Value");
		cache_get_field_content(0, "License", CarInfo[id][cLicense], SQL, 129);
		CarInfo[id][cAlarm]          	= cache_get_field_content_int(0, "Alarm");
		CarInfo[id][cLock]          	= cache_get_field_content_int(0, "Lockk");
		CarInfo[id][mod0]          		= cache_get_field_content_int(0, "mod0");
		CarInfo[id][mod1]          		= cache_get_field_content_int(0, "mod1");
		CarInfo[id][mod2]          		= cache_get_field_content_int(0, "mod2");
		CarInfo[id][mod3]          		= cache_get_field_content_int(0, "mod3");
		CarInfo[id][mod4]          		= cache_get_field_content_int(0, "mod4");
		CarInfo[id][mod5]          		= cache_get_field_content_int(0, "mod5");
		CarInfo[id][mod6]          		= cache_get_field_content_int(0, "mod6");
		CarInfo[id][mod7]          		= cache_get_field_content_int(0, "mod7");
		CarInfo[id][mod8]          		= cache_get_field_content_int(0, "mod8");
		CarInfo[id][mod9]          		= cache_get_field_content_int(0, "mod9");
		CarInfo[id][mod10]          	= cache_get_field_content_int(0, "mod10");
		CarInfo[id][mod11]          	= cache_get_field_content_int(0, "mod11");
		CarInfo[id][mod12]          	= cache_get_field_content_int(0, "mod12");
		CarInfo[id][mod13]          	= cache_get_field_content_int(0, "mod13");
		CarInfo[id][paintjob]          	= cache_get_field_content_int(0, "paintjob");
		CarInfo[id][KM]          		= cache_get_field_content_float(0, "KM");
		CarInfo[id][Userid]          	= cache_get_field_content_int(0, "Userid");
		CarInfo[id][Confiscated]   		= cache_get_field_content_int(0, "Confiscated");
		CarInfo[id][Spawned]   			= cache_get_field_content_int(0, "Spawned");
		CarInfo[id][cSpecial]   		= cache_get_field_content_int(0, "Special");
		if(CarInfo[id][Spawned] != 0)
		{
			new engine,lights,alarm,doors,bonnet,boot,objective;
			CarInfo[id][Spawned] = CreateVehicle(CarInfo[id][cModel],CarInfo[id][cLocationx],CarInfo[id][cLocationy],CarInfo[id][cLocationz],CarInfo[id][cAngle],CarInfo[id][cColorOne],CarInfo[id][cColorTwo],-1);
			GetVehicleParamsEx(CarInfo[id][Spawned],engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(CarInfo[id][Spawned],0,lights,alarm,CarInfo[id][cLock],bonnet,boot,objective);
			new carid = CarInfo[id][Spawned];
			if(CarInfo[id][mod0] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod0]);
	      	}
		    if(CarInfo[id][mod1] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod1]);
	      	}
	       	if(CarInfo[id][mod2] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod2]);
	      	}
		    if(CarInfo[id][mod3] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod3]);
	      	}
		    if(CarInfo[id][mod4] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod4]);
	      	}
		    if(CarInfo[id][mod5] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod5]);
	      	}
		    if(CarInfo[id][mod6] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod6]);
	      	}
		    if(CarInfo[id][mod7] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod7]);
	      	}
		    if(CarInfo[id][mod8] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod8]);
	      	}
		    if(CarInfo[id][mod9] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod9]);
	      	}
		    if(CarInfo[id][mod10] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod10]);
	      	}
	        if(CarInfo[id][mod11] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod11]);
	      	}
		    if(CarInfo[id][mod12] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod12]);
	      	}
		    if(CarInfo[id][mod13] != 0)
		    {
		    	AddVehicleComponent(carid,CarInfo[id][mod13]);
	      	}
			SetVehicleNumberPlate(carid,CarInfo[id][cLicense]);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Spawned='%d' WHERE ID=%d", CarInfo[id][Spawned], id);
			mysql_tquery(SQL, string, "", "");
		}
	}
}

function PreLoadCars()
{
	new query[128];
	new x = cache_get_field_content_int(0, "MAX(ID)");
	pvehs = x;
	for(new i = 1; i <= x; i++)
	{
	    mysql_format(SQL, query, sizeof(query), "SELECT * FROM `cars` WHERE ID = %d",i);
		mysql_tquery(SQL, query, "LoadCars", "i", i);
	}
}

function LoadSystems()
{
	new query[128];
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `staticveh`");
	mysql_tquery(SQL, query, "LoadVehicles", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `houses`");
	mysql_tquery(SQL, query, "LoadHouses", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `bizz`");
	mysql_tquery(SQL, query, "LoadBiz", "");	
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `sbizz`");
	mysql_tquery(SQL, query, "LoadSBiz", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `safeboxs`");
	mysql_tquery(SQL, query, "LoadSafebox", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `turfs`");
	mysql_tquery(SQL, query, "LoadTurfs", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `dsveh`");
	mysql_tquery(SQL, query, "LoadDSVeh", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `pecos`");
	mysql_tquery(SQL, query, "LoadPecos", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `infos`");
	mysql_tquery(SQL, query, "LoadGInfo", "");
	
	mysql_format(SQL, query, sizeof(query), "SELECT MAX(ID) FROM `cars`");
	mysql_tquery(SQL, query, "PreLoadCars", "");
}

function Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

function GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(i != p1)
			{
				dis2 = GetDistanceBetweenPlayers(i,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = i;
				}
			}
		}
	}
	return player;
}

function IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(EStep[playerid] > 0 && VSpecial[playerid] == 100)
	{
        SendClientMessage(playerid,-1,"{F81414}License: {FFFFFF}You hit your vehicle, please drive more carefully.");
		VHits[playerid] += 1;
	}
	if(VHits[playerid] == 3)
	{
		EStep[playerid] = 0;
		ExamPoint[playerid] = 0;
		VSpecial[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		SetVehicleToRespawn(vehicleid);
		SpawnPlayer(playerid);
	    SendClientMessage(playerid,-1,"{F81414}License: {FFFFFF}You failed the exam.");
	    VHits[playerid] = 0;
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    Death[playerid] += 1;
    if(Death[playerid] > 1)
    {
        new reasonn[64];
		format(reasonn,sizeof(reasonn),"fakekill (%d)",Death[playerid]);
		BanA(playerid,"AdmBot",reasonn,0,0,1);
		return 1;
    }
	if(killerid != INVALID_PLAYER_ID)
	{
        if(JoinedCS[killerid] == 1 || JoinedCS[killerid] == 2)
		{
		    return 1;
		}
		new string[256];
		if(reason == 49)
	    {
	    	format(string, sizeof(string), "Warning: %s(%d) has possibly just car-rammed %s(%d) to death.", PlayerData[killerid][Name], killerid, PlayerData[playerid][Name], playerid);
	    	ABroadCast(RED,string,1);
	    }
	    if(reason == 50)
	    {
	        if(IsAPlane(GetPlayerVehicleID(killerid)))
	        {
	    		format(string, sizeof(string), "Warning: %s(%d) has possibly just blade-killed %s(%d).", PlayerData[killerid][Name], killerid, PlayerData[playerid][Name], playerid);
	    		ABroadCast(RED,string,1);
	    	}
	    	else
	    	{
	    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
	    	    {
	    			format(string, sizeof(string), "Warning: %s(%d) has possibly just car-parked %s(%d) to death.", PlayerData[killerid][Name], killerid, PlayerData[playerid][Name], playerid);
	    			ABroadCast(RED,string,1);
	    		}
	    		else
	    		{
	    			format(string, sizeof(string), "Warning: %s(%d) has possibly just driver-shot %s(%d) to death.", PlayerData[killerid][Name], killerid, PlayerData[playerid][Name], playerid);
	    			ABroadCast(RED,string,1);
	    		}
	    	}
	    }
		new factionplayer = PlayerData[playerid][Leader] + PlayerData[playerid][Member];
		new factionkiller = PlayerData[killerid][Leader] + PlayerData[killerid][Member];
		if(factionkiller == 1) return 1;
		new turfplayer, turfkiller;
		for(new i = 1; i < sizeof(Turfs); i++)
		{
			if(IsPlayerInTurf(playerid,i) == 1)
			{
				turfplayer = i;
				break;
			}
		}
		for(new i = 1; i < sizeof(Turfs); i++)
		{
			if(IsPlayerInTurf(killerid,i) == 1)
			{
				turfkiller = i;
				break;
			}
		}
		if(WarInfo[turfkiller][wTime] > 0 && WarInfo[turfplayer][wTime] > 0)
		{
			if(turfkiller == turfplayer)
			{
				if((WarInfo[turfplayer][wFaction] == factionplayer)&&(WarInfo[turfplayer][wAttacker] == factionkiller))
				{// Mort "Acasa" + Kill "Deplasare"
					format(string, sizeof(string), "Turf %d, Time remaining: %d mins",turfplayer,WarInfo[turfplayer][wTime]);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR,string);
					WarDeaths[playerid][turfplayer] += 1;
					
					WarScore[killerid][turfplayer] += 10;
					format(string, sizeof(string), "Turf %d, Time remaining: %d mins",turfplayer,WarInfo[turfplayer][wTime]);
					SendClientMessage(killerid, TEAM_AZTECAS_COLOR,string);
				}
				if((WarInfo[turfplayer][wFaction] == factionkiller) && (WarInfo[turfplayer][wAttacker] == factionplayer))
				{// Kill "Acasa" + Mort "Deplasare"
					WarScore[killerid][turfplayer] += 10;
					format(string, sizeof(string), "Turf %d, Time remaining: %d mins",turfplayer,WarInfo[turfplayer][wTime]);
					SendClientMessage(killerid, TEAM_AZTECAS_COLOR,string);

					format(string, sizeof(string), "Turf %d, Time remaining: %d mins",turfplayer,WarInfo[turfplayer][wTime]);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR,string);
					WarDeaths[playerid][turfplayer] += 1;
				}
			}
		}
		if((factionkiller >= 2 && factionkiller <= 4) && (factionplayer >= 2 && factionplayer <= 4))
		{
		    return 1;
		}
		InsertCrime(playerid,killerid,1,"First degree murder");
	}
	return 1;
}

stock initiateConnections() {
	new
	    File: fhConnectionInfo = fopen("MySQL.txt", io_read);

	new szQueryOutput[256];
	fread(fhConnectionInfo, szQueryOutput);
	fclose(fhConnectionInfo);

	sscanf(szQueryOutput, "p<|>e<i>", conType);
	
	printf("[MySQL] Using connection no. %d",conType);
	
	if(conType == 1) //localhost
		SQL = mysql_connect("localhost", "root", "samp", "");
	if(conType == 2) //remote server
		SQL = mysql_connect("-", "-", "-", "-");
	return true;
}

public OnGameModeInit()
{
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	UsePlayerPedAnims();
	ShowPlayerMarkers(0);
    EnableStuntBonusForAll(0);
	
	Command_AddAltNamed("agivelicense", "agl");
	Command_AddAltNamed("atakelicense", "atl");
	Command_AddAltNamed("agivedrugs", "agd");
	Command_AddAltNamed("agivematerials", "agm");
	Command_AddAltNamed("groundsit", "gro");
	Command_AddAltNamed("spawncar", "sc");
	Command_AddAltNamed("stopani", "stopanim");
	Command_AddAltNamed("payfactionmembers", "pfm");
	
	printf("\n\n[ -- ] [ Gamemode is Starting ] [ -- ]\n\n");
	
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML); //Saving the logs intro one .htm file
	
	initiateConnections();
	//SQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	
	if (SQL != -1)
	{
		print("[MYSQL]: Connection succesful!");
	}
	else
	{
	  	print("[MYSQL][ERROR]: Connection failed!");
		return 1;
	}

	new servergmtextstr[128];
	format(servergmtextstr, 128, "gamemodetext %s", SERVER_GM_TEXT);
	SendRconCommand(servergmtextstr); // DO NOT REMOVE THIS
	format(servergmtextstr, 128, "%s", SERVER_GM_TEXT);
	SetGameModeText(servergmtextstr);
	
	txtDateDisp = TextDrawCreate(502.857025, 6.826694, "31.12.2014");
	TextDrawLetterSize(txtDateDisp, 0.504472, 1.309864);
	TextDrawTextSize(txtDateDisp, 613.333740, 354.986572);
	TextDrawAlignment(txtDateDisp, 1);
	TextDrawColor(txtDateDisp, -1);
	TextDrawSetShadow(txtDateDisp, 0);
	TextDrawSetOutline(txtDateDisp, 2);
	TextDrawBackgroundColor(txtDateDisp, 255);
	TextDrawFont(txtDateDisp, 2);
	TextDrawSetProportional(txtDateDisp, 1);

	txtTimeDisp = TextDrawCreate(545.380920, 22.760032, "23:59");
	TextDrawLetterSize(txtTimeDisp, 0.518189, 1.608531);
	TextDrawTextSize(txtTimeDisp, 613.333740, 354.986572);
	TextDrawAlignment(txtTimeDisp, 1);
	TextDrawColor(txtTimeDisp, -1);
	TextDrawSetShadow(txtTimeDisp, 0);
	TextDrawSetOutline(txtTimeDisp, 2);
	TextDrawBackgroundColor(txtTimeDisp, 255);
	TextDrawFont(txtTimeDisp, 2);
	TextDrawSetProportional(txtTimeDisp, 1);
	
	spdtimer = SetTimer("Speedo", 750, 1);
	usetimer = SetTimer("UsedTimer", 60000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	spectatetimer = SetTimer("Spectator", 500, 1);
	
	bariera = CreateObject(968, 1544.674683, -1630.826538, 12.992054, 0.0000, 270.0, 270.0);
	lspdgate = CreateObject(971, 1588.84, -1637.89, 13.18, 0.00, 0.00, 0.10);

	CreateDynamicObject(983, 1544.841552 , -1620.696166 , 13.122634 , 0.000000 , 0.000000 , 0.000000);//LSPD fence
	CreateDynamicObject(983, 1545.061767 , -1635.591064 , 13.122634 , 0.000000 , 0.000000 , 0.000000);//LSPD fence
    CreateDynamicObject(1495, 1584.123047, -1638.037231, 12.367689, 0.0000, 0.0000, 180.0000);//LSPD door
	
	CreateDynamicObject(10377, 1479.58997, -1804.57996, 30.70000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1500.84998, -1742.14001, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1526.43005, -1742.14001, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1547.20996, -1742.16003, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1559.92004, -1755.03003, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.92004, -1771.03003, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.93005, -1777.43994, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 1558.41003, -1790.10999, 18.09000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1559.44995, -1812.85999, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.45996, -1828.81006, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.44995, -1832.02002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1444.47998, -1742.18994, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1418.84998, -1742.28003, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1402.82996, -1742.27002, 13.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1399.65002, -1755.14001, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1399.66003, -1771.18005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 1400.97998, -1791.96997, 18.07000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1399.06995, -1814.56995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1399.04004, -1830.56995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1399.04004, -1833.78003, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4825, 1477.31006, -1661.80005, 9.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8661, 1454.85999, -1717.68994, 11.67000,   -4.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1514.80005, -1696.02002, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1514.88000, -1616.15002, 12.28000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1485.02002, -1606.31006, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1445.20996, -1606.25000, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1444.67004, -1626.23999, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1485.07996, -1626.28003, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1494.01001, -1727.27002, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1514.62000, -1727.28003, 13.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1470.22998, -1727.30005, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1399.63000, -1755.15002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.59998, -1709.52002, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1478.00000, -1597.53003, 12.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4826, 1477.27002, -1618.93005, 21.86000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(9833, 1458.12000, -1643.28003, 13.66000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1495.90002, -1643.66003, 13.34000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1450.85999, -1658.77002, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1468.12000, -1658.13000, 13.04000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1470.38000, -1671.68994, 13.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1450.52002, -1670.60999, 13.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1464.72998, -1681.85999, 13.07000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1451.32996, -1680.84998, 13.07454,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1487.02002, -1659.05005, 13.08000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1502.40002, -1658.46997, 13.08000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1502.28003, -1669.93994, 13.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1501.12000, -1682.37000, 13.06000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1484.75000, -1679.47998, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1485.46997, -1668.26001, 13.07000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(712, 1514.98999, -1660.82996, 20.00000,   0.00000, 0.00000, -51.06000);
	CreateDynamicObject(712, 1515.60999, -1670.44995, 20.00000,   0.00000, 0.00000, 12.54000);
	CreateDynamicObject(712, 1515.44995, -1679.58997, 20.00000,   0.00000, 0.00000, -7.74000);
	CreateDynamicObject(712, 1515.55005, -1690.64001, 20.00000,   0.00000, 0.00000, -19.02000);
	CreateDynamicObject(712, 1515.40002, -1703.29004, 20.00000,   0.00000, 0.00000, 30.36000);
	CreateDynamicObject(712, 1515.70996, -1716.05005, 20.00000,   0.00000, 0.00000, -40.44000);
	CreateDynamicObject(712, 1440.68005, -1716.16003, 21.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1441.68994, -1700.73999, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1441.56006, -1685.05005, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1440.93994, -1670.75000, 21.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1440.56995, -1656.35999, 21.21000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1450.83997, -1701.83997, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1469.68994, -1703.07996, 13.10000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1470.18005, -1712.09998, 13.08017,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1469.81006, -1723.55005, 13.08000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1450.50000, -1713.20996, 13.05000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1484.70996, -1715.06995, 13.07450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1450.92004, -1723.77002, 13.06000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1503.68994, -1714.25000, 13.07000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1503.29004, -1702.69995, 13.07000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(1281, 1483.54004, -1703.70996, 13.08359,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1483.77002, -1723.91003, 13.07000,   0.00000, 0.00000, 68.00000);
	CreateDynamicObject(1281, 1503.06995, -1723.94995, 13.07000,   0.00000, 0.00000, 123.00000);
	CreateDynamicObject(19381, 1501.04004, -1608.62000, 12.25000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1511.54004, -1608.64001, 12.25000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1454.66003, -1607.64001, 12.25000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1444.18005, -1607.64001, 12.25000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(712, 1513.08997, -1608.00000, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1498.40002, -1607.68994, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1456.96997, -1608.52002, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(712, 1442.06995, -1607.69995, 20.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.05005, -1656.13000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.40002, -1662.76001, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.75000, -1667.08997, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.23999, -1672.70996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.22998, -1676.19995, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.21997, -1682.47998, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.38000, -1686.93994, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.60999, -1683.91003, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.60999, -1658.27002, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.56995, -1628.52002, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1434.56006, -1615.73999, 13.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1452.34998, -1597.52002, 12.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1503.59998, -1597.51001, 12.98000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1514.68005, -1656.09998, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(8661, 1515.04004, -1616.32996, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1463.81006, -1727.27002, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1457.37000, -1727.25000, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1450.91125, -1727.24182, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1516.80005, -1607.07996, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1516.81995, -1610.26001, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1495.77002, -1607.00000, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1495.78003, -1610.18994, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1494.81995, -1717.69995, 11.67000,   -4.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1514.68994, -1736.00000, 12.03000,   -2.00000, 0.00000, 90.00000);
	CreateDynamicObject(869, 1516.41003, -1693.62000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1516.40002, -1699.13000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.97998, -1706.43994, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.87000, -1712.14001, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1515.91003, -1720.09998, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1443.70996, -1715.02002, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1226, 1467.97998, -1727.67004, 15.96000,   3.14000, 0.00000, 1.57000);
	CreateDynamicObject(1226, 1485.17004, -1727.67004, 15.94000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1226, 1504.96997, -1727.01001, 16.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1443.70996, -1696.83997, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1443.73999, -1674.94995, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1451.43005, -1695.28003, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1458.19995, -1695.33997, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1465.02002, -1695.32996, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1464.87000, -1686.29004, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1458.17004, -1686.35999, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1451.32996, -1686.31995, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1490.02002, -1686.37000, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1497.04004, -1686.46997, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1504.03003, -1686.38000, 12.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1490.68994, -1695.33997, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1497.33997, -1695.31006, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1503.69995, -1695.31006, 12.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, 1510.81995, -1657.13000, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1510.96997, -1677.06006, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1443.77002, -1655.40002, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1510.84998, -1696.79004, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1510.91003, -1716.69995, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.68994, -1727.16003, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1476.43005, -1727.09998, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1478.23999, -1727.06995, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.16003, -1727.06006, 12.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1508.28003, -1727.14001, 12.27000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1510.07996, -1727.08997, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1444.62000, -1726.69995, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1446.73999, -1726.62000, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1440.06458, -1727.17725, 13.04000,   0.00000, 0.00000, 89.28000);
	CreateDynamicObject(1256, 1480.34998, -1705.67004, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1480.29004, -1721.92004, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1474.31995, -1721.90002, 12.89000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1256, 1474.32996, -1705.75000, 12.89000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(802, 1491.19995, -1703.87000, 12.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(804, 1489.39001, -1710.41003, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1490.53003, -1706.56006, 13.44000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1490.93005, -1700.89001, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1495.31006, -1700.07996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1499.93005, -1701.07996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1487.37000, -1703.54004, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1486.70996, -1707.73999, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1487.93005, -1712.06995, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1466.44995, -1708.57996, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1466.13000, -1704.16003, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1464.23999, -1699.67004, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1459.71997, -1699.10999, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1455.31006, -1700.04004, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1463.58997, -1707.06006, 13.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1463.32996, -1702.02002, 13.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(804, 1462.25000, -1706.18994, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1500.42004, -1695.98999, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1493.80005, -1695.88000, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1461.38000, -1696.06006, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1454.23999, -1696.00000, 14.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1442.97998, -1723.28003, 14.91000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1443.00012, -1702.61719, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1443.05005, -1681.89001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1442.93994, -1659.67004, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1433.81006, -1676.68994, 16.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1656.25000, 16.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1636.22998, 16.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1619.05005, 16.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1444.55005, -1596.94995, 12.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1511.62000, -1722.81006, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1511.57996, -1703.31995, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1511.60864, -1683.23914, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1511.81995, -1659.95996, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1256, 1480.35999, -1656.28003, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1480.31006, -1677.21997, 12.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1474.29004, -1677.42004, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1474.31006, -1656.31006, 12.89000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1231, 1481.25000, -1704.00000, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1481.12000, -1723.64001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.59998, -1723.94995, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.56006, -1704.06995, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.50000, -1679.01001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1481.07996, -1679.03003, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1473.62000, -1654.26001, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1481.17004, -1654.28003, 14.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1214, 1484.07996, -1742.48999, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1486.90002, -1742.45996, 12.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(745, 1447.21997, -1608.09998, 12.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(746, 1506.32996, -1609.04004, 12.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(811, 1501.23999, -1608.67004, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1453.10999, -1605.76001, 13.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1438.91003, -1605.98999, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1438.91003, -1609.18005, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1459.93994, -1609.20996, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1459.96997, -1606.01001, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1471.34998, -1596.69995, 15.98000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1451.33997, -1596.69995, 16.03000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1283, 1440.33997, -1593.85999, 15.31000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1488.53003, -1596.69995, 16.05000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1226, 1504.89001, -1596.69995, 16.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 1460.54004, -1742.19995, 13.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1466.97998, -1742.20996, 13.21000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1214, 1481.47998, -1742.46997, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1478.52002, -1742.50000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1475.33997, -1742.48999, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.97998, -1742.43994, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8841, 1429.01001, -1769.87000, 15.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16363, 1430.28003, -1769.48999, 12.62000,   0.00000, 0.00000, -214.14000);
	CreateDynamicObject(1340, 1510.59998, -1690.81995, 13.30000,   0.00000, 0.00000, 179.82001);
	CreateDynamicObject(1341, 1443.79004, -1690.57996, 13.29000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1342, 1438.85999, -1652.31006, 13.29000,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(10378, 1479.56995, -1768.47998, 11.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11247, 1529.65002, -1686.52002, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11247, 1529.65002, -1639.21997, 12.93000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11246, 1529.64001, -1686.55005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11246, 1529.69995, -1639.17004, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.34998, -1666.00000, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.50000, -1679.90002, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.40002, -1632.95996, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.57996, -1645.26001, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.59998, -1654.94995, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.39001, -1713.35999, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.45996, -1702.77002, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1529.50000, -1691.23999, 12.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 1529.47998, -1686.75000, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1529.42004, -1700.15002, 13.05000,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(8990, 1529.42004, -1706.45996, 13.05000,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(8990, 1529.48999, -1659.10999, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1529.76001, -1648.43005, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1529.45996, -1638.87000, 13.05000,   0.00000, 0.00000, -91.38000);
	CreateDynamicObject(8990, 1439.12000, -1662.68994, 12.29000,   0.00000, 0.00000, -119.94000);
	CreateDynamicObject(8990, 1439.10999, -1674.95996, 12.29000,   0.00000, 0.00000, -63.42000);
	CreateDynamicObject(8990, 1439.13000, -1686.40002, 12.29000,   0.00000, 0.00000, -119.94000);
	CreateDynamicObject(8990, 1438.83997, -1698.71997, 12.29000,   0.00000, 0.00000, -63.42000);
	CreateDynamicObject(8990, 1439.53003, -1711.34998, 12.29000,   0.00000, 0.00000, -119.94000);
	CreateDynamicObject(9152, 1459.81995, -1675.37000, 12.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9152, 1458.52002, -1717.14001, 12.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9152, 1495.51001, -1719.53003, 12.82000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9152, 1494.83997, -1670.71997, 12.82000,   0.00000, 0.00000, 77.82000);
	CreateDynamicObject(1283, 1528.48999, -1605.57996, 15.34000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1229, 1524.21997, -1673.70996, 13.80000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1229, 1524.21997, -1693.96997, 13.87000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1226, 1450.33997, -1727.39001, 16.09000,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(1283, 1430.19995, -1719.26001, 15.34000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1433.70996, -1702.35999, 16.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, 1525.35999, -1715.58997, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.42004, -1696.38000, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.12000, -1677.66003, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.50000, -1661.21997, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.43005, -1643.53003, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.44995, -1626.92004, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1525.55005, -1607.25000, 16.74000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1214, 1537.78003, -1681.88000, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1534.92004, -1681.76001, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.78003, -1680.92004, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.75000, -1678.70996, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.75000, -1676.48999, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.72998, -1673.97998, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.73999, -1671.65002, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.73999, -1669.37000, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.71997, -1666.98999, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.76001, -1664.84998, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1534.83997, -1663.50000, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1537.71997, -1663.51001, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1534.73999, -1718.43994, 11.67000,   -4.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1512.64001, -1752.82996, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1519.35999, -1752.79004, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1527.07996, -1752.73999, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1535.28003, -1752.84998, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1256, 1543.73999, -1752.94995, 13.11000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1597, 1466.02002, -1747.78003, 15.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1492.88000, -1747.62000, 15.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1466.02002, -1760.31995, 15.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1492.93994, -1760.79004, 15.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8841, 1527.31006, -1769.23999, 15.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16363, 1528.21997, -1769.08997, 12.62000,   0.00000, 0.00000, -214.14000);
	CreateDynamicObject(1231, 1466.47998, -1754.01001, 15.16000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1492.96997, -1754.10999, 15.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1493.00000, -1767.06006, 15.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1231, 1466.68005, -1766.96997, 15.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1256, 1491.65002, -1747.64001, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1491.70996, -1760.85999, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1467.66003, -1747.93005, 13.11000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(1256, 1467.57996, -1760.18005, 13.11000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(1214, 1536.22998, -1663.45996, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1536.40002, -1681.83997, 12.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(0, 1438.91003, -1605.98999, 12.97000,   0.00000, 0.00000, -96.42000);
	CreateDynamicObject(983, 1499.02002, -1613.47998, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1505.44995, -1613.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1511.90002, -1613.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1513.47998, -1613.47998, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1513.55005, -1603.80005, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1507.13000, -1603.80005, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1500.68994, -1603.77002, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1499.10999, -1603.78003, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1456.76001, -1602.77002, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1450.31995, -1602.73999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1443.85999, -1602.73999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1442.26001, -1602.75000, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1442.10999, -1612.47998, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1448.51001, -1612.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1454.93005, -1612.51001, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1456.51001, -1612.48999, 12.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1492.87000, -1773.64001, 15.14000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1466.10999, -1773.65002, 15.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1491.70996, -1773.80005, 13.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1467.75000, -1773.93005, 13.11000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(11245, 1482.95996, -1783.62000, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 1476.47998, -1783.67004, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 1469.95996, -1783.69995, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 1489.48999, -1783.78003, 33.96000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11489, 1479.37000, -1754.54004, 12.45000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11245, 1479.85999, -1754.63000, 28.44000,   0.00000, -70.00000, 0.00000);
	CreateDynamicObject(1233, 1534.92004, -1681.81995, 13.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1233, 1534.85999, -1663.53003, 13.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1502.39001, -1643.12000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1490.59998, -1643.38000, 12.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1463.90002, -1643.15002, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1452.10999, -1642.93005, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1452.80005, -1643.64001, 13.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1463.85999, -1643.55005, 13.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1490.68005, -1643.76001, 13.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 1502.38000, -1643.20996, 13.25000,   0.00000, 0.00000, 0.00000);

	// Spawn ->>
	
	CreateDynamicObject(4602, 1398.39685, -1622.50989, 82.88579,   0.00000, 0.00000, 0.00000);
	
	CreateObject(7419, 1500.60205, -1537.54980, 6.37684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1449.32788, -1580.72302, 15.12807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1450.66968, -1561.24353, 15.12807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 1439.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.77999);
	CreateDynamicObject(1223, 1443.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(1223, 1447.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(1223, 1451.81079, -1580.28101, 12.55920,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(1223, 1441.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 1445.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 1449.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1223, 1453.22656, -1562.34460, 12.55920,   0.00000, 0.00000, 270.00000);
	
	CreateDynamicObject(19425, 1427.12903, -1721.19861, 12.37928,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1427.12903, -1719.69861, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1427.12903, -1718.19861, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1427.12903, -1716.69861, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1391.64966, -1744.15759, 12.37928,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1391.64966, -1745.65759, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1391.64966, -1747.15759, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1391.64966, -1748.65759, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1565.72729, -1707.45911, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1527.07324, -1720.84094, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1527.07324, -1719.34094, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1527.07324, -1717.84094, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1527.07324, -1716.34094, 12.37930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1716.12610, 18.40295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1719.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.94702, -1709.47156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1429.57019, -1713.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1702.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.94702, -1683.97156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1652, 1429.94702, -1658.47156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1652, 1429.94702, -1632.97156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1652, 1429.94702, -1615.47156, 13.07420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(792, 1429.80176, -1709.68677, 11.39865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1709.68677, 11.39865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1705.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1699.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1696.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1692.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1688.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1685.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1682.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1679.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1675.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1671.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1668.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.18701, -1709.47156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1652, 1429.18701, -1683.97156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1215, 1429.59680, -1707.85010, 12.50014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1690.85010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1673.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1429.18701, -1658.47156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1652, 1429.18701, -1632.97156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1652, 1429.18701, -1615.47156, 13.07420,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1290, 1429.59375, -1665.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1661.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1658.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1654.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1656.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1651.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1647.62610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1644.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1640.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1636.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1633.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1638.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1630.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1627.12329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1623.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1619.68677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1616.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1622.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 1429.59375, -1613.12610, 18.40300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1429.57019, -1609.62329, 12.84210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1606.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(792, 1429.80176, -1602.18677, 11.39860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1429.59680, -1604.35010, 12.50010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1440.69458, -1729.69006, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1442.19458, -1729.69006, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1443.69458, -1729.69006, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1445.19458, -1729.69006, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1418.85999, -1734.86060, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1417.35999, -1734.86060, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1415.85999, -1734.86060, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1414.35999, -1734.86060, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1520.16064, -1734.60962, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1518.66064, -1734.60962, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1517.16064, -1734.60962, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1515.66064, -1734.60962, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1540.29199, -1729.60449, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1541.79199, -1729.60449, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1543.29199, -1729.60449, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1544.79199, -1729.60449, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1398.76514, -1729.45508, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1400.26514, -1729.45508, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1401.76514, -1729.45508, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1403.26514, -1729.45508, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1378.66248, -1734.84814, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1377.16248, -1734.84814, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1375.66248, -1734.84814, 12.37930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1374.16248, -1734.84814, 12.37930,   0.00000, 0.00000, 90.00000);

	// <-- Spawn

	// ATM ->>
	
	CreateDynamicObject(2942,1460.1979, -1792.6345, 13.2000,0.0000000,0.0000000,180.0000000); //object(kmb_atm1) (1)
	CreateDynamicObject(2942,1083.9000000,-1817.2000000,13.3000000,0.0000000,0.0000000,270.0000000); //object(kmb_atm1) (2)
	CreateDynamicObject(2942,1815.3000000,-1557.4000000,13.1000000,0.0000000,0.0000000,74.0000000); //object(kmb_atm1) (4)
	CreateDynamicObject(2942,603.4000000,-1248.4000000,18.1000000,0.0000000,0.0000000,200.0000000); //object(kmb_atm1) (5)
	CreateDynamicObject(2942,1748.7000000,-1863.6000000,13.2000000,0.0000000,0.0000000,180.0000000); //object(kmb_atm1) (6)

	// Bus Stations -->
	
	CreateDynamicObject(1257,1442.8000000,-1724.3000000,13.8000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (1)
	CreateDynamicObject(1257,1365.9000000,-1327.2000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (2)
	CreateDynamicObject(1257,1402.4000000,-1043.1000000,24.9000000,0.0000000,0.0000000,276.0000000); //object(bustopm) (3)
	CreateDynamicObject(1257,1787.5000000,-1181.4000000,24.1000000,0.0000000,0.0000000,254.0000000); //object(bustopm) (4)
	CreateDynamicObject(1257,1838.3000000,-1387.2000000,13.8000000,0.0000000,0.0000000,180.0000000); //object(bustopm) (5)
	CreateDynamicObject(1257,1649.7000000,-1504.5000000,13.8000000,0.0000000,0.0000000,180.0000000); //object(bustopm) (6)
	CreateDynamicObject(1257,1166.9000000,-1703.8000000,14.3000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (7)
	CreateDynamicObject(1257,926.5000000,-1548.2000000,13.8000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (8)
	CreateDynamicObject(1257,950.7000000,-1241.1000000,16.7000000,0.0000000,0.0000000,0.0000000); //object(bustopm) (10)
	CreateDynamicObject(1257,1034.5000000,-1048.7000000,32.0000000,0.0000000,0.0000000,270.0000000); //object(bustopm) (11)
	CreateDynamicObject(1257,1184.6000000,-958.7000000,43.1000000,0.0000000,0.0000000,280.0000000); //object(bustopm) (13)
	CreateDynamicObject(1257,942.9000000,-1768.1000000,14.2000000,0.0000000,0.0000000,80.0000000); //object(bustopm) (14)
	CreateDynamicObject(1257,646.7000000,-1607.1000000,15.8000000,0.0000000,0.0000000,2.0000000); //object(bustopm) (15)
	CreateDynamicObject(1257,276.7000000,-1569.7000000,33.4000000,0.0000000,0.0000000,78.0000000); //object(bustopm) (16)
	CreateDynamicObject(1257,412.7000000,-1359.5000000,15.2000000,0.0000000,0.0000000,300.0000000); //object(bustopm) (17)
	CreateDynamicObject(1257,815.7000000,-1059.8000000,25.2000000,0.0000000,0.0000000,284.0000000); //object(bustopm) (18)
	CreateDynamicObject(1257,2714.3000000,-1111.6000000,69.9000000,0.0000000,0.0000000,180.0000000); //object(bustopm) (19)
	CreateDynamicObject(1257,2634.5000000,-1660.4000000,11.1000000,0.0000000,0.0000000,180.0000000); //object(bustopm) (20)
	CreateDynamicObject(1257,2256.3000000,-1724.0000000,13.8000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (21)
	CreateDynamicObject(1257,1894.6000000,-1743.2000000,13.8000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (22)
	CreateDynamicObject(1257,1612.7000000,-980.9000000,38.6000000,0.0000000,0.0000000,262.0000000); //object(bustopm) (23)
	CreateDynamicObject(1257,2227.1000000,-1112.9000000,26.5000000,0.0000000,0.0000000,350.0000000); //object(bustopm) (24)

	// <--
	// Garbage -->
	
	CreateDynamicObject(1372,1937.2000000,-2004.4000000,12.5000000,0.0000000,0.0000000,270.0000000); //object(cj_dump2_low) (1)
	CreateDynamicObject(1372,1941.6000000,-1878.0000000,12.5000000,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (2)
	CreateDynamicObject(1372,1806.8000000,-1687.5000000,12.5000000,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (3)
	CreateDynamicObject(1372,1745.2000000,-1758.5000000,12.6000000,0.0000000,0.0000000,270.0000000); //object(cj_dump2_low) (4)
	CreateDynamicObject(1372,1709.8000000,-1494.0000000,12.5000000,0.0000000,0.0000000,270.0000000); //object(cj_dump2_low) (5)
	CreateDynamicObject(1372,1701.9000000,-1557.3000000,12.5000000,0.0000000,0.0000000,180.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,1220.0000000,-1115.1000000,23.5000000,0.0000000,0.0000000,180.0000000); //object(cj_dump2_low) (7)
	CreateDynamicObject(1372,1031.9680200,-1081.5909400,22.2837500,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (8)
	CreateDynamicObject(1372,2016.4000000,-1777.2000000,12.5000000,0.0000000,0.0000000,90.0000000); //object(cj_dump2_low) (9)
	CreateDynamicObject(1372,1855.4000000,-1888.7000000,12.5000000,0.0000000,0.0000000,180.0000000); //object(cj_dump2_low) (10)
	CreateDynamicObject(1372,1604.8000000,-1674.0000000,12.5000000,0.0000000,0.0000000,90.0000000); //object(cj_dump2_low) (11)

	// <--
	// Jail -->
	
	//CreateDynamicObject(2930, 188.42230, -199.61839, 350.89420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 186.83090, -199.62959, 350.02481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 186.83090, -199.62959, 352.26880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 191.69290, -199.62959, 350.02481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 191.69290, -199.62959, 352.26880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 190.00990, -199.62959, 352.64279,   0.00000, 0.00000, 90.00000);
	//CreateDynamicObject(2930, 182.50630, -199.66789, 350.89420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 180.93190, -199.62959, 350.02481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 185.82790, -199.62959, 350.02481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 183.65190, -199.62959, 352.60880,   0.00000, 0.00000, 90.00000);
	
	CreateDynamicObject(10402, 174.17, -191.08, 347.59, 0.00, 0.00, 270.00); 
	CreateDynamicObject(10402, 174.17, -191.08, 351.11, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1216, 147.66, -179.69, 342.62, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1216, 149.86, -179.69, 342.62, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1216, 152.15, -179.70, 342.62, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1216, 154.32, -179.72, 342.62, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 143.68, -180.22, 342.43, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 143.69, -181.80, 342.43, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 143.69, -183.35, 342.43, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 300.48, -212.31, 348.87, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 300.54, -214.08, 348.87, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 300.54, -217.84, 348.87, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1969, 300.55, -215.96, 348.87, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2747, 160.12, -203.05, 342.25, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2747, 169.66, -203.39, 342.26, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14408, 169.45, -193.06, 351.26, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14409, 189.20, -196.22, 345.08, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14412, 327.86, -207.82, 353.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 1099.93, 362.00, 584.77, 0.00, 0.00, 180.00); 
	CreateDynamicObject(14437, 1123.02, 328.89, 584.77, 0.00, 0.00, 270.00); 
	CreateDynamicObject(14437, 148.20, -200.48, 347.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 152.97, -200.48, 347.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 157.74, -200.45, 343.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 157.74, -200.47, 347.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 162.51, -200.43, 343.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 162.51, -200.43, 347.90, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 167.28, -200.44, 343.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 167.28, -200.44, 347.90, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 171.45, -200.46, 347.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 172.05, -200.45, 343.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14437, 294.04, -218.83, 350.26, 0.00, 0.00, 0.00); 
	CreateDynamicObject(14454, 137.41, -216.73, 339.88, 0.00, 0.00, 90.00); 
	CreateDynamicObject(14592, 1119.41, 347.05, 589.68, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1368, 146.59, -201.95, 342.62, 0.00, 0.00, 90.99); 
	CreateDynamicObject(1368, 146.67, -205.50, 342.62, 0.00, 0.00, 90.99); 
	CreateDynamicObject(1368, 148.83, -201.99, 342.62, 0.00, 0.00, 90.99); 
	CreateDynamicObject(1368, 148.89, -205.50, 342.62, 0.00, 0.00, 90.99); 
	CreateDynamicObject(1368, 150.88, -201.94, 342.62, 0.00, 0.00, 90.99); 
	CreateDynamicObject(1368, 150.95, -205.41, 342.62, 0.00, 0.00, 90.99); 
	CreateDynamicObject(1523, 186.80, -185.33, 348.25, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1533, 1099.10, 349.22, 582.77, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1533, 1118.41, 330.99, 582.84, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1533, 1118.42, 325.81, 582.84, 0.00, 0.00, 180.00); 
	CreateDynamicObject(1533, 1127.91, 329.57, 582.77, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1533, 142.99, -194.59, 341.92, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1533, 143.03, -194.75, 341.92, 0.00, 0.00, 90.00); 
	CreateDynamicObject(1533, 143.04, -193.27, 341.92, 0.00, 0.00, 90.00); 
	CreateDynamicObject(1533, 145.30, -206.77, 341.92, 0.00, 0.00, 180.00); 
	CreateDynamicObject(1533, 191.51, -203.52, 348.27, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1533, 191.51, -205.02, 348.27, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1533, 283.94, -226.03, 348.27, 0.00, 0.00, 90.00); 
	CreateDynamicObject(1533, 304.50, -209.48, 348.26, 0.00, 0.00, 270.00); 
	CreateDynamicObject(14401, 201.59, -173.75, 348.60, 0.00, 0.00, 90.00); 
	CreateDynamicObject(14389, 288.67, -181.82, 351.52, 0.00, 0.00, 179.99); 
	CreateDynamicObject(14782, 190.92, -182.92, 349.29, 0.00, 0.00, 270.00); 
	CreateDynamicObject(14855, 293.52, -229.93, 352.76, 0.00, 0.00, 182.00); 
	CreateDynamicObject(1491, 296.45, -215.89, 348.27, 0.00, 0.00, 90.00); 
	CreateDynamicObject(1537, 283.95, -223.02, 348.27, 0.00, 0.00, 90.00); 
	CreateDynamicObject(1569, 291.80, -206.48, 348.27, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1569, 291.82, -203.53, 348.27, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1569, 291.83, -206.53, 348.27, 0.00, 0.00, 90.00); 
	CreateDynamicObject(1616, 155.13, -179.65, 345.56, 0.00, 0.00, 55.88); 
	CreateDynamicObject(16655, 301.26, -200.43, 350.58, 0.00, 0.00, 270.00); 
	CreateDynamicObject(16655, 301.26, -200.43, 353.18, 0.00, 0.00, 270.00); 
	CreateDynamicObject(1671, 181.34, -197.08, 348.74, 0.00, 0.00, 190.73); 
	CreateDynamicObject(1671, 181.42, -180.28, 348.74, 0.00, 0.00, 79.74); 
	CreateDynamicObject(1671, 181.44, -182.40, 348.74, 0.00, 0.00, 97.75); 
	CreateDynamicObject(1671, 181.53, -190.04, 348.74, 0.00, 0.00, 272.98); 
	CreateDynamicObject(1671, 181.72, -193.07, 348.74, 0.00, 0.00, 284.23); 
	CreateDynamicObject(1671, 185.02, -180.31, 348.74, 0.00, 0.00, 293.25); 
	CreateDynamicObject(1671, 185.26, -182.23, 348.74, 0.00, 0.00, 269.99); 
	CreateDynamicObject(1671, 293.67, -226.43, 348.74, 0.00, 0.00, 211.74); 
	CreateDynamicObject(1800, 156.08, -207.68, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 156.08, -207.68, 342.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 159.18, -182.96, 341.90, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 159.18, -182.96, 342.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 163.94, -182.99, 342.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 163.95, -182.99, 341.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 164.02, -207.80, 341.90, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 164.02, -207.80, 342.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 165.50, -207.83, 341.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 165.50, -207.83, 342.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 168.77, -182.96, 342.95, 0.75, 0.00, 0.00); 
	CreateDynamicObject(1800, 168.77, -182.97, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 173.23, -207.84, 341.91, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 173.23, -207.84, 342.97, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 173.24, -183.00, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1800, 173.24, -183.00, 342.98, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1810, 155.98, -181.79, 341.92, 0.00, 0.00, 92.99); 
	CreateDynamicObject(1810, 156.06, -182.73, 341.92, 0.00, 0.00, 92.99); 
	CreateDynamicObject(1810, 158.53, -203.58, 341.92, 0.00, 0.00, 157.49); 
	CreateDynamicObject(1810, 158.90, -202.08, 341.92, 0.00, 0.00, 26.99); 
	CreateDynamicObject(1810, 160.97, -182.37, 341.92, 0.00, 0.00, 92.99); 
	CreateDynamicObject(1810, 161.13, -204.10, 341.92, 0.00, 0.00, 194.75); 
	CreateDynamicObject(1810, 161.65, -202.32, 341.92, 0.00, 0.00, 331.74); 
	CreateDynamicObject(1810, 164.14, -182.77, 341.92, 0.00, 0.00, 272.49); 
	CreateDynamicObject(1810, 165.79, -182.21, 341.92, 0.00, 0.00, 53.49); 
	CreateDynamicObject(1810, 165.94, -183.31, 341.92, 0.00, 0.00, 93.74); 
	CreateDynamicObject(1810, 168.12, -204.04, 341.92, 0.00, 0.00, 151.00); 
	CreateDynamicObject(1810, 168.52, -202.22, 341.92, 0.00, 0.00, 26.49); 
	CreateDynamicObject(1810, 170.22, -183.00, 341.92, 0.00, 0.00, 123.00); 
	CreateDynamicObject(1810, 170.50, -181.79, 341.92, 0.00, 0.00, 53.49); 
	CreateDynamicObject(1810, 170.59, -204.45, 341.92, 0.00, 0.00, 194.75); 
	CreateDynamicObject(1810, 171.06, -202.55, 341.92, 0.00, 0.00, 331.75); 
	CreateDynamicObject(1812, 146.51, -202.11, 345.92, 0.00, 0.00, 180.74); 
	CreateDynamicObject(1812, 148.52, -182.05, 345.92, 0.00, 0.00, 90.23); 
	CreateDynamicObject(1812, 151.32, -202.15, 345.91, 0.00, 0.00, 180.74); 
	CreateDynamicObject(1812, 153.26, -181.95, 345.92, 0.00, 0.00, 90.24); 
	CreateDynamicObject(1812, 156.06, -202.20, 345.91, 0.00, 0.00, 179.99); 
	CreateDynamicObject(1812, 158.00, -181.92, 345.92, 0.00, 0.00, 90.24); 
	CreateDynamicObject(1812, 160.77, -202.24, 345.92, 0.00, 0.00, 180.74); 
	CreateDynamicObject(1812, 162.73, -181.93, 345.92, 0.00, 0.00, 90.24); 
	CreateDynamicObject(1812, 165.58, -202.32, 345.92, 0.00, 0.00, 180.74); 
	CreateDynamicObject(1812, 167.51, -182.01, 345.92, 0.00, 0.00, 90.24); 
	CreateDynamicObject(1812, 170.35, -202.27, 345.92, 0.00, 0.00, 179.24); 
	CreateDynamicObject(1812, 172.23, -181.99, 345.92, 0.00, 0.00, 90.24); 
	CreateDynamicObject(2165, 292.54, -225.40, 348.48, 0.00, 0.00, 33.75); 
	CreateDynamicObject(2183, 182.56, -179.83, 348.28, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2198, 180.52, -195.67, 348.28, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2200, 296.90, -226.97, 348.26, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2445, 148.48, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2445, 149.48, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2445, 150.48, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2445, 151.48, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2445, 152.47, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2445, 153.47, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2445, 154.47, -183.97, 341.93, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2521, 150.01, -204.36, 345.92, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 154.77, -204.46, 345.92, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 156.34, -179.84, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2521, 159.54, -204.31, 345.92, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 159.54, -206.10, 341.90, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 160.77, -206.25, 341.90, 0.00, 0.00, 90.00); 
	CreateDynamicObject(2521, 161.25, -179.92, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2521, 164.30, -204.58, 345.92, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 165.73, -179.92, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2521, 169.07, -206.29, 341.90, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 169.09, -204.51, 345.92, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2521, 170.27, -206.20, 341.90, 0.00, 0.00, 90.00); 
	CreateDynamicObject(2521, 170.54, -179.93, 341.92, 0.00, 0.00, 0.00); 
	CreateDynamicObject(817, 188.41, -220.17, 349.09, 0.00, 0.00, 283.75); 
	CreateDynamicObject(817, 288.41, -220.17, 349.09, 0.00, 0.00, 283.74); 
	CreateDynamicObject(976, 174.16, -191.98, 341.89, 0.00, 0.00, 270.00); 
	CreateDynamicObject(976, 179.43, -207.81, 338.70, 0.00, 0.00, 90.00); 
	CreateDynamicObject(976, 179.43, -207.81, 341.62, 0.00, 0.00, 90.00); 
	CreateDynamicObject(976, 179.43, -207.81, 341.68, 0.00, 0.00, 90.00); 
	CreateDynamicObject(976, 179.43, -207.81, 341.75, 0.00, 0.00, 90.00); 
	CreateDynamicObject(976, 179.43, -207.81, 341.82, 0.00, 0.00, 90.00); 
	CreateDynamicObject(976, 179.43, -207.81, 341.89, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8615, 173.17, -188.42, 344.19, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8659, 300.50, -226.30, 348.35, 0.00, 0.00, 270.00); 
	CreateDynamicObject(8659, 300.54, -218.32, 353.18, 180.00, 0.00, 270.00); 
	CreateDynamicObject(8175, 1096.90, 345.75, 584.17, 0.00, 90.00, 0.00); 
	CreateDynamicObject(8175, 1096.94, 345.85, 584.17, 0.00, 90.00, 180.00); 
	CreateDynamicObject(8175, 1097.83, 345.76, 588.10, 0.00, 0.00, 0.00); 
	CreateDynamicObject(8175, 1097.83, 345.85, 588.10, 0.00, 0.00, 179.99); 
	CreateDynamicObject(8175, 1102.60, 345.73, 584.17, 0.00, 90.00, 0.00); 
	CreateDynamicObject(8175, 1102.63, 345.86, 584.17, 0.00, 90.00, 180.00); 
	CreateDynamicObject(8175, 1122.49, 325.36, 585.55, 0.00, 0.00, 0.00); 
	CreateDynamicObject(8175, 1123.07, 331.57, 584.17, 0.00, 90.00, 269.99); 
	CreateDynamicObject(8175, 1123.08, 325.88, 584.17, 0.00, 270.00, 270.00); 
	CreateDynamicObject(8175, 1123.08, 330.68, 588.20, 180.00, 0.00, 90.00); 
	CreateDynamicObject(8175, 1123.16, 330.68, 588.20, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8175, 1123.18, 331.53, 584.17, 0.00, 90.00, 90.00); 
	CreateDynamicObject(8175, 1123.19, 325.85, 584.17, 0.00, 90.00, 89.99); 
	CreateDynamicObject(8175, 1128.21, 343.35, 584.17, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8175, 1182.56, 331.27, 585.43, 0.00, 0.00, 179.99); 
	CreateDynamicObject(8176, 286.62, -217.29, 353.88, 90.00, 0.00, 0.00); 
	CreateDynamicObject(8176, 306.06, -182.81, 349.78, 0.00, 0.00, 180.00); 
	CreateDynamicObject(8176, 306.42, -182.83, 352.63, 0.00, 0.00, 179.99); 
	CreateDynamicObject(8176, 306.52, -182.81, 346.93, 0.00, 0.00, 179.99); 
	CreateDynamicObject(8176, 329.43, -203.74, 346.95, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8176, 329.43, -203.74, 349.80, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8176, 329.43, -203.74, 352.65, 0.00, 0.00, 90.00); 
	CreateDynamicObject(8176, 336.41, -244.34, 355.40, 180.00, 180.00, 180.00); 
	CreateDynamicObject(8176, 336.76, -244.34, 349.69, 180.00, 180.00, 180.00); 
	CreateDynamicObject(8176, 336.79, -244.34, 352.54, 180.00, 180.00, 180.00); 
	CreateDynamicObject(7022, -10.78, -183.58, 461.45, 0.00, 0.00, 0.00); 
	CreateDynamicObject(7022, 103.10, -161.80, 344.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(7022, 103.10, -161.80, 348.14, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 107.86, -161.82, 348.11, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 107.87, -161.79, 344.21, 0.00, 0.00, 180.00); 
	CreateDynamicObject(7022, 112.63, -161.79, 344.21, 0.00, 0.00, 180.00); 
	CreateDynamicObject(7022, 112.63, -161.82, 348.13, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 117.41, -161.80, 344.21, 0.00, 0.00, 180.00); 
	CreateDynamicObject(7022, 117.41, -161.82, 348.07, 0.00, 0.00, 180.00); 
	CreateDynamicObject(7022, 121.57, -161.82, 348.13, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 121.89, -222.49, 352.30, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 121.91, -178.43, 327.74, 270.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 121.91, -182.62, 327.74, 270.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 121.92, -169.95, 344.21, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 123.59, -252.85, 348.15, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 124.75, -267.88, 344.21, 0.00, 0.00, 91.24); 
	CreateDynamicObject(7022, 128.35, -252.79, 348.13, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 133.12, -252.78, 348.09, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 133.12, -252.80, 344.17, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 137.89, -252.78, 344.17, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 137.89, -252.78, 348.11, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 142.65, -252.77, 344.14, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 142.65, -252.77, 348.12, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 144.39, -206.59, 359.90, 0.00, 270.00, 179.99); 
	CreateDynamicObject(7022, 144.39, -222.53, 398.08, 0.00, 270.00, 179.99); 
	CreateDynamicObject(7022, 147.42, -252.78, 348.07, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 147.43, -252.80, 344.14, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 151.59, -252.37, 348.23, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 151.88, -129.12, 348.29, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 151.90, -132.11, 352.29, 0.00, 0.00, 90.02); 
	CreateDynamicObject(7022, 151.90, -248.74, 344.21, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 157.08, -127.07, 344.21, 0.00, 0.00, 90.00); 
	CreateDynamicObject(7022, 93.55, -161.77, 348.15, 0.00, 0.00, 179.99); 
	CreateDynamicObject(7022, 98.33, -161.81, 348.17, 0.00, 0.00, 179.99); 
	CreateDynamicObject(1713, 287.78, -227.43, 348.27, 0.00, 0.00, 180.99); 
	CreateDynamicObject(1968, 151.30, -192.87, 342.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1968, 151.37, -190.22, 342.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1968, 155.03, -190.17, 342.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1968, 155.04, -192.87, 342.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1968, 158.37, -192.86, 342.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(1968, 158.39, -190.09, 342.44, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 1117.67, 325.91, 585.85, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 1119.13, 330.90, 585.85, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 148.11, -200.29, 349.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 148.25, -184.36, 348.99, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 153.02, -184.35, 348.99, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 153.04, -200.31, 349.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 157.67, -200.30, 344.94, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 157.75, -184.29, 348.99, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 157.80, -200.30, 349.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 157.92, -184.28, 344.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 162.52, -200.24, 349.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 162.60, -184.29, 344.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 162.60, -200.24, 344.94, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 162.62, -184.30, 348.99, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 167.31, -184.31, 344.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 167.32, -200.29, 349.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 167.37, -200.29, 344.94, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 167.38, -184.27, 348.99, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 171.44, -200.31, 349.05, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2686, 171.54, -184.33, 348.99, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 172.14, -184.29, 344.94, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2686, 172.24, -200.31, 344.94, 0.00, 0.00, 180.00); 
	CreateDynamicObject(2765, 291.03, -225.77, 352.63, 340.49, 0.00, 55.68); 
	CreateDynamicObject(2765, 292.20, -226.76, 352.37, 269.25, 0.00, 55.68); 
	CreateDynamicObject(2916, 1111.44, 325.88, 586.01, 0.00, 0.00, 0.00); 
	CreateDynamicObject(2922, 1122.93, 327.06, 584.31, 0.00, 0.00, 90.00); 
	CreateDynamicObject(2922, 1123.35, 327.11, 584.31, 0.00, 0.00, 270.00); 
	
	CreateDynamicObject(2930, 1099.10, 345.86, 585.41, 0.00, 0.00, 90.00); 
	CreateDynamicObject(2930, 1123.38, 329.6960, 585.35, 0.00, 0.00, 0.00); // To jails +1.224
	
	cell[1] = CreateObject(2930, 147.348, -200.28, 348.55, 0.00, 0.00, 90.00); // +1.632
	cell[2] = CreateObject(2930, 147.358, -184.27, 348.54, 0.00, 0.00, 90.00); 
	cell[3] = CreateObject(2930, 152.128, -200.26, 348.55, 0.00, 0.00, 90.00); 
	cell[4] = CreateObject(2930, 152.168, -184.27, 348.54, 0.00, 0.00, 90.00); 
	cell[5] = CreateObject(2930, 156.818, -200.27, 344.53, 0.00, 0.00, 90.00); 
	cell[6] = CreateObject(2930, 156.848, -184.22, 344.53, 0.00, 0.00, 90.00); 
	cell[7] = CreateObject(2930, 156.868, -184.29, 348.54, 0.00, 0.00, 90.00); 
	cell[8] = CreateObject(2930, 156.908, -200.29, 348.55, 0.00, 0.00, 90.00); 
	cell[9] = CreateObject(2930, 161.568, -200.25, 344.53, 0.00, 0.00, 90.00); 
	cell[10] = CreateObject(2930, 161.658, -200.25, 348.55, 0.00, 0.00, 90.00); 
	cell[11] = CreateObject(2930, 161.668, -184.21, 344.53, 0.00, 0.00, 90.00); 
	cell[12] = CreateObject(2930, 161.668, -184.23, 348.54, 0.00, 0.00, 90.00); 
	cell[13] = CreateObject(2930, 166.328, -184.24, 348.54, 0.00, 0.00, 90.00); 
	cell[14] = CreateObject(2930, 166.368, -184.25, 344.53, 0.00, 0.00, 90.00); 
	cell[15] = CreateObject(2930, 166.368, -200.25, 348.55, 0.00, 0.00, 90.00); 
	cell[16] = CreateObject(2930, 166.368, -200.26, 344.53, 0.00, 0.00, 90.00); 
	cell[17] = CreateObject(2930, 170.558, -184.32, 348.54, 0.00, 0.00, 90.00); 
	cell[18] = CreateObject(2930, 170.578, -200.25, 348.55, 0.00, 0.00, 90.00); 
	cell[19] = CreateObject(2930, 170.878, -184.23, 344.53, 0.00, 0.00, 90.00); 
	cell[20] = CreateObject(2930, 170.878, -200.29, 344.53, 0.00, 0.00, 90.00);
	
	CreateDynamicObject(2933, 300.38, -206.87, 352.62, 0.00, 0.00, 270.00); 
	CreateDynamicObject(2933, 300.40, -205.19, 349.22, 0.00, 0.00, 90.00); 
	CreateDynamicObject(3858, 179.35, -188.29, 342.25, 0.00, 0.00, 314.82); 
	CreateDynamicObject(3858, 179.38, -192.21, 348.97, 0.00, 0.00, 314.99); 
	CreateDynamicObject(3859, 179.38, -182.31, 351.96, 0.00, 0.00, 17.00); 
	CreateDynamicObject(4106, 142.25, -186.44, 344.39, 0.00, 0.00, 270.00); 
	CreateDynamicObject(4106, 144.08, -198.17, 344.39, 0.00, 0.00, 90.00); 
	CreateDynamicObject(4724, 1102.75, 343.82, 586.26, 0.00, 0.00, 0.00); 
	CreateDynamicObject(7191, 151.40, -202.14, 349.99, 0.00, 90.00, 90.00); 
	CreateDynamicObject(7191, 151.40, -202.16, 345.82, 0.00, 90.00, 90.00); 
	CreateDynamicObject(7191, 151.40, -206.11, 349.99, 0.00, 90.00, 90.00); 
	CreateDynamicObject(7191, 151.40, -206.12, 345.82, 0.00, 90.00, 90.00); 
	CreateDynamicObject(7191, 151.80, -205.06, 347.87, 0.00, 0.00, 270.00); 
	CreateDynamicObject(7191, 151.99, -178.49, 345.82, 0.00, 90.00, 270.00); 
	CreateDynamicObject(7191, 152.06, -182.45, 345.82, 0.00, 90.00, 270.00); 
	CreateDynamicObject(7191, 174.14, -222.19, 347.97, 0.00, 179.99, 0.00); 
	CreateDynamicObject(7191, 186.80, -163.22, 349.95, 180.00, 0.00, 0.00); 
	CreateDynamicObject(7191, 186.80, -164.87, 352.75, 179.99, 0.00, 0.00); 
	CreateDynamicObject(7191, 186.81, -163.21, 349.92, 179.99, 179.99, 0.00); 
	CreateDynamicObject(7191, 186.81, -164.87, 352.74, 180.00, 180.00, 0.00); 
	CreateDynamicObject(3089, 1105.15, 331.15, 584.10, 0.00, 0.00, 0.00); 
	CreateDynamicObject(3089, 1110.69, 325.73, 584.10, 0.00, 0.00, 0.00); 
	CreateDynamicObject(3089, 1110.69, 331.05, 584.10, 0.00, 0.00, 0.00); 
	
	// <-- Jail
	// Spawn civil -->
	
	CreateDynamicObject(14415, 12.88219833374, 24.883560180664, 978.47216796875, 0, 0, 0);
	CreateDynamicObject(3921, 31.192150115967, 33.572292327881, 972.84558105469, 0, 0, 0);
	CreateDynamicObject(3921, 13.071014404297, 34.188335418701, 972.85186767578, 0, 0, 180.5);
	CreateDynamicObject(2571, 25.396900177002, 26.564920425415, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2571, 15.2236328125, 26.583984375, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2290, 27.921730041504, 20.485948562622, 972.30810546875, 0, 0, 182);
	CreateDynamicObject(2290, 17.409408569336, 20.573760986328, 972.30810546875, 0, 0, 181.99951171875);
	CreateDynamicObject(1707, 27.71630859375, 29.205331802368, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1707, 17.3935546875, 29.2294921875, 972.30810546875, 0, 0, 179.99450683594);
	CreateDynamicObject(1703, 7.7965579032898, 29.939395904541, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(15037, 22.77286529541, 36.493759155273, 972.71508789063, 0, 0, 182);
	CreateDynamicObject(14820, 25.40202331543, 36.640998840332, 972.41784667969, 0, 0, 0);
	CreateDynamicObject(2007, 20.468437194824, 38.37629699707, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2007, 24.645927429199, 38.371906280518, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2164, 22.331247329712, 38.572845458984, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2604, 34.933959960938, 20.424879074097, 973.10498046875, 0, 0, 0);
	CreateDynamicObject(2606, 8.0697784423828, 11.172622680664, 976.63165283203, 0, 0, 180);
	CreateDynamicObject(2606, 34.8369140625, 18.109375, 977.14007568359, 0, 0, 179.99450683594);
	CreateDynamicObject(2606, 35.246299743652, 38.610122680664, 976.86743164063, 0, 0, 359.99450683594);
	CreateDynamicObject(2737, 17.911577224731, 38.541591644287, 973.97918701172, 0, 0, 0);
	CreateDynamicObject(2737, 27.660676956177, 38.560729980469, 973.94757080078, 0, 0, 0);
	CreateDynamicObject(2616, 22.929857254028, 38.561264038086, 974.73468017578, 0, 0, 0);
	CreateDynamicObject(2118, 26.409599304199, 30.025247573853, 972.30810546875, 0, 0, 1.99951171875);
	CreateDynamicObject(2118, 16.136476516724, 30.2375831604, 972.30810546875, 0, 0, 359.99450683594);
	CreateDynamicObject(2116, 14.27580165863, 32.348472595215, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2116, 14.261756896973, 34.729187011719, 972.31439208984, 0, 0, 270);
	CreateDynamicObject(2116, 14.253480911255, 36.957927703857, 972.31439208984, 0, 0, 270);
	CreateDynamicObject(2116, 29.676477432251, 36.449016571045, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2116, 29.681119918823, 34.118865966797, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2116, 29.697277069092, 31.77455329895, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2086, 17.574542999268, 37.748474121094, 972.69970703125, 0, 0, 0);
	CreateDynamicObject(2086, 27.391899108887, 37.749706268311, 972.69970703125, 0, 0, 0);
	CreateDynamicObject(2069, 21.363128662109, 38.315517425537, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2069, 25.351539611816, 38.396476745605, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1670, 23.198328018188, 36.262851715088, 973.14465332031, 0, 0, 0);
	CreateDynamicObject(1671, 27.455299377441, 36.875652313232, 972.76831054688, 0, 0, 182);
	CreateDynamicObject(1671, 17.64453125, 36.6513671875, 972.76831054688, 0, 0, 181.99952697754);
	CreateDynamicObject(1671, 34.210556030273, 19.518211364746, 972.76831054688, 0, 0, 181.99951171875);
	CreateDynamicObject(1954, 17.669990539551, 37.625129699707, 973.20056152344, 0, 0, 0);
	CreateDynamicObject(1954, 27.362134933472, 37.69454574585, 973.20056152344, 0, 0, 0);
	CreateDynamicObject(1724, 15.037530899048, 14.392949104309, 972.30810546875, 0, 0, 230);
	CreateDynamicObject(2224, 13.830142021179, 11.110122680664, 972.34448242188, 0, 0, 85.994506835938);
	CreateDynamicObject(2298, 25.16895866394, 15.669061660767, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2296, 27.540256500244, 11.400924682617, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(2564, 14.243070602417, 17.120758056641, 972.31439208984, 0, 0, 0);
	CreateDynamicObject(2817, 25.916971206665, 15.994219779968, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 21.178152084351, 18.482625961304, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 22.655033111572, 18.502902984619, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2819, 18.964454650879, 18.088655471802, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2824, 15.739050865173, 18.306798934937, 972.95251464844, 0, 0, 0);
	CreateDynamicObject(2827, 25.992832183838, 16.486358642578, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2834, 26.308320999146, 12.033020973206, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2834, 20.250049591064, 13.853987693787, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2842, 17.296726226807, 16.154273986816, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2842, 15.229259490967, 16.15841293335, 972.31439208984, 0, 0, 0);
	CreateDynamicObject(14806, 16.639596939087, 11.288228988647, 973.39410400391, 0, 0, 179.5);
	CreateDynamicObject(14867, 31.68688583374, 15.309727668762, 973.83782958984, 0, 0, 90);
	CreateDynamicObject(1661, 19.631978988647, 14.763167381287, 978.30493164063, 0, 0, 0);
	CreateDynamicObject(1719, 13.667896270752, 11.951212882996, 972.36254882813, 0, 0, 310);
	CreateDynamicObject(2591, 24.288017272949, 17.858940124512, 975.01000976563, 0, 0, 0);
	CreateDynamicObject(2591, 20.239166259766, 17.948934555054, 975.01000976563, 0, 0, 0);
	CreateDynamicObject(2025, 22.409246444702, 11.337461471558, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(2267, 17.997169494629, 19.534685134888, 974.07666015625, 0, 0, 0);
	CreateDynamicObject(2268, 16.750827789307, 19.030666351318, 972.73992919922, 0, 0, 0);
	CreateDynamicObject(2255, 26.490245819092, 19.066036224365, 973.24829101563, 0, 0, 0);
	CreateDynamicObject(14455, 12.639927864075, 17.95885848999, 973.98614501953, 0, 0, 272);
	CreateDynamicObject(2817, 21.625564575195, 28.82405090332, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 21.711833953857, 20.185459136963, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2818, 21.660312652588, 27.023685455322, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2202, 36.803932189941, 18.899320602417, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2202, 24.63761138916, 37.468852996826, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2626, 35.280879974365, 36.280433654785, 972.82580566406, 0, 0, 0);
	CreateDynamicObject(2622, 36.956295013428, 36.370143890381, 973.09289550781, 0, 0, 0);
	CreateDynamicObject(2620, 33.731910705566, 36.326976776123, 973.08508300781, 0, 0, 0);
	CreateDynamicObject(2593, 36.487594604492, 35.63069152832, 973.16003417969, 0, 0, 0);
	CreateDynamicObject(2593, 34.102012634277, 35.51358795166, 973.16003417969, 0, 0, 0);
	CreateDynamicObject(2583, 35.283836364746, 38.360736846924, 973.17553710938, 0, 0, 0);
	CreateDynamicObject(2578, 36.859916687012, 38.510147094727, 975.36224365234, 0, 0, 0);
	CreateDynamicObject(2579, 33.567043304443, 38.485324859619, 975.31433105469, 0, 0, 0);
	CreateDynamicObject(2493, 36.414253234863, 35.376281738281, 973.50927734375, 0, 0, 0);
	CreateDynamicObject(2494, 34.086681365967, 35.259178161621, 973.38006591797, 0, 0, 0);
	CreateDynamicObject(2441, 32.674644470215, 38.402313232422, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2500, 32.878299713135, 38.434543609619, 973.36364746094, 0, 0, 0);
	CreateDynamicObject(1622, 38.19469833374, 24.578357696533, 977.69091796875, 0, 0, 0);
	CreateDynamicObject(1616, 32.209762573242, 18.145559310913, 977.42974853516, 0, 0, 266.25);
	CreateDynamicObject(1569, 20.682876586914, 28.321384429932, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1569, 23.704778671265, 28.339315414429, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1567, 23.69469833374, 20.05552482605, 972.32745361328, 0, 0, 180);
	CreateDynamicObject(1567, 20.65625, 19.998046875, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1566, 38.551471710205, 35.110122680664, 973.82348632813, 0, 0, 270);
	CreateDynamicObject(1566, 38.579376220703, 31.94659614563, 973.82348632813, 0, 0, 90);
	CreateDynamicObject(1536, 0.1027472242713, 20.447515487671, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1536, -2.9169917106628, 20.417507171631, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1533, -16.739162445068, 31.108661651611, 972.30810546875, 0, 0, 90);
	CreateDynamicObject(1533, -16.720016479492, 32.591186523438, 972.30810546875, 0, 0, 90);
	CreateDynamicObject(1502, 4.8464765548706, 12.098909378052, 972.30810546875, 0, 0, 92);
	CreateDynamicObject(1502, 4.7102832794189, 15.118394851685, 972.30810546875, 0, 0, 272);
	CreateDynamicObject(16151, -10.247404098511, 15.523916244507, 972.30810546875, 0, 0, 180);
	CreateDynamicObject(1545, -11.324516296387, 17.689949035645, 973.60852050781, 0, 0, 86);
	CreateDynamicObject(1541, -11.39905166626, 16.616081237793, 973.56921386719, 0, 0, 88);
	CreateDynamicObject(12842, -3.7752265930176, 15.031318664551, 972.76275634766, 0, 0, 270);
	CreateDynamicObject(2755, 2.4838740825653, 20.037475585938, 976.58355712891, 0, 0, 0);
	CreateDynamicObject(2755, -5.923828125, 20.0732421875, 976.57702636719, 0, 0, 0);
	CreateDynamicObject(1959, -9.3243026733398, 14.623206138611, 972.91351318359, 0, 0, 270);
	CreateDynamicObject(2543, -9.9081935882568, 20.110122680664, 973.07745361328, 0, 0, 0);
	CreateDynamicObject(2541, 35.353992462158, 38.485992431641, 974.5927734375, 0, 0, 0);
	CreateDynamicObject(2589, -11.085306167603, 29.989120483398, 977.59020996094, 0, 0, 0);
	CreateDynamicObject(2589, -8.6594562530518, 29.722650527954, 977.59020996094, 0, 0, 0);
	CreateDynamicObject(2589, -8.775390625, 30.046875, 977.59020996094, 0, 0, 0);
	CreateDynamicObject(14651, 2.1854705810547, 23.477369308472, 974.54956054688, 0, 0, 180);
	CreateDynamicObject(14651, -4.84765625, 22.9833984375, 974.54956054688, 0, 0, 0);
	CreateDynamicObject(18092, -0.81538456678391, 38.172164916992, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2627, -6.1045513153076, 29.97894859314, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2627, -6.109375, 28.1572265625, 972.30810546875, 0, 0, 269.99951171875);
	CreateDynamicObject(2628, -6.6654834747314, 26.530153274536, 972.30810546875, 0, 0, 90);
	CreateDynamicObject(2629, 3.8869113922119, 30.582801818848, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2630, 3.7616939544678, 28.667652130127, 972.30810546875, 0, 0, 270);
	CreateDynamicObject(2632, -1.5915441513062, 29.137714385986, 972.35443115234, 0, 0, 270);
	CreateDynamicObject(2632, -1.5576171875, 23.265625, 972.35443115234, 0, 0, 270);
	CreateDynamicObject(18051, -1.4311602115631, 30.826602935791, 973.80603027344, 0, 0, 90);
	CreateDynamicObject(1840, 4.381275177002, 27.128513336182, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(1829, -11.235162734985, 35.651714324951, 972.77264404297, 0, 0, 0);
	CreateDynamicObject(1828, -0.92138195037842, 33.358615875244, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2389, -7.3990516662598, 34.519687652588, 973.67736816406, 0, 0, 0);
	CreateDynamicObject(2390, 4.6067409515381, 34.333801269531, 973.71411132813, 0, 0, 0);
	CreateDynamicObject(2626, -5.6212368011475, 32.458377838135, 972.82580566406, 0, 0, 90);
	CreateDynamicObject(2771, -5.5377707481384, 32.867343902588, 973.58660888672, 0, 0, 0);
	CreateDynamicObject(1586, -0.58652114868164, 38.610122680664, 973.45587158203, 0, 0, 0);
	CreateDynamicObject(1586, -6.7048645019531, 38.610122680664, 973.56640625, 0, 0, 0);
	CreateDynamicObject(1586, -3.7177734375, 38.609375, 973.45330810547, 0, 0, 0);
	CreateDynamicObject(1586, -2.134765625, 38.609375, 973.45941162109, 0, 0, 0);
	CreateDynamicObject(1583, 0.92487996816635, 38.032722473145, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(1583, -2.6566796302795, 38.016735076904, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(1586, 4.0108051300049, 38.610122680664, 973.59674072266, 0, 0, 0);
	CreateDynamicObject(1586, 2.48583984375, 38.610122680664, 973.57299804688, 0, 0, 0);
	CreateDynamicObject(1586, 1.0338573455811, 38.610122680664, 973.54650878906, 0, 0, 0);
	CreateDynamicObject(1586, -5.3076171875, 38.609375, 973.48376464844, 0, 0, 0);
	CreateDynamicObject(1585, -1.4420177936554, 38.066814422607, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(1584, -0.23490512371063, 38.052879333496, 972.80865478516, 0, 0, 0);
	CreateDynamicObject(2915, 3.3318185806274, 26.921283721924, 972.42926025391, 0, 0, 0);
	CreateDynamicObject(2915, 3.41015625, 27.5634765625, 972.42926025391, 0, 0, 0);
	CreateDynamicObject(2916, 3.8861789703369, 29.872987747192, 972.42462158203, 0, 0, 0);
	CreateDynamicObject(2916, 3.8790969848633, 31.269302368164, 972.42462158203, 0, 0, 0);
	CreateDynamicObject(3002, 2.4578876495361, 23.508266448975, 973.45599365234, 0, 0, 0);
	CreateDynamicObject(2558, -7.2763109207153, 31.367443084717, 973.50927734375, 0, 0, 90);
	CreateDynamicObject(2558, -7.2600908279419, 33.121574401855, 973.50927734375, 0, 0, 90);
	CreateDynamicObject(2176, 6.1406030654907, 24.292280197144, 975.15026855469, 0, 0, 0);
	CreateDynamicObject(2723, 3.0490531921387, 26.460178375244, 972.67620849609, 0, 0, 0);
	CreateDynamicObject(2723, -5.5178318023682, 25.616340637207, 972.67620849609, 0, 0, 0);
	CreateDynamicObject(2252, 16.717227935791, 27.389533996582, 973.11993408203, 0, 0, 0);
	CreateDynamicObject(2252, 26.81929397583, 27.304201126099, 973.11993408203, 0, 0, 0);
	CreateDynamicObject(2011, 19.718963623047, 27.536556243896, 972.30725097656, 0, 0, 0);
	CreateDynamicObject(2011, 24.1640625, 27.654296875, 972.2822265625, 0, 0, 0);
	CreateDynamicObject(2001, 18.710739135742, 20.741733551025, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(2001, 24.725276947021, 20.633800506592, 972.30810546875, 0, 0, 0);
	CreateDynamicObject(644, 7.2097082138062, 12.016550064087, 972.6083984375, 0, 0, 88);
	CreateDynamicObject(14415, 9.5577001571655, 12.275719642639, 985.42260742188, 0, 0, 0);
	CreateDynamicObject(14415, 9.5577001571655, 12.275719642639, 985.42260742188, 0, 0, 0);
	CreateDynamicObject(644, 9.5849609375, 11.93359375, 972.6083984375, 0, 0, 87.994995117188);
	CreateDynamicObject(1985, 2.503586769104, 28.136322021484, 977.46246337891, 0, 0, 0);
	CreateDynamicObject(16782, -16.313255310059, 32.607196807861, 976.00128173828, 0, 0, 0);
	CreateDynamicObject(1671, -6.7292366027832, 32.442501068115, 972.76831054688, 0, 0, 90);
	
	new exit_perete = CreateDynamicObject(19353, 22.2278, 20.1247, 976.5289, 0.0000, 0.0000, 93.0615);
	SetDynamicObjectMaterialText(exit_perete, 0, "< EXIT <", 50, "Arial", 24, 0, -65536, 0, 1);

	new exit2 = CreateDynamicObject(19353, 38.1848, 24.4298, 976.1587, 0.0000, 0.0000, 182.5690);
	SetDynamicObjectMaterialText(exit2, 0, "< EXIT <", 50, "Arial", 24, 0, -65536, 0, 1);
	
	new exit3 = CreateDynamicObject(19353, 38.2056, 33.6650, 976.5646, 0.0000, 0.8999, -0.8257);
	SetDynamicObjectMaterialText(exit3, 0, "> EXIT <", 50, "Arial", 24, 0, -65536, 0, 1);
	// < -- Spawn Civil
	
	// Meeting Room -->

	CreateDynamicObject(14701, -203.70000, -221.70000, 1147.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1506, -206.39999, -228.13000, 1145.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, -210.70000, -226.89999, 1146.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2357, -210.70000, -228.20001, 1146.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, -209.50000, -225.50000, 1146.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, -210.70000, -225.50000, 1146.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, -211.89999, -225.50000, 1146.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, -209.50000, -229.57001, 1146.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, -210.70000, -229.57001, 1146.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, -211.89999, -229.57001, 1146.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -213.70000, -227.60001, 1146.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2737, -210.89999, -231.37000, 1147.80005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, -206.60001, -231.30000, 1148.90002,   0.00000, 10.00000, 148.00000);
	CreateDynamicObject(2267, -206.60001, -227.30000, 1149.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1736, -214.50000, -227.70000, 1149.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, -206.84000, -225.89999, 1145.69995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16779, -210.39999, -227.70000, 1150.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, -214.30000, -230.00000, 1145.71997,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1663, -208.10001, -229.30000, 1146.19995,   0.00000, 0.00000, 227.25000);
	CreateDynamicObject(1663, -208.20000, -225.70000, 1146.19995,   0.00000, 0.00000, 306.00000);
	CreateDynamicObject(2164, -207.20000, -231.39999, 1145.69995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2690, -206.63000, -228.50000, 1146.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2276, -211.80000, -223.82001, 1148.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2284, -210.70000, -223.82001, 1148.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2283, -213.20000, -223.30000, 1148.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2282, -209.39999, -223.82001, 1148.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2278, -208.20000, -223.80000, 1148.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2258, -206.60001, -224.70000, 1148.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2256, -206.62000, -229.50000, 1148.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2259, -214.30000, -225.00000, 1148.09998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2261, -214.30000, -230.30000, 1148.10010,   0.00000, 0.00000, 90.00000);
	
	// <-- Done
	
	CreateDynamicObject(2924,754.7000000,-1363.7000000,13.7000000,0.0000000,0.0000000,270.0000000); //object(kmb_crash3door) (1)
	CreateDynamicObject(2924,754.7000000,-1360.9000000,13.7000000,0.0000000,0.0000000,90.0000000); //object(kmb_crash3door) (2)
	CreateDynamicObject(10150,968.5000000,-52.9000000,1002.1000000,0.0000000,0.0000000,2.0000000); //object(fdorsfe) (1)

	CreateDynamicObject(1237,1841.9000000,-2493.9000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (1)
	CreateDynamicObject(1237,1829.4000000,-2493.8000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (2)
	CreateDynamicObject(1237,1817.2000000,-2493.8000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (3)
	CreateDynamicObject(1237,1805.3000000,-2493.9000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (4)
	CreateDynamicObject(1237,1797.0000000,-2494.0000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (5)
	CreateDynamicObject(1237,1787.3000000,-2493.8000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (6)
	CreateDynamicObject(1228,1778.7000000,-2490.7000000,13.0000000,0.0000000,0.0000000,0.0000000); //object(roadworkbarrier1) (1)
	CreateDynamicObject(1228,1778.8000000,-2496.2000000,13.0000000,0.0000000,0.0000000,0.0000000); //object(roadworkbarrier1) (2)
	CreateDynamicObject(1228,1778.7000000,-2493.6000000,13.0000000,0.0000000,0.0000000,0.0000000); //object(roadworkbarrier1) (3)
	CreateDynamicObject(1422,1764.6000000,-2493.8000000,13.0000000,0.0000000,0.0000000,0.0000000); //object(dyn_roadbarrier_5) (1)
	CreateDynamicObject(1237,1751.8000000,-2493.9000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (7)
	CreateDynamicObject(1237,1738.7000000,-2493.9000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (8)
	CreateDynamicObject(1237,1729.3000000,-2494.0000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(strtbarrier01) (9)
	CreateDynamicObject(979,1733.8000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (1)
	CreateDynamicObject(979,1743.1000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (2)
	CreateDynamicObject(979,1752.4000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (3)
	CreateDynamicObject(979,1761.7000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (4)
	CreateDynamicObject(979,1771.0000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (5)
	CreateDynamicObject(979,1780.3000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (6)
	CreateDynamicObject(979,1789.6000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (7)
	CreateDynamicObject(979,1798.9000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (8)
	CreateDynamicObject(979,1808.2000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (9)
	CreateDynamicObject(979,1817.5000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (10)
	CreateDynamicObject(979,1826.8000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (11)
	CreateDynamicObject(979,1836.1000000,-2503.2000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(sub_roadleft) (12)
	CreateDynamicObject(978,1835.4000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (2)
	CreateDynamicObject(978,1826.1000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (3)
	CreateDynamicObject(978,1816.8000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (4)
	CreateDynamicObject(978,1807.5000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (5)
	CreateDynamicObject(978,1798.1000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (6)
	CreateDynamicObject(978,1788.8000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (7)
	CreateDynamicObject(978,1779.5000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (8)
	CreateDynamicObject(978,1770.2000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (9)
	CreateDynamicObject(978,1760.9000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (10)
	CreateDynamicObject(978,1751.6000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (11)
	CreateDynamicObject(978,1742.3000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (12)
	CreateDynamicObject(978,1733.0000000,-2485.0000000,13.4000000,0.0000000,0.0000000,180.0000000); //object(sub_roadright) (13)
	
	// Bus -->
	
	CreateDynamicObject(8650,1725.3600000,-1360.0000000,13.6694000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall06_lvs) (1)
	CreateDynamicObject(8650,1759.1000000,-1309.4000000,13.7000000,0.0000000,0.0000000,102.0000000); //object(shbbyhswall06_lvs) (2)
	CreateDynamicObject(8650,1725.3600000,-1330.0000000,13.6694000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall06_lvs) (4)
	CreateDynamicObject(8650,1740.8400000,-1430.3900000,13.6694000,0.0000000,0.0000000,90.0000000); //object(shbbyhswall06_lvs) (5)
	CreateDynamicObject(8650,1835.4000000,-1376.0000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall06_lvs) (6)
	CreateDynamicObject(8650,1725.3400000,-1415.5900000,13.6694000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall06_lvs) (7)
	CreateDynamicObject(8650,1764.2000000,-1430.5000000,13.6694000,0.0000000,0.0000000,89.3000000); //object(shbbyhswall06_lvs) (9)
	CreateDynamicObject(5169,1770.8000000,-1373.7000000,14.7000000,0.0000000,0.0000000,90.6980000); //object(imnrmpy1_las2) (1)
	CreateDynamicObject(5169,1800.6000000,-1372.8000000,15.1000000,0.0000000,0.0000000,90.6980000); //object(imnrmpy1_las2) (2)
	CreateDynamicObject(10829,1831.2800000,-1401.1890000,12.1827000,0.0000000,0.0000000,0.0000000); //object(gatehouse1_sfse) (1)
	CreateDynamicObject(10829,1823.7800000,-1401.1900000,12.1827000,0.0000000,0.0000000,0.0000000); //object(gatehouse1_sfse) (2)
	CreateDynamicObject(8650,1725.3400000,-1390.0900000,13.6694000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall06_lvs) (10)
	CreateDynamicObject(8650,1835.2000000,-1345.6000000,13.7000000,0.0000000,0.0000000,0.9890000); //object(shbbyhswall06_lvs) (12)
	CreateDynamicObject(5170,1752.8000000,-1428.9500000,15.4487000,0.0000000,0.0000000,0.0000000); //object(imnrmpy2_las2) (1)
	CreateDynamicObject(3567,1776.0700000,-1376.3900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (2)
	CreateDynamicObject(3567,1776.0700000,-1386.8900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (3)
	CreateDynamicObject(3567,1776.0700000,-1355.3900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (4)
	CreateDynamicObject(3567,1776.0700000,-1365.8900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (5)
	CreateDynamicObject(3567,1776.0700000,-1344.8900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (6)
	CreateDynamicObject(3567,1776.0700000,-1334.3900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (7)
	CreateDynamicObject(3567,1776.0700000,-1396.8900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (8)
	CreateDynamicObject(3567,1806.0700000,-1396.8900000,11.8437000,0.0000000,1.6920000,231.0540000); //object(lasnfltrail) (14)
	CreateDynamicObject(3567,1806.0700000,-1386.8900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (15)
	CreateDynamicObject(3567,1806.0700000,-1376.3900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (16)
	CreateDynamicObject(3567,1808.1000000,-1339.4000000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (17)
	CreateDynamicObject(3567,1806.0700000,-1366.3900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (18)
	CreateDynamicObject(3567,1806.0700000,-1356.3900000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (19)
	CreateDynamicObject(3567,1806.1000000,-1346.4000000,11.8437000,0.0000000,0.0000000,231.0540000); //object(lasnfltrail) (20)
	CreateDynamicObject(3567,1798.1700000,-1380.0900000,11.8437000,1.7630000,1.7630000,-0.4230000); //object(lasnfltrail) (22)
	CreateDynamicObject(3567,1798.1700000,-1369.4900000,11.8437000,1.7630000,1.7630000,-0.4230000); //object(lasnfltrail) (23)
	CreateDynamicObject(3567,1798.3700000,-1359.4900000,11.8437000,1.7580000,1.7580000,359.5720000); //object(lasnfltrail) (24)
	CreateDynamicObject(3567,1798.3700000,-1349.5900000,11.8437000,1.7630000,1.7630000,-0.4230000); //object(lasnfltrail) (25)
	CreateDynamicObject(8843,1786.5000000,-1387.1700000,12.6400000,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1786.5000000,-1347.1700000,12.5400000,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (2)
	CreateDynamicObject(8843,1816.5000000,-1387.1700000,12.6400000,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (3)
	CreateDynamicObject(8843,1780.5000000,-1419.5700000,12.6400000,-1.8760000,-1.8760000,-0.7070000); //object(arrows01_lvs) (4)
	CreateDynamicObject(8843,1816.5000000,-1347.1700000,12.6400000,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (5)
	CreateDynamicObject(8843,1786.5000000,-1317.1700000,12.6400000,0.0000000,0.0000000,0.7070000); //object(arrows01_lvs) (6)
	CreateDynamicObject(1209,1766.5200000,-1432.1500000,12.4924000,-1.1290000,-1.1290000,0.9900000); //object(vendmach) (1)
	CreateDynamicObject(1209,1746.5200000,-1428.1500000,12.4924000,0.0000000,0.0000000,1.0000000); //object(vendmach) (2)
	CreateDynamicObject(1775,1738.8500000,-1429.6200000,13.6061000,0.0000000,0.0000000,1.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1209,1804.1200000,-1435.9500000,12.4924000,0.0000000,0.0000000,1.0000000); //object(vendmach) (3)
	CreateDynamicObject(1257,1768.7800000,-1426.9200000,13.7291000,0.0000000,0.0000000,0.7070000); //object(bustopm) (1)
	CreateDynamicObject(1257,1750.1800000,-1426.9200000,13.7291000,0.0000000,0.0000000,0.7070000); //object(bustopm) (2)
	CreateDynamicObject(1257,1755.2800000,-1426.9200000,13.7291000,0.0000000,0.0000000,0.7070000); //object(bustopm) (3)
	CreateDynamicObject(1257,1738.7800000,-1426.9200000,13.7291000,0.0000000,0.0000000,0.7070000); //object(bustopm) (4)
	CreateDynamicObject(1256,1797.7000000,-1395.0200000,13.8000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (1)
	CreateDynamicObject(1256,1797.7000000,-1375.0200000,13.8000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (2)
	CreateDynamicObject(1256,1767.7000000,-1385.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (3)
	CreateDynamicObject(1256,1767.7000000,-1365.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (4)
	CreateDynamicObject(1256,1797.7000000,-1355.0200000,13.8000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (5)
	CreateDynamicObject(1256,1767.7000000,-1345.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (6)
	CreateDynamicObject(1256,1797.7000000,-1335.0200000,13.8000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (7)
	CreateDynamicObject(1256,1767.7000000,-1335.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (8)
	CreateDynamicObject(1256,1797.7000000,-1345.0200000,13.8000000,0.0000000,0.0000000,181.0000000); //object(stonebench1) (9)
	CreateDynamicObject(1256,1767.7000000,-1355.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (10)
	CreateDynamicObject(1256,1797.7000000,-1365.0200000,13.8000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (11)
	CreateDynamicObject(1256,1767.7000000,-1375.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (12)
	CreateDynamicObject(1256,1797.7000000,-1385.0000000,13.8000000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (13)
	CreateDynamicObject(1256,1767.7000000,-1395.0200000,13.4431000,0.0000000,0.0000000,180.0000000); //object(stonebench1) (14)
	CreateDynamicObject(4594,1761.5999800,-1335.3000500,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(8650,1829.5000000,-1316.3000000,13.7000000,0.0000000,0.0000000,20.9890000); //object(shbbyhswall06_lvs) (12)
	CreateDynamicObject(8650,1788.6000000,-1303.1000000,13.7000000,0.0000000,0.0000000,102.0000000); //object(shbbyhswall06_lvs) (2)
	CreateDynamicObject(8650,1793.5000000,-1436.0000000,13.6694000,0.0000000,0.0000000,69.2970000); //object(shbbyhswall06_lvs) (9)
	CreateDynamicObject(8843,1799.6720000,-1367.1379400,19.7952100,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (7)
	CreateDynamicObject(8843,1815.5649400,-1367.6529500,12.4775300,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (8)
	CreateDynamicObject(8843,1854.0909400,-1395.3960000,12.2462800,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (9)
	CreateDynamicObject(8843,1820.1650400,-1369.7700200,12.4775300,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (10)
	CreateDynamicObject(8843,1820.1650400,-1369.7700200,12.4775300,0.0000000,0.0000000,0.0000000); //object(arrows01_lvs) (11)
	CreateDynamicObject(4594,1737.7000000,-1305.2000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1761.9000000,-1305.3000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1737.4000000,-1335.3000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1737.4000000,-1365.5000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1761.7000000,-1365.6000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1738.3000000,-1440.5000000,-9.7000000,0.0000000,0.0000000,180.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1762.3000000,-1395.7000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1785.0000000,-1332.8000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1786.7000000,-1393.4000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1786.8000000,-1363.2000000,-9.7000000,0.0000000,0.0000000,0.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1811.0000000,-1327.7000000,-9.7000000,0.0000000,0.0000000,270.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1811.6000000,-1438.0000000,-9.7000000,0.0000000,0.0000000,180.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1797.3000000,-1388.4000000,-9.7000000,0.0000000,0.0000000,90.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1840.1000000,-1366.9000000,-18.2000000,0.0000000,0.0000000,90.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1797.3000000,-1364.0000000,-9.7000000,0.0000000,0.0000000,90.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1797.1000000,-1340.1000000,-9.7000000,0.0000000,0.0000000,90.0000000); //object(lan2buildblk02) (1)
	CreateDynamicObject(4594,1795.4000000,-1316.0000000,-9.7000000,0.0000000,0.0000000,90.0000000); //object(lan2buildblk02) (1)

	// <--
	
	
	CreateDynamicPickup(1239, 23, 1748.6030,-1862.7672,13.5759, -1, -1,-1,100.0);// ATM
	CreateDynamicPickup(1239, 23, 1816.1312,-1557.5348,13.5060, -1, -1,-1,100.0);// ATM
	CreateDynamicPickup(1239, 23, 1083.2356,-1817.2999,13.6117, -1, -1,-1,100.0);// ATM
	CreateDynamicPickup(1239, 23, 603.1664,-1247.7566,18.4132, -1, -1,-1,100.0);// ATM
	CreateDynamicPickup(1239, 23, 1460.1993,-1791.9718,13.5468, -1, -1,-1,100.0);// ATM

	CreateDynamicPickup(1239, 23, 1127.5112,328.8745,583.7659, -1, -1,-1,100.0);// Enter in jail
	CreateDynamicPickup(1239, 23, 1119.1720,330.5911,583.7659, -1, -1,-1,100.0);// Exit from section
	CreateDynamicPickup(1239, 23, 1117.6843,326.2397,583.7659, -1, -1,-1,100.0);// PD control
	CreateDynamicPickup(1239, 23, 1555.2115,-1675.6229,16.1953, -1, -1,-1,100.0);// enter in section
	
	CreateDynamicPickup(1239, 23, 2119.6367,-1151.6306,24.0419, -1, -1,-1,100.0);// Special Car
	CreateDynamic3DTextLabel("{FFFFFF}To get the openning-car \ntype {FF0000}/rg3",COLOR_YELLOW_DIALOG,2119.6367,-1151.6306,24.0419,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	CreateDynamic3DTextLabel("{FFFFFF}To enter in Jail \ntype {FF0000}/enter",COLOR_YELLOW_DIALOG,1555.2115,-1675.6229,16.1953,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To enter in PD Control Center \ntype {FF0000}/enter",COLOR_YELLOW_DIALOG,1117.6843,326.2397,583.7659,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To exit from Jail \ntype {FF0000}/exit",COLOR_YELLOW_DIALOG,1119.1720,330.5911,583.7659,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To enter in cell room \ntype {FF0000}/enter",COLOR_YELLOW_DIALOG,1127.5112,328.8745,583.7659,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	CreateDynamic3DTextLabel("{FFFFFF}ATM 1\n type {FF0000}/atmwithdraw {FFFFFF}or {FF0000}/atmbalance",COLOR_YELLOW_DIALOG,1748.6030,-1862.7672,13.5759,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}ATM 2\n type {FF0000}/atmwithdraw {FFFFFF}or {FF0000}/atmbalance",COLOR_YELLOW_DIALOG,1816.1312,-1557.5348,13.5060,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}ATM 3\n type {FF0000}/atmwithdraw {FFFFFF}or {FF0000}/atmbalance",COLOR_YELLOW_DIALOG,1083.2356,-1817.2999,13.6117,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}ATM 4\n type {FF0000}/atmwithdraw {FFFFFF}or {FF0000}/atmbalance",COLOR_YELLOW_DIALOG,603.1664,-1247.7566,18.4132,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}ATM 5\n type {FF0000}/atmwithdraw {FFFFFF}or {FF0000}/atmbalance",COLOR_YELLOW_DIALOG,1460.1993,-1791.9718,13.5468,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	CreateDynamicPickup(1239, 23, 1412.0304,-1700.1549,13.5395, -1, -1,-1,100.0);//spawn cladire
	
	CreateDynamicPickup(1239, 23, 2000.0482,-1114.3588,27.1250, -1, -1,-1,100.0);//Grape Street Watts
	CreateDynamicPickup(1239, 23, 2486.5198,-1645.2394,14.0772, -1, -1,-1,100.0);//Grove St. 125
	CreateDynamicPickup(1239, 23, 1899.4996,-2005.1289,13.5469, -1, -1,-1,100.0);//Varrio Nuevo Estrada
	CreateDynamicPickup(1239, 23, 1653.7765,-1655.5151,22.5156, -1, -1,-1,100.0);//SA GOV
	CreateDynamicPickup(1239, 23, 755.3737,-1362.3281,13.5131, -1, -1,-1,100.0);//SAN Network
	CreateDynamicPickup(1239, 23, 1172.4932,-1323.3479,15.4030, -1, -1,-1,100.0);//Emergency Dept.

	CreateDynamicPickup(1239, 23, 2131.7759,-1150.5256,24.1473, -1, -1,-1,100.0);// Dealership

	CreateDynamicPickup(1239, 23, 2309.1931,-8.5603,26.7422, -1, -1,-1,100.0);// Create Account
	CreateDynamic3DTextLabel("{FFFFFF}To create an bank account \n type {FF0000}/createaccount",COLOR_YELLOW_DIALOG,2309.1931,-8.5603,26.7422,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		
	CreateDynamicPickup(1239, 23, 2106.4048,-1789.2028,13.5608, -1, -1,-1,100.0);// Pizzaboy
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Pizza Boy\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,2106.4048,-1789.2028,13.5608,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

    CreateDynamicPickup(1239, 23, 1626.3418,-1896.2357,13.5514, -1, -1,-1,100.0);// Street Sweeper
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Street Sweeper\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,1626.3418,-1896.2357,13.5514,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

    CreateDynamicPickup(1239, 23, -77.1289,-1136.4659,1.0781, -1, -1,-1,100.0);// Trucker
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Trucker\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,-77.1289,-1136.4659,1.0781,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

    CreateDynamicPickup(1239, 23, -1060.9696,-1195.4563,129.6936, -1, -1,-1,100.0);// Farmer
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Farmer\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,-1060.9696,-1195.4563,129.6936,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

    CreateDynamicPickup(1239, 23, 1820.2936,-1402.4757,13.6672, -1, -1,-1,100.0);// Bus Driver
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Bus Driver\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,1820.2936,-1402.4757,13.6672,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	CreateDynamicPickup(1239, 23, 2778.8449, -1416.5430, 24.7453, -1, -1,-1,100.0);// Arms Dealer
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Arms Dealer\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,2778.8449, -1416.5430, 24.7453,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	CreateDynamicPickup(1239, 23, 2735.7463, -2551.0705, 13.6457, -1, -1,-1,100.0);// Materials Get
	CreateDynamic3DTextLabel("{FFFFFF}Here you can pick up some {FFA500}materials\n{FFFFFF}type {FFA500}/getmaterials",COLOR_YELLOW_DIALOG,2735.7463, -2551.0705, 13.6457,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	CreateDynamicPickup(1239, 23, 1530.7158, 952.2706, 10.8203, -1, -1,-1,100.0);// Materials Deliver
	CreateDynamic3DTextLabel("{FFFFFF}Here you deliver the {FFA500}materials\n{FFFFFF}type {FFA500}/delivermaterials",COLOR_YELLOW_DIALOG,1530.7158, 952.2706, 10.8203,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	CreateDynamicPickup(1239, 23, 2121.1872, -2274.2968, 20.6718, -1, -1,-1,100.0);// Drugs Dealer
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Drugs Dealer\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,2121.1872, -2274.2968, 20.6718,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

 	CreateDynamicPickup(1239, 23, 2167.7480, -2263.0820, 13.3051, -1, -1,-1,100.0);// /getdrugs
 	CreateDynamic3DTextLabel("{FFFFFF}Here you can pick up some {FFA500}drugs\n{FFFFFF}type {FFA500}/getdrugs",COLOR_YELLOW_DIALOG,2167.7480, -2263.0820, 13.3051,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

    CreateDynamicPickup(1239, 23, 2076.9292,-2047.7618,13.5469, -1, -1,-1,100.0);// Garbageman
	CreateDynamic3DTextLabel("{FFFFFF}To become a {FFA500}Garbageman\n{FFFFFF}type {FFA500}/getjob",COLOR_YELLOW_DIALOG,2076.9292,-2047.7618,13.5469,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	CreateDynamic3DTextLabel("{FFFFFF}To exit from the spawn building \n type {FF0000}/exit",COLOR_YELLOW_DIALOG,-15.9546,32.5763,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To exit from the sport room \n type {FF0000}/exit",COLOR_YELLOW_DIALOG,-1.3711,22.2146,973.4081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To enter in the sport room \n type {FF0000}/enter",COLOR_YELLOW_DIALOG,-1.3946,19.1643,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To find answers at Frequently Asked Questions (FAQ) \n type {FF0000}/faq",COLOR_YELLOW_DIALOG,34.3682,21.3059,973.3081,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
    CreateDynamic3DTextLabel("{FFFFFF}To buy licenses\n type {FF0000}/buylicense\n\n{FFFFFF}To set a number plate\n type {FF0000}/plate",COLOR_YELLOW_DIALOG,36.1739,21.2692,973.3081,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To exit from the spawn building \n type {FF0000}/exit",COLOR_YELLOW_DIALOG,38.1737,33.4262,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To exit from the main room \n type {FF0000}/exit",COLOR_YELLOW_DIALOG,22.1380,29.9197,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To enter in the main room \n type {FF0000}/enter",COLOR_YELLOW_DIALOG,22.1204,27.4664,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To exit from the rest room \n type {FF0000}/exit",COLOR_YELLOW_DIALOG,22.2184,18.6323,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To enter in the rest room \n type {FF0000}/enter",COLOR_YELLOW_DIALOG,22.2507,20.9277,973.3081,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To enter in the spawn building \n type {FF0000}/enter",COLOR_YELLOW_DIALOG,1412.0304,-1700.1549,13.5395,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}To read general information about the server \n type {FF0000}/infos",COLOR_YELLOW_DIALOG,22.7703,35.3976,973.3081,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Type {FF0000}/buyvehicle {FFFFFF}to\npurchase a vehicle.",COLOR_YELLOW_DIALOG,2131.7759,-1150.5256,24.1473,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}1",COLOR_YELLOW_DIALOG,147.348+0.8, -200.28, 348.55-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}2",COLOR_YELLOW_DIALOG,147.358+0.8, -184.27, 348.54-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}3",COLOR_YELLOW_DIALOG,152.128+0.8, -200.26, 348.55-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}4",COLOR_YELLOW_DIALOG,152.168+0.8, -184.27, 348.54-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}5",COLOR_YELLOW_DIALOG,156.818+0.8, -200.27, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}6",COLOR_YELLOW_DIALOG,156.848+0.8, -184.22, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}7",COLOR_YELLOW_DIALOG,156.868+0.8, -184.29, 348.54-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}8",COLOR_YELLOW_DIALOG,156.908+0.8, -200.29, 348.55-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}9",COLOR_YELLOW_DIALOG,161.568+0.8, -200.25, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}10",COLOR_YELLOW_DIALOG,161.658+0.8, -200.25, 348.55-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}11",COLOR_YELLOW_DIALOG,161.668+0.8, -184.21, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}12",COLOR_YELLOW_DIALOG,161.668+0.8, -184.23, 348.54-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}13",COLOR_YELLOW_DIALOG,166.328+0.8, -184.24, 348.54-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}14",COLOR_YELLOW_DIALOG,166.368+0.8, -184.25, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}15",COLOR_YELLOW_DIALOG,166.368+0.8, -200.25, 348.55-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}16",COLOR_YELLOW_DIALOG,166.368+0.8, -200.26, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}17",COLOR_YELLOW_DIALOG,170.558+0.8, -184.32, 348.54-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}18",COLOR_YELLOW_DIALOG,170.578+0.8, -200.25, 348.55-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}19",COLOR_YELLOW_DIALOG,170.878+0.8, -184.23, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Cell {FF0000}20",COLOR_YELLOW_DIALOG,170.878+0.8, -200.29, 344.53-0.5,3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	sirena1 = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0, 0);
	sirena2 = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0, 0);
	sirena3 = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0, 0);
	sirena4 = CreateDynamicObject(19419, 0, 0, 0, 0, 0, 0, 0);
	policecar1 = CreateDynamicObject(19327, 0, 0, 0, 0, 0, 0);
	SetDynamicObjectMaterialText(policecar1, 0, "POLICE", 50, "Arial", 25, 1, -16777216, 0, 1);	
	policecar2 = CreateDynamicObject(19327, 0, 0, 0, 0, 0, 0);	
	SetDynamicObjectMaterialText(policecar2, 0, "POLICE", 50, "Arial", 25, 1, -16777216, 0, 1);	
	policecar3 = CreateDynamicObject(19327, 0, 0, 0, 0, 0, 0);
	SetDynamicObjectMaterialText(policecar3, 0, "POLICE", 50, "Arial", 25, 1, -16777216, 0, 1);	
	policecar4 = CreateDynamicObject(19327, 0, 0, 0, 0, 0, 0);
	SetDynamicObjectMaterialText(policecar4, 0, "POLICE", 50, "Arial", 25, 1, -16777216, 0, 1);	
	
	BusText[0] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 1", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[1] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 2", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[2] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 3", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[3] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 4", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[4] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 5", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[5] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 6", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[6] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 7", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[7] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 8", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[8] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 9", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	BusText[9] = Create3DTextLabel( "{FFFFFF}W | {FFA500}Bus no. 10", COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	
	LoadSystems();

 	for(new c=0; c < MAX_VEHICLES; c++)
	{
		Gas[c] = 100;
	}
	
	printf("\n\n[ -- ] [ Gamemode STARTED ] [ -- ]\n\n");
	SetTimer("TakeAd", 30 * 1000, false);
	return 1;
}

function GetXPPoints(playerid)
{
	new level = PlayerData[playerid][Level];
    if (level < 5)  return (level*100);
	if (level > 4 && level < 10) return ((level-1)*150);
	if (level == 10) return 1750; if(level == 11) return 2000; if(level == 12) return 2250; if(level == 13) return 2500; if(level == 14) return 2750;
	if (level > 14 && level < 20) return (level*250-1350);
	if (level > 19 && level < 25) return (level*300-2300);
    if (level > 24 && level < 30) return (level*400-4700);
    if (level > 29 && level < 35) return (level*550-9050);
    if (level > 34 && level < 40) return (level*650-14150);
    if (level > 39 && level < 45) return (level*950-21950);
    if (level > 44 && level < 50) return (level*1150-30750);
    if (level > 49 && level < 55) return (level*1400-43000);
    if (level > 54 && level < 60) return (level*1650-56500);
    if (level > 59 && level < 65) return (level*2000-77150);
    if (level > 64 && level < 70) return (level*2400-102750);
    if (level > 69 && level < 75) return (level*2800-130350);
    if (level > 74 && level < 80) return (level*3300-167350);
    if (level > 79 && level < 85) return (level*3800-206850);
    if (level > 84 && level < 90) return (level*4400-257250);
    if (level > 89 && level < 95) return (level*5000-310650);
    if (level > 94 && level < 100) return (level*5700-376450);
    if (level > 99) return (level*6400-445750);
    return -1;
}

function RandomEvent()
{
	new result = random(2);
	if(result == 0) CSEvent();
	if(result == 1) KartEvent();
	return 1;
}

function UsedTimer()
{
	new str[256], string[128];
 	for(new i = 1; i < sizeof(Turfs); i++)
	{
		if(WarInfo[i][wTime] > 0)
		{
			WarInfo[i][wTime] -= 1;
			new attackers = WarInfo[i][wAttacker];
			new defenders = WarInfo[i][wFaction];
			foreach(Player, j)
			{
				if(IsPlayerInTurf(j,i) == 1)
				{
					if((PlayerData[j][Member] + PlayerData[j][Leader]) == attackers)
					{
						WarScore[j][i] +=  1;
					}
					if((PlayerData[j][Member] + PlayerData[j][Leader]) == defenders)
					{
						WarScore[j][i] += 1;
					}
				}
			}
			if(WarInfo[i][wTime] == 1)
			{
				new atscore = 0;
				new defscore = 0;
				new winner;
				foreach(Player, j)
				{
					if((PlayerData[j][Member] + PlayerData[j][Leader]) == attackers)
					{
					    WarScore[j][i] /= 10;
						atscore += WarScore[j][i];
						GangZoneStopFlashForPlayer(j,Turfs[i]);
						format(string,sizeof(string),"The war between %s and %s for turf %d ended. Calculating the score...",FactionName(attackers),FactionName(defenders),i);
						SendClientMessage(j, TEAM_AZTECAS_COLOR,string);
					}
					if((PlayerData[j][Member] + PlayerData[j][Leader]) == defenders)
					{
					    WarScore[j][i] /= 10;
						defscore += WarScore[j][i];
						GangZoneStopFlashForPlayer(j,Turfs[i]);
						format(string,sizeof(string),"The war between %s and %s for turf %d ended. Calculating the score...",FactionName(attackers),FactionName(defenders),i);
						SendClientMessage(j, TEAM_AZTECAS_COLOR,string);
					}
				}
				War[attackers] = 0;
				War[defenders] = 0;
				
				if(atscore >= defscore)
					winner = 1;
				if(defscore > atscore)
					winner = 2;
				foreach(Player, j)
				{
					if(((PlayerData[j][Member] + PlayerData[j][Leader]) == attackers) || ((PlayerData[j][Member] + PlayerData[j][Leader]) == defenders))
					{
						if(winner == 1)
						{
							format(string,sizeof(string),"%s won turf %d Score: %s %i | %i %s",FactionName(WarInfo[i][wAttacker]),i,FactionName(WarInfo[i][wAttacker]),atscore,defscore,FactionName(WarInfo[i][wFaction]));
							SendClientMessage(j, TEAM_AZTECAS_COLOR,string);
							new score = WarScore[j][i];
							format(string,sizeof(string),"Your score was: %i (%i deaths)", score, WarDeaths[j][i]);
							SendClientMessage(j, TEAM_AZTECAS_COLOR,string);
							TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
							
							mysql_format(SQL, str,256,"UPDATE `turfs` SET `Owned`='%d' WHERE `ID`='%d'",WarInfo[i][wAttacker],i);
							mysql_tquery(SQL, str, "", "");
                            
							//Change
						}
						if(winner == 2)
						{
							format(string,sizeof(string),"%s won turf %d Score: %s %i | %i %s",FactionName(WarInfo[i][wFaction]),i,FactionName(WarInfo[i][wFaction]),defscore,atscore,FactionName(WarInfo[i][wAttacker]));
							SendClientMessage(j, TEAM_AZTECAS_COLOR,string);
							new score = WarScore[j][i];
							format(string,sizeof(string),"Your score was: %i (%i deaths)", score, WarDeaths[j][i]);
							SendClientMessage(j, TEAM_AZTECAS_COLOR,string);
						}
						WarScore[j][i] = 0;
						WarDeaths[j][i] = 0;
					}
					GangZoneHideForPlayer(j,i);
					if(TurfInfo[i][zOwned] == 2)
					{
						GangZoneShowForPlayer(j, Turfs[i], TurfColorGrove);
					}
					if(TurfInfo[i][zOwned] == 3)
					{
						GangZoneShowForPlayer(j, Turfs[i], TurfColorGSW);
					}
					if(TurfInfo[i][zOwned] == 4)
					{
						GangZoneShowForPlayer(j, Turfs[i], TurfColorVNE);
					}
				}
				WarInfo[i][wTime] = 0;
				WarInfo[i][wFaction] = 0;
				WarInfo[i][wAttacker] = 0;
				if(winner == 1)
				{
					SafeBox[attackers][sbMoney] += WarInfo[i][wPrice];
					SafeBox[defenders][sbMoney] -= WarInfo[i][wPrice];
					
					format(string, sizeof(string), "withdraw %d money (WAR).", WarInfo[i][wPrice]);
					SafeboxLog(defenders,-1,string);
					
					format(string, sizeof(string), "deposit %d money (WAR).", WarInfo[i][wPrice]);
					SafeboxLog(attackers,-1,string);
				}
				if(winner == 2)
				{
					SafeBox[attackers][sbMoney] -= WarInfo[i][wPrice];
					SafeBox[defenders][sbMoney] += WarInfo[i][wPrice];
					
					format(string, sizeof(string), "withdraw %d money (WAR).", WarInfo[i][wPrice]);
					SafeboxLog(attackers,-1,string);
					
					format(string, sizeof(string), "deposit %d money (WAR).", WarInfo[i][wPrice]);
					SafeboxLog(defenders,-1,string);
				}
				
    			mysql_format(SQL, str,128,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[attackers][sbMoney], attackers);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str,128,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[defenders][sbMoney], defenders);
				mysql_tquery(SQL, str, "", "");
			}
		}
	}

	new hours, minutes, year, month, day;
	new datestr[128], timestr[32];
	gettime(hours, minutes);
	getdate(year, month, day);
	format(datestr,128,"%02d.%02d.%d", day, month, year);
	format(timestr,32,"%02d:%02d",hours,minutes);
	TextDrawSetString(txtTimeDisp,timestr);
	TextDrawSetString(txtDateDisp,datestr);
	
	if(minutes == 0 || minutes == 30)
	{
		RandomEvent();
		SetWorldTime(hours);
	}
	
	foreach(Player, i)
	{
	    new Float:health;
    	GetPlayerHealth(i, health);
    	SetPlayerHealth(i, health-1.0);
		if(PlayerData[i][TrackLose] >= 0)
		{
			if(PlayerData[i][WantedLevel] == 0)
			{
				PlayerData[i][TrackLose] = -1;
			}
			else
			{
				PlayerData[i][TrackLose] -= 1;
				mysql_format(SQL, str,128,"UPDATE `users` SET `TrackLose`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][TrackLose],PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			if(PlayerData[i][TrackLose] == 0)
			{
				PlayerData[i][WantedLevel] -= 1;
				SetPlayerWantedLevel(i,PlayerData[i][WantedLevel]);
				mysql_format(SQL, str,128,"UPDATE `users` SET `WantedLevel`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][WantedLevel],PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");
				
				SendClientMessage(i, COLOR_WHITE,"{5181EE}Wanted: {FFFFFF}You lose 1 wanted level.");
				format(string, sizeof(string), "HQ: Suspect %s lose 1 wanted level, current wanted level: %d.", PlayerData[i][Name],PlayerData[i][WantedLevel]);
				SendRadioMessage(1, 0x3350FFFF, string);
				
				if(PlayerData[i][WantedLevel] == 0)
				{
					SendClientMessage(i, COLOR_WHITE,"{5181EE}Wanted: {FFFFFF}You lose all stars.");
					format(string, sizeof(string), "HQ: Suspect %s losed all wanted levels.", PlayerData[i][Name]);
					SendRadioMessage(1, 0x3350FFFF, string);
					PlayerData[i][MDC] = 0;
				}
				else
				{
					PlayerData[i][TrackLose] = 30;
				}
			}
		}
		if(IsPlayerPaused(i) == false && PlayerData[i][IsLoggedIn] == true && PlayerAFK[i] == 0 && Sleeping[i] == 0)
		{
		    PlayerData[i][Exp] += 1;
		    OnExp[i] += 1;
			if(OnExp[i] >= 60)
			{
			    new checks = PlayerData[i][Level] * 300;
			    new account = PlayerData[i][Bank];
		    	new interest = account / 300;
		    	PlayerData[i][Bank] += interest;
				if(PlayerData[i][FPunish] > 0) PlayerData[i][FPunish] -= 1;
			    SendClientMessage(i, COLOR_WHITE, "________ BANK STATEMENT ________");
				format(string, sizeof(string), "  Paycheck: $%s", Decimal(checks));
				SendClientMessage(i, COLOR_GRAD1, string);
				format(string, sizeof(string), "  Old Balance: $%s | Interest rate: 0.1%%", Decimal(account));
				SendClientMessage(i, COLOR_GRAD1, string);
				format(string, sizeof(string), "  New balance: $%s", Decimal(PlayerData[i][Bank]));
				SendClientMessage(i, COLOR_GRAD5, string);
				GivePlayerCash(i, checks);
				
				mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d',`FPunish`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][Bank],PlayerData[i][FPunish],PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");
				
				OnExp[i] = 0;
			}
			
		    PlayerData[i][TotalExp] += 1;
		    
		    mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d',`OnExp`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],OnExp[i],PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");
			
			if(PlayerData[i][CarLic] > 0) PlayerData[i][CarLic] -= 1;
			if(PlayerData[i][FlyLic] > 0) PlayerData[i][FlyLic] -= 1;
			if(PlayerData[i][BoatLic] > 0) PlayerData[i][BoatLic] -= 1;
			if(PlayerData[i][FishLic] > 0) PlayerData[i][FishLic] -= 1;
			if(PlayerData[i][GunLic] > 0) PlayerData[i][GunLic] -= 1;
			if(PlayerData[i][MatsLic] > 0) PlayerData[i][MatsLic] -= 1;

			if(PlayerData[i][CarLic] == 10) SendClientMessage(i, RED, "WARNING: Your driving license will expire in 10 minutes.");
			if(PlayerData[i][FlyLic] == 10) SendClientMessage(i, RED, "WARNING: Your flying license will expire in 10 minutes.");
			if(PlayerData[i][BoatLic] == 10) SendClientMessage(i, RED, "WARNING: Your sailing license will expire in 10 minutes.");
			if(PlayerData[i][FishLic] == 10) SendClientMessage(i, RED, "WARNING: Your fishing license will expire in 10 minutes.");
			if(PlayerData[i][GunLic] == 10) SendClientMessage(i, RED, "WARNING: Your weapon license will expire in 10 minutes.");
			if(PlayerData[i][MatsLic] == 10) SendClientMessage(i, RED, "WARNING: Your materials license will expire in 10 minutes.");
			
			mysql_format(SQL, str, 128, "UPDATE `users` SET `CarLic`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][CarLic], PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");

			mysql_format(SQL, str, 128,"UPDATE `users` SET `FlyLic`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][FlyLic], PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");

			mysql_format(SQL, str, 128,"UPDATE `users` SET `BoatLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][BoatLic], PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");

			mysql_format(SQL, str, 128,"UPDATE `users` SET `FishLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][FishLic], PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");

			mysql_format(SQL, str, 128,"UPDATE `users` SET `GunLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][GunLic], PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");

			mysql_format(SQL, str, 128,"UPDATE `users` SET `MatsLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][MatsLic], PlayerData[i][ID]);
			mysql_tquery(SQL, str, "", "");
			
			new XPneed = GetXPPoints(i);
			if(Allowed[i] == 0)
			{
				format(string, 100, "%d / %d XP", PlayerData[i][Exp], XPneed);
				PlayerTextDrawSetString(i, XPRemain, string);

				format(string, 100, "Time Left: %d min", XPneed-PlayerData[i][Exp]);
				PlayerTextDrawSetString(i, XPTLeft, string);

				format(string, 100, "Level: %d (%d XP)", PlayerData[i][Level],PlayerData[i][TotalExp]);
				PlayerTextDrawSetString(i, XPTotal, string);

				new Float:percent;
				percent = ((PlayerData[i][Exp] * 100) / XPneed);
				SetPlayerProgressBarValue(i, barxp, percent);
				HidePlayerProgressBar(i, barxp);
				ShowPlayerProgressBar(i, barxp);
			}

			
			if(PlayerData[i][Exp] >= XPneed)
			{//Level Up
			    PlayerData[i][Level] += 1;
			    SetPlayerScore(i, PlayerData[i][Level]);
				new money;
			    if(PlayerData[i][Level] < 8 && PlayerData[i][Level] > 0) money = PlayerData[i][Level] * 1500;
				else money = PlayerData[i][Level] * 500;
			    GivePlayerCash(i, money);
			    format(string, sizeof(string), "You recieve %d money for level up.", money);
			    SendClientMessage(i, COLOR_WHITE, string);
			    PlayerData[i][Exp] = 0;
		    	mysql_format(SQL, str, 256,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d',`Level`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][Level],PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");
				
			}
		}
		if(Sleeping[i] == 1)
		{
			SleepXP[i] += 1;
			if(SleepXP[i] == 5)
			{
				PlayerData[i][Exp] += 1;
				OnExp[i] += 1;
				if(OnExp[i] >= 120)
				{
					new checks = PlayerData[i][Level] * 300;
					new account = PlayerData[i][Bank];
					new interest = account / 300;
					PlayerData[i][Bank] += interest;
					if(PlayerData[i][FPunish] > 0) PlayerData[i][FPunish] -= 1;
					SendClientMessage(i, COLOR_WHITE, "________ BANK STATEMENT ________");
					format(string, sizeof(string), "  Paycheck: $%s", Decimal(checks));
					SendClientMessage(i, COLOR_GRAD1, string);
					format(string, sizeof(string), "  Old Balance: $%s | Interest rate: 0.1%%", Decimal(account));
					SendClientMessage(i, COLOR_GRAD1, string);
					format(string, sizeof(string), "  New balance: $%s", Decimal(PlayerData[i][Bank]));
					SendClientMessage(i, COLOR_GRAD5, string);
					GivePlayerCash(i, checks);
					
					mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d',`FPunish`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][Bank],PlayerData[i][FPunish],PlayerData[i][ID]);
					mysql_tquery(SQL, str, "", "");
					
					OnExp[i] = 0;
				}
				
				PlayerData[i][TotalExp] += 1;
				
				mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d',`OnExp`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],OnExp[i],PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");
				
				if(PlayerData[i][CarLic] > 0) PlayerData[i][CarLic] -= 1;
				if(PlayerData[i][FlyLic] > 0) PlayerData[i][FlyLic] -= 1;
				if(PlayerData[i][BoatLic] > 0) PlayerData[i][BoatLic] -= 1;
				if(PlayerData[i][FishLic] > 0) PlayerData[i][FishLic] -= 1;
				if(PlayerData[i][GunLic] > 0) PlayerData[i][GunLic] -= 1;
				if(PlayerData[i][MatsLic] > 0) PlayerData[i][MatsLic] -= 1;

				if(PlayerData[i][CarLic] == 10) SendClientMessage(i, RED, "WARNING: Your driving license will expire in 10 minutes.");
				if(PlayerData[i][FlyLic] == 10) SendClientMessage(i, RED, "WARNING: Your flying license will expire in 10 minutes.");
				if(PlayerData[i][BoatLic] == 10) SendClientMessage(i, RED, "WARNING: Your sailing license will expire in 10 minutes.");
				if(PlayerData[i][FishLic] == 10) SendClientMessage(i, RED, "WARNING: Your fishing license will expire in 10 minutes.");
				if(PlayerData[i][GunLic] == 10) SendClientMessage(i, RED, "WARNING: Your weapon license will expire in 10 minutes.");
				if(PlayerData[i][MatsLic] == 10) SendClientMessage(i, RED, "WARNING: Your materials license will expire in 10 minutes.");
				
				mysql_format(SQL, str, 128, "UPDATE `users` SET `CarLic`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][CarLic], PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str, 128,"UPDATE `users` SET `FlyLic`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][FlyLic], PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str, 128,"UPDATE `users` SET `BoatLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][BoatLic], PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str, 128,"UPDATE `users` SET `FishLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][FishLic], PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str, 128,"UPDATE `users` SET `GunLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][GunLic], PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str, 128,"UPDATE `users` SET `MatsLic`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][MatsLic], PlayerData[i][ID]);
				mysql_tquery(SQL, str, "", "");
				
				new XPneed = GetXPPoints(i);
				if(Allowed[i] == 0)
				{
					format(string, 100, "%d / %d XP", PlayerData[i][Exp], XPneed);
					PlayerTextDrawSetString(i, XPRemain, string);

					format(string, 100, "Time Left: %d min", XPneed-PlayerData[i][Exp]);
					PlayerTextDrawSetString(i, XPTLeft, string);

					format(string, 100, "Level: %d (%d XP)", PlayerData[i][Level],PlayerData[i][TotalExp]);
					PlayerTextDrawSetString(i, XPTotal, string);

					new Float:percent;
					percent = ((PlayerData[i][Exp] * 100) / XPneed);
					SetPlayerProgressBarValue(i, barxp, percent);
					HidePlayerProgressBar(i, barxp);
					ShowPlayerProgressBar(i, barxp);
				}

				
				if(PlayerData[i][Exp] >= XPneed)
				{//Level Up
					PlayerData[i][Level] += 1;
					SetPlayerScore(i, PlayerData[i][Level]);
					new money;
					if(PlayerData[i][Level] < 8 && PlayerData[i][Level] > 0) money = PlayerData[i][Level] * 1500;
					else money = PlayerData[i][Level] * 500;
					GivePlayerCash(i, money);
					format(string, sizeof(string), "You recieve %d money for level up.", money);
					SendClientMessage(i, COLOR_WHITE, string);
					PlayerData[i][Exp] = 0;
					mysql_format(SQL, str, 256,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d',`Level`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][Level],PlayerData[i][ID]);
					mysql_tquery(SQL, str, "", "");
					
				}
				SleepXP[i] = 0;
			}
		}
	}
}

function Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

function OtherTimer()
{
	new str[128], string[128];
	foreach(Player, i)
	{
		if (PlayerToPoint(2.0, i, 2486.5198,-1645.2394,14.0772))
		{
		    GameTextForPlayer(i, "~w~HQ Groove St. 125", 5000, 1);
		}
        if (PlayerToPoint(2.0, i, 1172.4932,-1323.3479,15.4030))
		{
		    GameTextForPlayer(i, "~w~HQ Emergency Dept.", 5000, 1);
		}
		if (PlayerToPoint(2.0, i, 755.3737,-1362.3281,13.5131))
		{
		    GameTextForPlayer(i, "~w~HQ SAN Network", 5000, 1);
		}
		if (PlayerToPoint(2.0, i, 1653.7765,-1655.5151,22.5156))
		{
		    GameTextForPlayer(i, "~w~HQ SA Gov", 5000, 1);
		}
		if (PlayerToPoint(2.0, i, 1899.4996,-2005.1289,13.5469))
		{
		    GameTextForPlayer(i, "~w~HQ Varrio Nuevo Estrada", 5000, 1);
		}
		if (PlayerToPoint(2.0, i, 2000.0482,-1114.3588,27.1250))
		{
		    GameTextForPlayer(i, "~w~HQ Grape Street Watts", 5000, 1);
		}
	    if(PlayerData[i][IsLoggedIn] == false && ByPASS[i] == 0)
		{
	        if (AFKLoggin[i] != -1)
			{
	            AFKLoggin[i] -= 1;
	            if(AFKLoggin[i] == 0)
				{
	                SendClientMessage(i, COLOR_LIGHTRED, "** You haven't login in 40 seconds (Kicked) **");
                    KickEx(i);
	            }
	        }
	    }
	    if(PlayerData[i][Cash] != GetPlayerMoney(i))//
     	{
			new hack = GetPlayerMoney(i) - PlayerData[i][Cash];
			if(hack!=0)
			{
				ResetMoneyBar(i);
				UpdateMoneyBar(i,PlayerData[i][Cash]);
			}
    	}
    	new Float: oldX[MAX_PLAYERS], Float: oldY[MAX_PLAYERS], Float: oldZ[MAX_PLAYERS];
		oldX[i] = PosX[i];
		oldY[i] = PosY[i];
		oldZ[i] = PosZ[i];
		GetPlayerPos(i,PosX[i],PosY[i],PosZ[i]);
		new Float:distanta[MAX_PLAYERS];
		distanta[i] = GetDistanceBetweenPoints(oldX[i],oldY[i],oldZ[i],PosX[i],PosY[i],PosZ[i]);
		if(distanta[i] == 0) PlayerAFK[i] = 1;
		else PlayerAFK[i] = 0;
		//new faction = PlayerData[i][Member] + PlayerData[i][Leader];
		if(PlayerData[i][Muted] > 0)
	    {
			if(PlayerData[i][MutedTime] > 0) PlayerData[i][MutedTime] -= 1;
			if(PlayerData[i][MutedTime] <= 0)
			{
			    PlayerData[i][MutedTime] = 0;
				PlayerData[i][Muted] = 0;
				
				mysql_format(SQL,str,128,"UPDATE `users` SET `Muted`='0', `MutedTime`='0' WHERE `id`='%d'", PlayerData[i][ID]);
				mysql_tquery(SQL,str, "", "");
				
				SendClientMessage(i, 0xFFFF00AA, "* Your time of silence has ended.");
				format(string, 128, "Mute time has ended!");
				GameTextForPlayer(i, string, 5000, 1);
			}
		}
		if(PlayerData[i][PlayerCuffed] > 1)
		{
		    PlayerData[i][PlayerCuffed] -= 1;
			if(PlayerData[i][PlayerCuffed] == 0)
			{
				GameTextForPlayer(i, "~r~You broke the Cuffs, you are free!", 2500, 3);
		        TogglePlayerControllable(i, 1);
		        PlayerData[i][PlayerCuffed] = 0;
			}
		}
		if(PlayerData[i][Jailed] == 1)
	    {
			if(PlayerData[i][JailTime] > 0) PlayerData[i][JailTime] -= 1;
			mysql_format(SQL,str,128,"UPDATE `users` SET `JailTime`='%d' WHERE `id`='%d'", PlayerData[i][JailTime], PlayerData[i][ID]);
			mysql_tquery(SQL,str, "", "");
			if(PlayerData[i][JailTime] <= 0)
			{
				PlayerData[i][JailTime] = 0;
				PlayerData[i][Jailed] = 0;
				
				mysql_format(SQL,str,128,"UPDATE `users` SET `Jailed`='0', `JailTime`='0' WHERE `id`='%d'", PlayerData[i][ID]);
				mysql_tquery(SQL,str, "", "");
				
				SpawnPlayer(i);
			}
			
		}
		if(PlayerData[i][PlayerToFind] >= 0)
		{
			new id = PlayerData[i][PlayerToFind];
			if(PlayerData[id][InBizz] == -1 && PlayerData[id][InHouse] == -1 && PlayerData[id][InHQ] == -1)
			{
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(id, X,Y,Z);
				SetPlayerCheckpoint(i, X,Y,Z, 3);
			}
			else
			{
				if(PlayerData[id][InBizz] > -1)
				{
					new biz = PlayerData[id][InBizz];
					SetPlayerCheckpoint(i, BizzInfo[biz][bEntranceX],BizzInfo[biz][bEntranceY],BizzInfo[biz][bEntranceZ], 3);
				}
				else if(PlayerData[id][InHouse] > -1)
				{
					new house = PlayerData[id][InHouse];
					SetPlayerCheckpoint(i, HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez], 3);
				}
				else if(PlayerData[id][InHQ] == 2) { SetPlayerCheckpoint(i, 2486.5198,-1645.2394,14.0772, 3); }
				else if(PlayerData[id][InHQ] == 3) { SetPlayerCheckpoint(i, 2000.0482,-1114.3588,27.1250, 3); }
				else if(PlayerData[id][InHQ] == 4) { SetPlayerCheckpoint(i, 1899.4996,-2005.1289,13.5469, 3); }
				else if(PlayerData[id][InHQ] == 5) { SetPlayerCheckpoint(i, 1653.7765,-1655.5151,22.5156, 3); }
				else if(PlayerData[id][InHQ] == 6) { SetPlayerCheckpoint(i, 755.3737,-1362.3281,13.5131, 3); }
				else if(PlayerData[id][InHQ] == 7) { SetPlayerCheckpoint(i, 1172.4932,-1323.3479,15.4030, 3); }
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && PlayerData[i][Speedlimit])
		{//Speedlimit
			new a, b, c;
			GetPlayerKeys(i, a, b ,c);
			new speed = PlayerData[i][Speed];
			if(a == 8 && speed > PlayerData[i][Speedlimit])
			{
				new newspeed = speed - PlayerData[i][Speedlimit];
				ModifyVehicleSpeed(GetPlayerVehicleID(i), -newspeed);
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsPlayerNPC(i))
		{//Radar
			if(PlayerData[i][RadarUse] > 0)
			{
				new Float:x1, Float:y1, Float:z1;
				GetPlayerPos(i,x1,y1,z1);
				foreach(Player, o)
				{
					if(o != i)
					{
						if(IsPlayerInRangeOfPoint(o, 20, x1,y1,z1))
			      		{
							new factiono = PlayerData[o][Member] + PlayerData[o][Leader];
							new speed = PlayerData[o][Speed];
							if(speed >= PlayerData[i][RadarUse] && GetPlayerState(o) == PLAYER_STATE_DRIVER)
							{
							    if(factiono != 1 || PlayerData[o][OnDuty]  == 0)
							    {
									format(string, sizeof(string), "%s(%d) is driving with %.0d km/h, Radar Limit: %d km/h!",PlayerData[o][Name],o,speed,PlayerData[i][RadarUse]);
			     			 		SendClientMessage(i, COLOR_REDD, string);
			     			 		format(string, sizeof(string), "You were caught by %s's(%d) radar with %.0d km/h, Radar Limit: %d km/h!",PlayerData[i][Name],i,speed,PlayerData[i][RadarUse]);
			     			 		SendClientMessage(o, COLOR_REDD, string);
								}
							}
						}
					}
				}
				if(PlayerData[i][Speed] > 1)
				{
					PlayerData[i][RadarUse] = 0;
					SendClientMessage(i, COLOR_LIGHTBLUE2, "You stopped your radar.");
				}
			}
		}
		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && PlayerData[i][Admin] < 1)
		{
            new reasonn[64];
			format(reasonn,sizeof(reasonn),"Jetpack");
			BanA(i,"AdmBot",reasonn,0,0,1);
		}
	}
}

public OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PlayerData[playerid][PlayerToFind] >= 0)		
	{
		PlayerData[playerid][PlayerToFind] = -1;
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	if(MedicAns[playerid] >= 0)
	{
	    GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		DisablePlayerCheckpoint(playerid);
		MedicCall[MedicAns[playerid]] = -1;
		MedicAns[playerid] = -1;
		return 1;
	}
	if(PPizzaCP[playerid] >= 0 && PPizzaCP[playerid] < 100 && StaticVeh[vehicleid][vJob] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SetPlayerCheckpoint(playerid, 2106.4048,-1789.2028,13.5608, 4.0);
	    SetDestination(playerid, 2106.4048,-1789.2028,13.5608);
	    PPizzaCP[playerid] += 100 ;
	    return 1;
	}
	if(PPizzaCP[playerid] >= 100 && StaticVeh[vehicleid][vJob] == 1)
	{//Ajunge la final
	    PPizzaCP[playerid] -= 100;
	    new money = floatround(PizzaCP[PPizzaCP[playerid]][3]);
	    GivePlayerCash(playerid, money);
	    format(string,sizeof(string),"~g~$%d",money);
	    GameTextForPlayer(playerid, string, 3000, 1);
	    
	    new randn = random(sizeof(PizzaCP));
	    SetPlayerCheckpoint(playerid, PizzaCP[randn][0], PizzaCP[randn][1], PizzaCP[randn][2], 4.0);
        SetDestination(playerid, PizzaCP[randn][0], PizzaCP[randn][1], PizzaCP[randn][2]);
		PPizzaCP[playerid] = randn;
	    return 1;
	}
	if(PFarmerCP[playerid] >= 0 && PFarmerCP[playerid] < 100 && StaticVeh[vehicleid][vJob] == 4)
	{
	    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
			new money = 3 + random(7);
		    GivePlayerCash(playerid, money);
		    format(string,sizeof(string),"~g~$%d",money);
		    GameTextForPlayer(playerid, string, 3000, 1);

		    DisablePlayerCheckpoint(playerid);
		    new randn = random(sizeof(FarmerCP));
		    SetPlayerCheckpoint(playerid, FarmerCP[randn][0], FarmerCP[randn][1], FarmerCP[randn][2], 4.0);
		    PFarmerCP[playerid] += 100;
	    }
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You haven't attached a trailer.");
	    return 1;
	}
	if(PFarmerCP[playerid] >= 100 && StaticVeh[vehicleid][vJob] == 4)
	{
	    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
			new money = 3 + random(7);
		    GivePlayerCash(playerid, money);
		    format(string,sizeof(string),"~g~$%d",money);
		    GameTextForPlayer(playerid, string, 3000, 1);

		    DisablePlayerCheckpoint(playerid);
		    new randn = random(sizeof(FarmerCP));
		    SetPlayerCheckpoint(playerid, FarmerCP[randn][0], FarmerCP[randn][1], FarmerCP[randn][2], 4.0);
		    PFarmerCP[playerid] = randn;
	    }
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You haven't attached a trailer.");
	    return 1;
	}
	if(PTruckerCP[playerid] >= 0 && PTruckerCP[playerid] < 100 && StaticVeh[vehicleid][vJob] == 5)
	{
	    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
			DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, -77.9437,-1125.4424,1.6709, 4.0);
		    SetDestination(playerid, -77.9437,-1125.4424,1.6709);
		    PTruckerCP[playerid] += 100;
		    new trailler = GetVehicleTrailer(GetPlayerVehicleID(playerid));
			SetVehicleToRespawn(trailler);
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You haven't attached a trailer.");
	    return 1;
	}
	if(PTruckerCP[playerid] >= 100 && StaticVeh[vehicleid][vJob] == 5)
	{
	    PTruckerCP[playerid] -= 100;
	    new money = floatround(TruckerCP[PTruckerCP[playerid]][3]);
	    GivePlayerCash(playerid, money);
	    format(string,sizeof(string),"~g~$%d",money);
	    GameTextForPlayer(playerid, string, 3000, 1);

	    new randn = random(sizeof(TruckerCP));
	    SetPlayerCheckpoint(playerid, TruckerCP[randn][0], TruckerCP[randn][1], TruckerCP[randn][2], 4.0);
        SetDestination(playerid, TruckerCP[randn][0], TruckerCP[randn][1], TruckerCP[randn][2]);
		PTruckerCP[playerid] = randn;
	    return 1;
	}
	if(PSweeperCP[playerid] >= 0 && StaticVeh[vehicleid][vJob] == 2)
	{
	    PSweeperCP[playerid] += 1;
	    if(PSweeperCP[playerid] == 24)
	    {
	        new money = 86 + random(14);
	        GivePlayerCash(playerid, money);
	    	format(string,sizeof(string),"~g~$%d",money);
	    	GameTextForPlayer(playerid, string, 3000, 1);
	        PSweeperCP[playerid] = 0;
	        SetPlayerCheckpoint(playerid, SweeperCP[PSweeperCP[playerid]][0], SweeperCP[PSweeperCP[playerid]][1], SweeperCP[PSweeperCP[playerid]][2], 4.0);
	    	SetDestination(playerid, SweeperCP[PSweeperCP[playerid]][0], SweeperCP[PSweeperCP[playerid]][1], SweeperCP[PSweeperCP[playerid]][2]);
	        return 1;
	    }
	    SetPlayerCheckpoint(playerid, SweeperCP[PSweeperCP[playerid]][0], SweeperCP[PSweeperCP[playerid]][1], SweeperCP[PSweeperCP[playerid]][2], 4.0);
	    SetDestination(playerid, SweeperCP[PSweeperCP[playerid]][0], SweeperCP[PSweeperCP[playerid]][1], SweeperCP[PSweeperCP[playerid]][2]);
	    return 1;
	}
	if(PGarbageCP[playerid] >= 0 && StaticVeh[vehicleid][vJob] == 3)
	{
	    PGarbageCP[playerid] += 1;
	    if(PGarbageCP[playerid] == 11)
	    {
	        new money = 135 + random(15);
	        GivePlayerCash(playerid, money);
	    	format(string,sizeof(string),"~g~$%d",money);
	    	GameTextForPlayer(playerid, string, 3000, 1);
	        PGarbageCP[playerid] = 0;
	        SetPlayerCheckpoint(playerid, GarbageCP[PGarbageCP[playerid]][0], GarbageCP[PGarbageCP[playerid]][1], GarbageCP[PGarbageCP[playerid]][2], 4.0);
	    	SetDestination(playerid, GarbageCP[PGarbageCP[playerid]][0], GarbageCP[PGarbageCP[playerid]][1], GarbageCP[PGarbageCP[playerid]][2]);
	        return 1;
	    }
	    SetPlayerCheckpoint(playerid, GarbageCP[PGarbageCP[playerid]][0], GarbageCP[PGarbageCP[playerid]][1], GarbageCP[PGarbageCP[playerid]][2], 4.0);
	    SetDestination(playerid, GarbageCP[PGarbageCP[playerid]][0], GarbageCP[PGarbageCP[playerid]][1], GarbageCP[PGarbageCP[playerid]][2]);
	    return 1;
	}
	if(PBusCP[playerid] >= 0 && StaticVeh[vehicleid][vJob] == 6)
	{
		new tmpcar = VJob[playerid];
		PBusCP[playerid] += 1;
		if(PBusCP[playerid] == 7)
		{
		    new money = 14 + random(6);
	        GivePlayerCash(playerid, money);
	    	format(string,sizeof(string),"~g~$%d",money);
	    	GameTextForPlayer(playerid, string, 3000, 1);
            PBusCP[playerid] = 0;
            SetPlayerCheckpoint(playerid, BusStations[Line1[PBusCP[playerid]]][bsX], BusStations[Line1[PBusCP[playerid]]][bsY], BusStations[Line1[PBusCP[playerid]]][bsZ], 3.0);
			SetDestination(playerid, BusStations[Line1[PBusCP[playerid]]][bsX], BusStations[Line1[PBusCP[playerid]]][bsY], BusStations[Line1[PBusCP[playerid]]][bsZ]);
			new text[128];
			format(text,sizeof(text),"{FFFFFF}1 | {FFA500}%s",BusStations[Line1[PBusCP[playerid]]][bsName]);
			UpdateBusText(tmpcar,text);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeT", 3000, 0, "d", playerid);
			return 1;
		}
		new money = 14 + random(6);
        GivePlayerCash(playerid, money);
    	format(string,sizeof(string),"~g~$%d",money);
    	GameTextForPlayer(playerid, string, 3000, 1);
	    SetPlayerCheckpoint(playerid, BusStations[Line1[PBusCP[playerid]]][bsX], BusStations[Line1[PBusCP[playerid]]][bsY], BusStations[Line1[PBusCP[playerid]]][bsZ], 3.0);
		SetDestination(playerid, BusStations[Line1[PBusCP[playerid]]][bsX], BusStations[Line1[PBusCP[playerid]]][bsY], BusStations[Line1[PBusCP[playerid]]][bsZ]);
		new text[128];
		format(text,sizeof(text),"{FFFFFF}1 | {FFA500}%s",BusStations[Line1[PBusCP[playerid]]][bsName]);
		UpdateBusText(tmpcar,text);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezeT", 3000, 0, "d", playerid);
		return 1;
	}
	if(DestinationSet[playerid] == 1)  RemoveDestination(playerid);
	DisablePlayerCheckpoint(playerid);
    return 1;
}

public OnGameModeExit()
{
    mysql_tquery(SQL, "UPDATE `users` SET `online` = '0'", "", "");
	mysql_close(SQL); // Closing the MySQL connection
	return 1;
}

function ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	return 1;
}

public OnPlayerConnect(playerid)
{
	PlayerAFK[playerid] = 0; AFKLoggin[playerid] = 40; ByPASS[playerid] = 0; Mats[playerid] = 0; Allowed[playerid] = 0; Authorised[playerid] = 0; Sleeping[playerid] = 0; SleepXP[playerid] = 0;
	//new PlayerBar:bar1 = CreatePlayerProgressBar(playerid,501.00, 103.00, 103.50, 2.50, , 100.0); -16776961
	//War: new Bar:bar = CreateProgressBar(240.00, 395.00, 257.50, 12.20, -16776961, 100.0);  499.00, 103.00, 105.50 | 498.00, 162.00, 107.50, 7.50
	barxp = CreatePlayerProgressBar(playerid,498.00, 146.00, 107.50, 9.19, -16776961, 100.0);
	
	SetPlayerColor(playerid,COLOR_SPEC);
	MysqlRaceCheck[playerid]++;

	for(new pData:e; e < pData; ++e)
	{//Reseting all player's variables
	    PlayerData[playerid][e] = 0;
	}
	
	for(new i = 0; i < 128; i++)
	{
	    Suspects[playerid][i] = -1;
	}
	
	DealerID[playerid] = 0; VehicleDealer[playerid] = -1; InDealer[playerid] = 0; DSAngle[playerid] = 0.0;
	PlayerData[playerid][InBizz] = -1;
	PlayerData[playerid][InHouse] = -1;
	PlayerData[playerid][InHQ] = -1;
	PlayerData[playerid][SpectateP] = -1;
	PlayerData[playerid][Spectate] = -1;
	PlayerData[playerid][PlayerToFind] = -1;
	PlayerData[playerid][WarOffer] = -1;
	PlayerData[playerid][WarOffered] = -1;
	
	MedicAns[playerid] = -1; MedicCall[playerid] = -1; LiveOffer[playerid] = -1; LiveReporter[playerid] = -1; TalkingLive[playerid] = -1; PaperOffer[playerid] = -1;
	PaperReporter[playerid] = -1, WritingPaper[playerid] = 0, WritingPaperNumber[playerid] = 999, WritingLine[playerid] = 0, BringingPaper[playerid] = 0;
	GotPaper[playerid] = 0, DestinationSet[playerid] = 0, RadioSet[playerid] = 0, PlayerTied[playerid] = 0, VSpecial[playerid] = 0, ExamPoint[playerid] = 0;
	EStep[playerid] = 0, VHits[playerid] = 0, PPizzaCP[playerid] = -1, VJob[playerid] = -1, PSweeperCP[playerid] = -1, Dice[playerid] = 0, PTruckerCP[playerid] = -1, PFarmerCP[playerid] = -1;
	Mobile[playerid] = -1, PBusCP[playerid] = -1, Key[playerid] = 0, KeyC[playerid] = 0, SwitchKey[playerid] = 1, OnExp[playerid] = 0, JoinedCS[playerid] = 0, JoinedKart[playerid] = 0;
	KeyReset[playerid] = 0, GunOffer[playerid] = -1, GunOffered[playerid] = -1, GunPrice[playerid] = -1, GunModel[playerid] = -1, DrugOffer[playerid] = -1, DrugOffered[playerid] = -1, DrugPrice[playerid] = -1, DrugAmount[playerid] = -1, PlayerStoned[playerid] = 0;
	MaterialsOffer[playerid] = -1, MaterialsOffered[playerid] = -1, MaterialsPrice[playerid] = -1, MaterialsAmount[playerid] = -1, PGarbageCP[playerid] = -1, PKartCP[playerid] = -1;
	TicketOffer[playerid] = -1, TicketMoney[playerid] = 0, OwnableCarOffer[playerid] = -1, OwnableCarOffered[playerid] = -1, OwnableCarID[playerid] = 0, OwnableCarPrice[playerid] = 0, OwnableCarSlot[playerid] = 0;
	OwnableHouseOffer[playerid] = -1, OwnableHouseOffered[playerid] = -1, OwnableHouseID[playerid] = 0, OwnableHousePrice[playerid] = 0, PMTo[playerid] = -1, NeedAns[playerid] = 0;
	
	new query[128];
	GetPlayerName(playerid, PlayerData[playerid][Name], MAX_PLAYER_NAME);
	//Thread query to select player's info
	mysql_format(SQL, query, sizeof(query), "SELECT `Password`, `KeyReset` FROM `users` WHERE `username` = '%e' LIMIT 1", PlayerData[playerid][Name]);
	mysql_tquery(SQL, query, "OnPlayerDataLoaded", "dd", playerid, MysqlRaceCheck[playerid]);
	
	GiveDamage = CreatePlayerTextDraw(playerid, 148.428573, 376.893218, " ");
	PlayerTextDrawLetterSize(playerid, GiveDamage, 0.181428, 0.938664);
	PlayerTextDrawAlignment(playerid, GiveDamage, 1);
	PlayerTextDrawColor(playerid, GiveDamage, 0x00FF04FF);
	PlayerTextDrawSetShadow(playerid, GiveDamage, 0);
	PlayerTextDrawSetOutline(playerid, GiveDamage, 1);
	PlayerTextDrawBackgroundColor(playerid, GiveDamage, 51);
	PlayerTextDrawFont(playerid, GiveDamage, 1);
	PlayerTextDrawSetProportional(playerid, GiveDamage, 1);

	
	TakeDamage = CreatePlayerTextDraw(playerid, 148.571426, 364.373229, " ");
    PlayerTextDrawLetterSize(playerid, TakeDamage, 0.181428, 0.938664);
	PlayerTextDrawAlignment(playerid, TakeDamage, 1);
	PlayerTextDrawColor(playerid, TakeDamage, 0xE81010FF);
	PlayerTextDrawSetShadow(playerid, TakeDamage, 0);
	PlayerTextDrawSetOutline(playerid, TakeDamage, 1);
	PlayerTextDrawBackgroundColor(playerid, TakeDamage, 51);
	PlayerTextDrawFont(playerid, TakeDamage, 1);
	PlayerTextDrawSetProportional(playerid, TakeDamage, 1);
	
	Odometerr = CreatePlayerTextDraw(playerid, 498.500000, 359.562500, "Odometer: 150 km");
	PlayerTextDrawLetterSize(playerid, Odometerr, 0.263500, 1.223749);
	PlayerTextDrawAlignment(playerid, Odometerr, 1);
	PlayerTextDrawColor(playerid, Odometerr, -1);
	PlayerTextDrawSetShadow(playerid, Odometerr, 0);
	PlayerTextDrawSetOutline(playerid, Odometerr, 1);
	PlayerTextDrawBackgroundColor(playerid, Odometerr, 51);
	PlayerTextDrawFont(playerid, Odometerr, 1);
	PlayerTextDrawSetProportional(playerid, Odometerr, 1);	
	
	Speedd = CreatePlayerTextDraw(playerid, 498.500000, 374.562500, "Speed: 150 km/h");
	PlayerTextDrawLetterSize(playerid, Speedd, 0.263500, 1.223749);
	PlayerTextDrawAlignment(playerid, Speedd, 1);
	PlayerTextDrawColor(playerid, Speedd, -1);
	PlayerTextDrawSetShadow(playerid, Speedd, 0);
	PlayerTextDrawSetOutline(playerid, Speedd, 1);
	PlayerTextDrawBackgroundColor(playerid, Speedd, 51);
	PlayerTextDrawFont(playerid, Speedd, 1);
	PlayerTextDrawSetProportional(playerid, Speedd, 1);

	Fuell = CreatePlayerTextDraw(playerid, 498.500000, 389.875000, "Fuel: 55 %");
	PlayerTextDrawLetterSize(playerid, Fuell, 0.263500, 1.223749);
	PlayerTextDrawAlignment(playerid, Fuell, 1);
	PlayerTextDrawColor(playerid, Fuell, -1);
	PlayerTextDrawSetShadow(playerid, Fuell, 0);
	PlayerTextDrawSetOutline(playerid, Fuell, 1);
	PlayerTextDrawBackgroundColor(playerid, Fuell, 51);
	PlayerTextDrawFont(playerid, Fuell, 1);
	PlayerTextDrawSetProportional(playerid, Fuell, 1);
	
	Radio = CreatePlayerTextDraw(playerid, 498.500000, 404.312500, "Radio: No-One");
	PlayerTextDrawLetterSize(playerid, Radio, 0.263500, 1.223749);
	PlayerTextDrawAlignment(playerid, Radio, 1);
	PlayerTextDrawColor(playerid, Radio, -1);
	PlayerTextDrawSetShadow(playerid, Radio, 0);
	PlayerTextDrawSetOutline(playerid, Radio, 1);
	PlayerTextDrawBackgroundColor(playerid, Radio, 51);
	PlayerTextDrawFont(playerid, Radio, 1);
	PlayerTextDrawSetProportional(playerid, Radio, 1);

	Destination = CreatePlayerTextDraw(playerid, 498.500000, 417.687500, "Destination: No-oneeeeeeeee");
	PlayerTextDrawLetterSize(playerid, Destination, 0.217000, 1.079375);
	PlayerTextDrawAlignment(playerid, Destination, 1);
	PlayerTextDrawColor(playerid, Destination, -1);
	PlayerTextDrawSetShadow(playerid, Destination, 0);
	PlayerTextDrawSetOutline(playerid, Destination, 1);
	PlayerTextDrawBackgroundColor(playerid, Destination, 51);
	PlayerTextDrawFont(playerid, Destination, 1);
	PlayerTextDrawSetProportional(playerid, Destination, 1);
	
	DestinationKM = CreatePlayerTextDraw(playerid, 498.500000, 430.687500, "Destination: 42 KM");
	PlayerTextDrawLetterSize(playerid, DestinationKM, 0.217000, 1.079375);
	PlayerTextDrawAlignment(playerid, DestinationKM, 1);
	PlayerTextDrawColor(playerid, DestinationKM, -1);
	PlayerTextDrawSetShadow(playerid, DestinationKM, 0);
	PlayerTextDrawSetOutline(playerid, DestinationKM, 1);
	PlayerTextDrawBackgroundColor(playerid, DestinationKM, 51);
	PlayerTextDrawFont(playerid, DestinationKM, 1);
	PlayerTextDrawSetProportional(playerid, DestinationKM, 1);

    DSBox = CreatePlayerTextDraw(playerid, 608.476196, 309.553314, "usebox");
	PlayerTextDrawLetterSize(playerid, DSBox, 0.000000, 12.767779);
	PlayerTextDrawTextSize(playerid, DSBox, 498.190460, 0.000000);
	PlayerTextDrawAlignment(playerid, DSBox, 1);
	PlayerTextDrawColor(playerid, DSBox, 0);
	PlayerTextDrawUseBox(playerid, DSBox, true);
	PlayerTextDrawBoxColor(playerid, DSBox, 102);
	PlayerTextDrawSetShadow(playerid, DSBox, 0);
	PlayerTextDrawSetOutline(playerid, DSBox, 0);
	PlayerTextDrawFont(playerid, DSBox, 0);
	
	DSModel = CreatePlayerTextDraw(playerid, 515.0, 260.0, "_");
	PlayerTextDrawFont(playerid, DSModel, TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawUseBox(playerid, DSModel, 1);
	PlayerTextDrawBoxColor(playerid, DSModel, 0);
	PlayerTextDrawBackgroundColor(playerid, DSModel, 0);
	PlayerTextDrawTextSize(playerid, DSModel, 80.0, 80.0);
	PlayerTextDrawSetPreviewModel(playerid, DSModel, 411);
	PlayerTextDrawSetPreviewRot(playerid, DSModel, 0.0, 0.0, -20.0, 1.0);
	PlayerTextDrawSetPreviewVehCol(playerid, DSModel, 1, 1);
	PlayerTextDrawSetSelectable(playerid, DSModel, 1);

	DSName = CreatePlayerTextDraw(playerid, 505.142883, 323.839996, "Name: Infernus");
	PlayerTextDrawLetterSize(playerid, DSName, 0.323523, 0.913066);
	PlayerTextDrawAlignment(playerid, DSName, 1);
	PlayerTextDrawColor(playerid, DSName, -1);
	PlayerTextDrawSetShadow(playerid, DSName, 0);
	PlayerTextDrawSetOutline(playerid, DSName, 1);
	PlayerTextDrawBackgroundColor(playerid, DSName, 51);
	PlayerTextDrawFont(playerid, DSName, 1);
	PlayerTextDrawSetProportional(playerid, DSName, 1);

	DSPrice = CreatePlayerTextDraw(playerid, 505.904510, 338.773345, "Price: $999999");
	PlayerTextDrawLetterSize(playerid, DSPrice, 0.323523, 0.911306);
	PlayerTextDrawAlignment(playerid, DSPrice, 1);
	PlayerTextDrawColor(playerid, DSPrice, -1);
	PlayerTextDrawSetShadow(playerid, DSPrice, 0);
	PlayerTextDrawSetOutline(playerid, DSPrice, 1);
	PlayerTextDrawBackgroundColor(playerid, DSPrice, 51);
	PlayerTextDrawFont(playerid, DSPrice, 1);
	PlayerTextDrawSetProportional(playerid, DSPrice, 1);

	DSStock = CreatePlayerTextDraw(playerid, 505.142883, 353.706665, "Stock: 3");
	PlayerTextDrawLetterSize(playerid, DSStock, 0.323523, 0.911306);
	PlayerTextDrawAlignment(playerid, DSStock, 1);
	PlayerTextDrawColor(playerid, DSStock, -1);
	PlayerTextDrawSetShadow(playerid, DSStock, 0);
	PlayerTextDrawSetOutline(playerid, DSStock, 1);
	PlayerTextDrawBackgroundColor(playerid, DSStock, 51);
	PlayerTextDrawFont(playerid, DSStock, 1);
	PlayerTextDrawSetProportional(playerid, DSStock, 1);

	DSTest = CreatePlayerTextDraw(playerid, 524.190063, 391.679901, "Test Drive");
	PlayerTextDrawLetterSize(playerid, DSTest, 0.323523, 0.911306);
	PlayerTextDrawTextSize(playerid, DSTest, 582.094909, 76.800003);
	PlayerTextDrawAlignment(playerid, DSTest, 1);
	PlayerTextDrawColor(playerid, DSTest, -1);
	PlayerTextDrawSetShadow(playerid, DSTest, 0);
	PlayerTextDrawSetOutline(playerid, DSTest, 1);
	PlayerTextDrawBackgroundColor(playerid, DSTest, 51);
	PlayerTextDrawFont(playerid, DSTest, 1);
	PlayerTextDrawSetProportional(playerid, DSTest, 1);
	PlayerTextDrawSetSelectable(playerid, DSTest, 1);

	DSInfo = CreatePlayerTextDraw(playerid, 524.428344, 370.906524, "More info");
	PlayerTextDrawLetterSize(playerid, DSInfo, 0.323523, 0.911306);
	PlayerTextDrawTextSize(playerid, DSInfo, 579.808349, 37.546718);
	PlayerTextDrawAlignment(playerid, DSInfo, 1);
	PlayerTextDrawColor(playerid, DSInfo, -1);
	PlayerTextDrawSetShadow(playerid, DSInfo, 0);
	PlayerTextDrawSetOutline(playerid, DSInfo, 1);
	PlayerTextDrawBackgroundColor(playerid, DSInfo, 51);
	PlayerTextDrawFont(playerid, DSInfo, 1);
	PlayerTextDrawSetProportional(playerid, DSInfo, 1);
	PlayerTextDrawSetSelectable(playerid, DSInfo, 1);

	DSBuy = CreatePlayerTextDraw(playerid, 506.666595, 410.026672, "Buy");
	PlayerTextDrawLetterSize(playerid, DSBuy, 0.323523, 0.911306);
	PlayerTextDrawTextSize(playerid, DSBuy, 524.952209, 62.720016);
	PlayerTextDrawAlignment(playerid, DSBuy, 1);
	PlayerTextDrawColor(playerid, DSBuy, -1);
	PlayerTextDrawSetShadow(playerid, DSBuy, 0);
	PlayerTextDrawSetOutline(playerid, DSBuy, 1);
	PlayerTextDrawBackgroundColor(playerid, DSBuy, 51);
	PlayerTextDrawFont(playerid, DSBuy, 1);
	PlayerTextDrawSetProportional(playerid, DSBuy, 1);
	PlayerTextDrawSetSelectable(playerid, DSBuy, 1);

	DSCancel = CreatePlayerTextDraw(playerid, 568.095031, 410.319763, "Cancel");
	PlayerTextDrawLetterSize(playerid, DSCancel, 0.323523, 0.911306);
	PlayerTextDrawTextSize(playerid, DSCancel, 601.523193, 62.720012);
	PlayerTextDrawAlignment(playerid, DSCancel, 1);
	PlayerTextDrawColor(playerid, DSCancel, -1);
	PlayerTextDrawSetShadow(playerid, DSCancel, 0);
	PlayerTextDrawSetOutline(playerid, DSCancel, 1);
	PlayerTextDrawBackgroundColor(playerid, DSCancel, 51);
	PlayerTextDrawFont(playerid, DSCancel, 1);
	PlayerTextDrawSetProportional(playerid, DSCancel, 1);
	PlayerTextDrawSetSelectable(playerid, DSCancel, 1);

	DSPrev = CreatePlayerTextDraw(playerid, 500.952209, 290.986450, "<");
	PlayerTextDrawLetterSize(playerid, DSPrev, 0.365427, 1.636640);
	PlayerTextDrawTextSize(playerid, DSPrev, 512.761840, 79.360008);
	PlayerTextDrawAlignment(playerid, DSPrev, 1);
	PlayerTextDrawColor(playerid, DSPrev, -1);
	PlayerTextDrawSetShadow(playerid, DSPrev, 0);
	PlayerTextDrawSetOutline(playerid, DSPrev, 1);
	PlayerTextDrawBackgroundColor(playerid, DSPrev, 51);
	PlayerTextDrawFont(playerid, DSPrev, 2);
	PlayerTextDrawSetProportional(playerid, DSPrev, 1);
	PlayerTextDrawSetSelectable(playerid, DSPrev, 1);

	DSNext = CreatePlayerTextDraw(playerid, 593.380737, 291.986450, ">");
	PlayerTextDrawLetterSize(playerid, DSNext, 0.365427, 1.636640);
	PlayerTextDrawTextSize(playerid, DSNext, 603.429077, 37.546680);
	PlayerTextDrawAlignment(playerid, DSNext, 1);
	PlayerTextDrawColor(playerid, DSNext, -1);
	PlayerTextDrawSetShadow(playerid, DSNext, 0);
	PlayerTextDrawSetOutline(playerid, DSNext, 1);
	PlayerTextDrawBackgroundColor(playerid, DSNext, 51);
	PlayerTextDrawFont(playerid, DSNext, 2);
	PlayerTextDrawSetProportional(playerid, DSNext, 1);
	PlayerTextDrawSetSelectable(playerid, DSNext, 1);

	XPRemain = CreatePlayerTextDraw(playerid, 550.500000, 147.187500, "100000 / 100000 XP");
	PlayerTextDrawLetterSize(playerid, XPRemain, 0.197499, 0.659375);
	PlayerTextDrawAlignment(playerid, XPRemain, 2);
	PlayerTextDrawColor(playerid, XPRemain, -1);
	PlayerTextDrawSetShadow(playerid, XPRemain, 0);
	PlayerTextDrawSetOutline(playerid, XPRemain, 1);
	PlayerTextDrawBackgroundColor(playerid, XPRemain, 51);
	PlayerTextDrawFont(playerid, XPRemain, 1);
	PlayerTextDrawSetProportional(playerid, XPRemain, 1);

	XPTLeft = CreatePlayerTextDraw(playerid, 500.500000, 136.812500, "Time Left: 60 min");
	PlayerTextDrawLetterSize(playerid, XPTLeft, 0.197499, 0.659375);
	PlayerTextDrawAlignment(playerid, XPTLeft, 1);
	PlayerTextDrawColor(playerid, XPTLeft, -1);
	PlayerTextDrawSetShadow(playerid, XPTLeft, 0);
	PlayerTextDrawSetOutline(playerid, XPTLeft, 1);
	PlayerTextDrawBackgroundColor(playerid, XPTLeft, 51);
	PlayerTextDrawFont(playerid, XPTLeft, 1);
	PlayerTextDrawSetProportional(playerid, XPTLeft, 1);

	XPTotal = CreatePlayerTextDraw(playerid, 500.500000, 126.750000, "Level: 100 (100000 XP)");
	PlayerTextDrawLetterSize(playerid, XPTotal, 0.197499, 0.659375);
	PlayerTextDrawAlignment(playerid, XPTotal, 1);
	PlayerTextDrawColor(playerid, XPTotal, -1);
	PlayerTextDrawSetShadow(playerid, XPTotal, 0);
	PlayerTextDrawSetOutline(playerid, XPTotal, 1);
	PlayerTextDrawBackgroundColor(playerid, XPTotal, 51);
	PlayerTextDrawFont(playerid, XPTotal, 1);
	PlayerTextDrawSetProportional(playerid, XPTotal, 1);

	TextDrawSpec[playerid][1] = TextDrawCreate(269.000000, 335.000000, "Player: Unknown");
	TextDrawBackgroundColor(TextDrawSpec[playerid][1], 255);
	TextDrawFont(TextDrawSpec[playerid][1], 1);
	TextDrawLetterSize(TextDrawSpec[playerid][1], 0.460000, 1.900000);
	TextDrawColor(TextDrawSpec[playerid][1], -119841281);
	TextDrawSetOutline(TextDrawSpec[playerid][1], 1);
	TextDrawSetProportional(TextDrawSpec[playerid][1], 1);
	
	TextDrawSpec[playerid][2] = TextDrawCreate(270.000000, 354.000000, "Health: 0");
	TextDrawBackgroundColor(TextDrawSpec[playerid][2], 255);
	TextDrawFont(TextDrawSpec[playerid][2], 1);
	TextDrawLetterSize(TextDrawSpec[playerid][2], 0.460000, 1.900000);
	TextDrawColor(TextDrawSpec[playerid][2], -1);
	TextDrawSetOutline(TextDrawSpec[playerid][2], 1);
	TextDrawSetProportional(TextDrawSpec[playerid][2], 1);

	TextDrawSpec[playerid][3] = TextDrawCreate(262.000000, 372.000000, "Vehicle ID: 0");
	TextDrawBackgroundColor(TextDrawSpec[playerid][3], 255);
	TextDrawFont(TextDrawSpec[playerid][3], 1);
	TextDrawLetterSize(TextDrawSpec[playerid][3], 0.460000, 1.900000);
	TextDrawColor(TextDrawSpec[playerid][3], -1);
	TextDrawSetOutline(TextDrawSpec[playerid][3], 1);
	TextDrawSetProportional(TextDrawSpec[playerid][3], 1);

	TextDrawSpec[playerid][4] = TextDrawCreate(236.000000, 389.000000, "Vehicle Health: 0000");
	TextDrawBackgroundColor(TextDrawSpec[playerid][4], 255);
	TextDrawFont(TextDrawSpec[playerid][4], 1);
	TextDrawLetterSize(TextDrawSpec[playerid][4], 0.460000, 1.900000);
	TextDrawColor(TextDrawSpec[playerid][4], -1);
	TextDrawSetOutline(TextDrawSpec[playerid][4], 1);
	TextDrawSetProportional(TextDrawSpec[playerid][4], 1);
	SetSpawnInfo(playerid, 0, 0, 1459.7274,-1012.3112,61.1703,170.5999, 0, 0, 0, 0, 0, 0);
		
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1393.2734, -1796.3516, 16.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1430.1719, -1719.4688, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.6250, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1467.9844, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1485.1719, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1702.3594, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1676.6875, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1656.2500, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1636.2344, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1619.0547, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1443.2031, -1592.9453, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 4206, 1479.5547, -1639.6094, 13.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1466.4844, -1598.0938, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.3359, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1471.3516, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1488.5313, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1498.0547, -1598.0938, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1504.8906, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1721.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1705.2734, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1688.0859, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1673.7109, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1668.0781, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1647.6406, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1621.9609, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1528.9531, -1605.8594, 15.6250, 0.25);
	
	RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1378.8125, -1623.3828, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1379.2422, -1622.4531, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1375.6406, -1621.8672, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1382.0469, -1621.8672, 14.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);

	RemoveBuildingForPlayer(playerid, 4026, 1497.7969, -1543.7109, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 4218, 1497.7031, -1546.6172, 43.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1434.3516, -1568.0938, 16.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 4016, 1497.7969, -1543.7109, 17.5547, 0.25);

	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1407.1953, -1749.3125, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1405.2344, -1821.1172, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1417.9766, -1832.5313, 11.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1405.5781, -1831.6953, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1447.1016, -1832.5000, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 4174, 1435.7656, -1823.6641, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1456.3984, -1832.5313, 11.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1464.0938, -1831.8828, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1504.8438, -1832.5313, 11.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1499.0469, -1832.2734, 12.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1512.9453, -1832.3516, 13.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1364.8594, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1404.9141, -1765.2656, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 4173, 1427.2734, -1756.1797, 15.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1415.3125, -1748.5625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1429.5313, -1748.4219, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1438.0313, -1747.9375, 13.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1447.9063, -1748.2266, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1401.7578, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.6250, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1467.9844, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1485.1719, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1513.2344, -1732.9219, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1516.0000, -1748.6016, 13.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1419.3281, -1710.2344, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1702.3594, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1676.6875, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1656.2500, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1636.2344, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1619.0547, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1549.5313, -1832.3125, 12.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1555.6641, -1830.5938, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4175, 1524.4141, -1823.8516, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1554.8203, -1816.1563, 13.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1553.2578, -1764.8125, 12.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 4172, 1534.7656, -1756.1797, 15.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1533.2656, -1749.0234, 12.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1522.1641, -1748.5703, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1553.7031, -1747.9375, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1721.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1705.2734, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1688.0859, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1673.7109, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1668.0781, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1647.6406, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1621.9609, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 4608, 1773.2734, -1368.2734, 18.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4609, 1777.8906, -1376.8906, 20.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 4610, 1747.4375, -1361.5078, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1746.7500, -1359.7734, 16.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4758, 1726.7031, -1313.8125, 33.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 4759, 1748.9297, -1420.2813, 41.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 1726.3984, -1313.0625, 28.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1748.8438, -1420.4453, 35.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1728.1719, -1428.3750, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1727.6172, -1423.7656, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1783.0391, -1440.3438, 13.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1773.5234, -1437.0391, 13.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1762.7188, -1433.5859, 13.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1748.8438, -1420.4453, 35.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 4731, 1748.9297, -1420.2813, 41.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1783.2031, -1427.5234, 17.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1793.6172, -1420.6875, 17.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1727.8359, -1417.7969, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1789.1250, -1413.3125, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1727.6172, -1411.3359, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1727.8359, -1405.5391, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1727.6172, -1399.6797, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1727.8359, -1393.6719, 15.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1740.3672, -1388.0625, 13.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1740.4609, -1386.5234, 13.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1749.5156, -1388.0000, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1749.9063, -1386.4375, 14.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 4714, 1754.5391, -1389.0859, 15.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1758.0469, -1387.9141, 15.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1758.7266, -1386.2578, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1768.1484, -1387.6094, 15.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 4559, 1773.2734, -1368.2734, 18.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4560, 1777.8906, -1376.8906, 20.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1789.1250, -1402.1563, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1789.2109, -1369.2656, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1809.8984, -1384.4688, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1813.1641, -1384.4688, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1384.4688, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1815.6406, -1382.2031, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1827.9609, -1377.7266, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1831.9609, -1381.0703, 13.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1788.9844, -1363.0703, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1827.8906, -1363.0000, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 4558, 1747.4375, -1361.5078, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1787.0469, -1360.9063, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1787.0781, -1357.2656, 14.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1359.0938, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1754.5391, -1350.0781, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 674, 1759.8047, -1350.0781, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1787.0469, -1353.7813, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1789.8672, -1353.2656, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1432, 1791.4766, -1351.6406, 14.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1800.5469, -1353.2109, 14.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1831.2813, -1354.1016, 14.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1827.8906, -1344.8984, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1348.4922, 15.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1726.3984, -1313.0625, 28.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 4730, 1726.7031, -1313.8125, 33.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1738.9609, -1342.5703, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1750.1328, -1342.5859, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1760.7969, -1342.5859, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1769.1641, -1342.6094, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1779.6797, -1342.6094, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1790.0859, -1342.6094, 15.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1800.5469, -1342.6094, 14.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1813.9453, -1323.3516, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1828.0000, -1330.4141, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1831.6953, -1326.8906, 13.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1820.0859, -1326.1563, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1817.2109, -1323.3516, 15.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1831.3594, -1323.4844, 15.1094, 0.25);

	// Christian -->
	
	RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 708, 1837.6406, -1968.3438, 12.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1810.8281, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1816.1094, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1821.3828, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1826.6406, -1971.5859, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1831.9063, -1971.5938, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 4984, 1880.7109, -2112.6328, 21.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 4982, 1892.5391, -2012.8281, 21.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1837.1719, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1842.4453, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1847.7266, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1850.4766, -1968.6641, 13.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1859.8203, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1865.1016, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1870.3750, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1875.6328, -1971.5859, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1880.8984, -1971.5938, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1886.1641, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1896.7266, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1891.4453, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1902.0000, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1907.2578, -1971.5859, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1912.5234, -1971.5938, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1917.7891, -1971.3594, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1923.0547, -1971.5781, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1905.2656, -1946.1953, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1930.0391, -1946.1797, 11.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 4981, 1898.3984, -1913.4063, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 5637, 2043.8984, -1138.3906, 31.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2487.3984, -1688.1016, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 2488.8047, -1684.7891, 12.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2491.8984, -1688.1016, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2498.6719, -1688.2344, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2515.1250, -1683.0859, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2512.6094, -1683.1719, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2514.3438, -1684.5234, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 2537.9688, -1700.7109, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2517.7734, -1685.2969, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2516.6094, -1686.4844, 12.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2520.6016, -1670.7422, 13.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2519.0625, -1675.7109, 13.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 2491.2344, -1653.9609, 12.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2492.2656, -1653.9922, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1211, 2495.2656, -1653.6719, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 2505.6719, -1658.9063, 12.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 2510.9219, -1656.1328, 12.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1211, 2505.6641, -1657.9375, 12.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2511.5000, -1654.1563, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2509.0156, -1652.1719, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2501.9297, -1650.5078, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2505.1094, -1646.0391, 13.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2509.1719, -1648.7031, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2507.5859, -1646.5547, 12.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2501.7500, -1645.5000, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 2508.4141, -1635.4375, 11.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2522.1016, -1665.6484, 15.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2520.5469, -1662.8828, 13.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 2514.3906, -1658.6016, 13.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2517.0938, -1656.0703, 13.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2520.6016, -1652.5938, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2514.7344, -1654.1875, 13.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2521.6953, -1653.0391, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 17875, 2292.5234, -1695.8594, 16.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2331.8828, -1685.1250, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2331.8828, -1690.4297, 13.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2331.8828, -1671.6172, 14.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2290.7422, -1648.8984, 14.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2285.1953, -1648.8906, 14.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2329.0938, -1669.1484, 14.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 17876, 2393.0625, -1677.5234, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2397.8047, -1678.6094, 12.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 2446.5547, -1681.0703, 12.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2468.3516, -1680.9844, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2457.8672, -1679.6719, 12.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2354.5703, -1671.5156, 13.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2376.7422, -1671.8203, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2359.3906, -1671.7109, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2411.4609, -1675.0625, 12.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 2412.8750, -1674.4688, 12.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2465.6953, -1676.4453, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2470.4688, -1674.1875, 16.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2463.8672, -1671.5156, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2357.0234, -1669.3594, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2369.8594, -1669.3594, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2374.5313, -1669.3594, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2405.5234, -1669.0391, 13.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2402.0078, -1669.0391, 13.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1418, 2413.2969, -1669.0391, 13.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 17879, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2359.2266, -1648.8828, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2356.5078, -1646.3125, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2366.3594, -1648.8828, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2369.0391, -1646.2734, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2381.6016, -1646.3047, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2389.7813, -1648.8828, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2398.2031, -1648.9531, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2408.9531, -1648.8438, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2419.4844, -1648.8438, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2415.2031, -1653.1328, 12.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2406.2500, -1646.3047, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2400.9453, -1646.3047, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2422.0703, -1646.3047, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2448.9141, -1648.8516, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2446.7734, -1646.4219, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2453.9609, -1653.6953, 12.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2455.9063, -1648.8047, 13.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2464.5000, -1648.8438, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2474.2891, -1648.8438, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2475.0000, -1653.6094, 12.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2461.7813, -1646.2734, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2477.0469, -1646.2734, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2422.0703, -1641.0313, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2437.4844, -1644.1172, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2422.0703, -1635.7578, 13.8125, 0.25);

	RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1377.6641, 21.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1356.5859, 21.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1338.2422, 21.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
	
	RemoveBuildingForPlayer(playerid, 1415, 732.8516, -1332.8984, 12.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1439, 732.7266, -1341.7734, 12.6328, 0.25);
	
	TextDrawHideForPlayer(playerid,txtTimeDisp);
	TextDrawHideForPlayer(playerid,txtDateDisp);
	// < -- Done
	numplayers++;
	if(numplayers > ServerInfo[recordnumber])
	{
		new qstr[512];
		new date[50], y,m,d,h,mi;
		ServerInfo[recordnumber] = numplayers;
		mysql_format(SQL, qstr,512,"UPDATE `infos` SET `recordnumber`='%d' WHERE ID = 1",ServerInfo[recordnumber]);
		mysql_tquery(SQL, qstr, "", "");
		getdate(y,m,d);
		gettime(h,mi);
		format(date, sizeof(date), "%02d.%02d.%d %02d:%02d", d,m,y,h,mi);
		strmid(ServerInfo[recorddate], date, 0, strlen(date), 255);
		mysql_format(SQL, qstr,512,"UPDATE `infos` SET `recorddate`='%s' WHERE ID = 1",ServerInfo[recorddate]);
		mysql_tquery(SQL, qstr, "", "");
		format(qstr,512,"{FF0000}AdmBot{FFFFFF}: New Record, there are %d players online (%s) ",numplayers,date);
		ABroadCast(COLOR_WHITE,qstr,1);
	}
	new hours, minutes;
	gettime(hours, minutes);
    SetPlayerTime(playerid,hours,minutes);
	return 1;
}

stock abs( value )
{
    return ((value < 0 ) ? (0) : (value));
}

stock IsABike(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 481,509,510,462: return 1;
	}
	return 0;
}

stock IsABoat(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 430,446,452,453,454,472,473,484,493,595: return 1;
	}
	return 0;
}

stock IsAPlane(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 460,476,511,512,513,519,520,553,577,592,593,487,488,497,548,563,417,425,447,469: return 1;
	}
	return 0;
}

function SetDestination(playerid, Float:x, Float:y, Float:z)
{
	DestSet[playerid][0] = x;
	DestSet[playerid][1] = y;
	DestSet[playerid][2] = z;
	DestinationSet[playerid] = 1;
}
function RemoveDestination(playerid)
{
	DestSet[playerid][0] = 0.0;
	DestSet[playerid][1] = 0.0;
	DestSet[playerid][2] = 0.0;
	DestinationSet[playerid] = 0;
}

function Speedo()
{
	new str[128];
 	foreach(Player, i)
	{
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsPlayerNPC(i) && Allowed[i] == 0)
		{
			new Float: oldX[MAX_PLAYERS], Float: oldY[MAX_PLAYERS], Float: oldZ[MAX_PLAYERS];
			oldX[i] = PosX[i];
			oldY[i] = PosY[i];
			oldZ[i] = PosZ[i];
			GetPlayerPos(i,PosX[i],PosY[i],PosZ[i]);
			new Float:distanta[MAX_PLAYERS];
			distanta[i] = GetDistanceBetweenPoints(oldX[i],oldY[i],oldZ[i],PosX[i],PosY[i],PosZ[i]);
			
            new str1[128],zone[30];
			new vehicle = GetPlayerVehicleID(i);
		    new oldspeed = PlayerData[i][Speed];
			PlayerData[i][Speed] = GetVehicleSpeed(GetPlayerVehicleID(i), 0);
			new newspeed = PlayerData[i][Speed];
			new acceleration = abs(newspeed - oldspeed);
			new Consume = (((acceleration / 10) + 1) * (newspeed / 20));
			new Float:Consume2 = float(Consume);
			new carid = FindSpawnID(vehicle);
			if(!(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle)))
			{
				Gas[vehicle] -= Consume2/500;
				if(Gas[vehicle] <= 0)
				{
				    new e,l,a,d,b,bo,o;
				    GetVehicleParamsEx(vehicle,e,l,a,d,b,bo,o);
				    SetVehicleParamsEx(vehicle,0,l,a,d,b,bo,o);
				    format(str1,sizeof(str1),"Fuel: ~r~NO FUEL"); //
					PlayerTextDrawSetString(i, Fuell, str1);
				    Gas[vehicle] = 0;
				}
			}
			else
			{
			    Consume = 0;
			}

			
			if(CarInfo[carid][cID] != -2 && carid != 0)	PlayerTextDrawHide(i, Odometerr);
			PlayerTextDrawHide(i, Speedd);
			PlayerTextDrawHide(i, Fuell); 
			PlayerTextDrawHide(i, Destination); 
			PlayerTextDrawHide(i, DestinationKM);
			PlayerTextDrawHide(i, Radio);
			
			CarInfo[carid][KM] += distanta[i]/1000;
			mysql_format(SQL, str,128,"UPDATE `cars` SET `KM`='%f' WHERE `ID`='%d' LIMIT 1",CarInfo[carid][KM],carid);
			mysql_tquery(SQL, str, "", "");
	
			if(CarInfo[carid][cID] != -2 && carid != 0)
			{
				format(str1,sizeof(str1),"Odometer: ~y~%.2f ~w~KM",CarInfo[carid][KM]);
				PlayerTextDrawSetString(i, Odometerr, str1);
			}
			
			if(PlayerData[i][Speed] <= 110)
			{
				format(str1,sizeof(str1),"Speed: ~y~%d ~w~KM/H",PlayerData[i][Speed]);
				PlayerTextDrawSetString(i, Speedd, str1);
			}
			if(PlayerData[i][Speed] > 110 && PlayerData[i][Speed] <= 160)
			{
				format(str1,sizeof(str1),"Speed: ~b~%d ~w~KM/H",PlayerData[i][Speed]);
				PlayerTextDrawSetString(i, Speedd, str1);
			}
			if(PlayerData[i][Speed] > 160)
			{
				format(str1,sizeof(str1),"Speed: ~r~%d ~w~KM/H",PlayerData[i][Speed]);
				PlayerTextDrawSetString(i, Speedd, str1);
			}
			
			if(Gas[vehicle] > 0)
			{
				format(str1,sizeof(str1),"Fuel: %d %% (C: %d %%)", floatround(Gas[vehicle], floatround_round), Consume); //
				PlayerTextDrawSetString(i, Fuell, str1);
			}
			
			if(DestinationSet[i] == 0)
			{
				format(str1,sizeof(str1),"Destination: None"); //
				PlayerTextDrawSetString(i, Destination, str1);
			}
			else
			{
				GetPlayer3DZone2(DestSet[i][0],DestSet[i][1],DestSet[i][2],zone,30);
				format(str1,sizeof(str1),"Destination: ~y~%s",zone); //
				PlayerTextDrawSetString(i, Destination, str1);
				
				new Float:distance = GetPlayerDistanceFromPoint(i, DestSet[i][0],DestSet[i][1],DestSet[i][2]);
				format(str1,sizeof(str1),"              ~y~%.2f meters",distance); //
				PlayerTextDrawSetString(i, DestinationKM, str1);
				PlayerTextDrawShow(i, DestinationKM);
			}
			
			if(RadioSet[i] == 0)
			{
				format(str1,sizeof(str1),"Radio: ~r~OFF"); //
				PlayerTextDrawSetString(i, Radio, str1);
			}
			else
			{
				format(str1,sizeof(str1),"Radio: ~y~%s",RadioName(RadioSet[i])); //
				PlayerTextDrawSetString(i, Radio, str1);
			}
			
			if(CarInfo[carid][cID] != -2 && carid != 0)	PlayerTextDrawShow(i, Odometerr);
			PlayerTextDrawShow(i, Speedd);
			PlayerTextDrawShow(i, Fuell); 
			PlayerTextDrawShow(i, Destination); 
			PlayerTextDrawShow(i, Radio);
		}
		else
		{
			PlayerTextDrawHide(i, Odometerr);
			PlayerTextDrawHide(i, Speedd);
			PlayerTextDrawHide(i, Fuell); 
			PlayerTextDrawHide(i, Destination); 
			PlayerTextDrawHide(i, Radio);
			PlayerTextDrawHide(i, DestinationKM);
		}
	}
}

function OnPlayerDataLoaded(playerid, race_check)
{
	if(race_check != MysqlRaceCheck[playerid]) // Anti-Lag load
	    return Kick(playerid);
	    
	SetPlayerVirtualWorld(playerid, 1000);
	SetPlayerPos(playerid, 1479.1787,-1717.0452,14.0469);
	SetPlayerCameraPos(playerid, 1479.2153,-1717.8894,14.0469);
	SetPlayerCameraLookAt(playerid, 1482.0698,-1752.3220,33.4297);
	
    new string[128];
	if(cache_num_rows() > 0)
	{
        GetPassword(playerid);
        if(KeyReset[playerid] == 0)
	    {
			format(string, sizeof(string), "Welcome back, {5D8CD7}%s{A9C4E4}!\n\n{A9C4E4}Please enter your password\nbelow to login to your account.", PlayerData[playerid][Name]);
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", string, "Login", "Abort");
		}
		else
		{
		    new string2[256];
		    format(string2, sizeof(string2), "Welcome back, {5D8CD7}%s{A9C4E4}!\n\n{A9C4E4}Your password have been reseted\nPlease visit {FFFFFF}--- \n{A9C4E4}to change it.", PlayerData[playerid][Name]);
			ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "Password Reseted", string2, "Quit", "");
			KickEx(playerid);
		}
	}
	else
	{
		format(string, sizeof(string), "Welcome to the server, {5D8CD7}%s\n\n{A9C4E4}Please register an account\nby entering your desired password below.", PlayerData[playerid][Name]);
		ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Registration", string, "Register", "Abort");
	}
	return 1;
}

stock IsMail(email[])
{
  	new len=strlen(email);
  	new cstate=0;
  	new i;
  	for(i=0;i<len;i++)
	{
	    if ((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z')||(email[i]>='0' && email[i]<='9') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
	    {
	    }
		else
		{
	       // Ok no A..Z,a..z,_,.,-
	       if ((cstate==0) &&(email[i]=='@'))
		   {
	          // its an @ after the name, ok state=1;
	          cstate=1;
	       }
		   else
		   {
	          // Its stuff which is not allowed
	          return false;
	       }
	 	}
	}
  	if (cstate<1) return false;
  	if (len<6) return false;
  	// A toplevel domain has only 3 to 4 signs :-)
  	if ((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.')) return true;
  	return false;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[128],query[256],stringt[1024];
	new playersip[256];
	GetPlayerIp(playerid,playersip,sizeof(playersip));
	switch(dialogid)
	{
	    case DIALOG_GPS:
	    {
	        if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the gps menu.");
				return 1;
			}
			else
			{
			    if(listitem == 0)
				{//Important Locations
				    ShowPlayerDialog(playerid, DIALOG_GPS + 1, DIALOG_STYLE_LIST, "GPS - Important Locations", "1. Spawn\n2. Bank\n3. CNN\n4. Gun Shop\n5. Car Rent\n6. Boat Rent\n7. Moto Rent\n8. Car Dealership", "Select", "Cancel");
				}
				if(listitem == 1)
				{//HQ-s
				    ShowPlayerDialog(playerid, DIALOG_GPS + 2, DIALOG_STYLE_LIST, "GPS - Head Quarters", "1. Police Dept.\n2. Grove St. 125\n3. Grape Street Watts\n4. Varrio Nuevo Estrada\n5. SA Goverment\n6. SA Network\n7. Emergency Dept.", "Select", "Cancel");
				}
			}
	    }
	    case DIALOG_GPS + 1:
	    {
	        if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Global Positioning System", "Important locations\nHead Quarters", "Select", "Cancel");
			}
			else
			{
			    PPizzaCP[playerid] = -1, PSweeperCP[playerid] = -1, PTruckerCP[playerid] = -1, PFarmerCP[playerid] = -1;
	 			DisablePlayerCheckpoint(playerid);
			    if(listitem == 0)
			    {//Spawn
			   		SetPlayerCheckpoint(playerid, 1426.6286, -1713.1496, 13.3828, 4.0);
					SetDestination(playerid, 1426.6286, -1713.1496, 13.3828);
			    }
                if(listitem == 1)
			    {//Bank
			   		SetPlayerCheckpoint(playerid, 1460.3607, -1032.0263, 23.6562, 4.0);
					SetDestination(playerid, 1460.3607, -1032.0263, 23.6562);
			    }
				if(listitem == 2)
			    {//CNN
			   		SetPlayerCheckpoint(playerid, 840.3031, -1039.1005, 25.0338, 4.0);
					SetDestination(playerid, 840.3031, -1039.1005, 25.0338);
			    }
			    if(listitem == 3)
			    {//Gun Shop
			   		SetPlayerCheckpoint(playerid, 1789.5363, -1171.5458, 23.6517, 4.0);
					SetDestination(playerid, 1789.5363, -1171.5458, 23.6517);
			    }
			    if(listitem == 4)
			    {//Car Rent
			   		SetPlayerCheckpoint(playerid, 1108.8145, -1742.6394, 13.3984, 4.0);
					SetDestination(playerid, 1108.8145, -1742.6394, 13.3984);
			    }
				if(listitem == 5)
			    {//Boat Rent
			   		SetPlayerCheckpoint(playerid, 705.9959, -1589.1553, 13.9918, 4.0);
					SetDestination(playerid, 705.9959, -1589.1553, 13.9918);
			    }
			    if(listitem == 6)
			    {//Moto Rent
			   		SetPlayerCheckpoint(playerid, 1213.8011, -1850.6776, 13.3828, 4.0);
					SetDestination(playerid, 1213.8011, -1850.6776, 13.3828);
			    }
				if(listitem == 7)
			    {//Car Dealership
			   		SetPlayerCheckpoint(playerid, 2131.7759,-1150.5256,24.1473, 4.0);
					SetDestination(playerid, 2131.7759,-1150.5256,24.1473);
			    }
			}
	    }
	    case DIALOG_GPS + 2:
	    {
	        if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Global Positioning System", "Important locations\nHead Quarters", "Select", "Cancel");
			}
			else
			{
                PPizzaCP[playerid] = -1, PSweeperCP[playerid] = -1, PTruckerCP[playerid] = -1, PFarmerCP[playerid] = -1;
	 			DisablePlayerCheckpoint(playerid);
	 			if(listitem == 0)
			    {//Police Dept.
			   		SetPlayerCheckpoint(playerid, 1532.3709, -1628.9783, 13.3828, 4.0);
					SetDestination(playerid, 1532.3709, -1628.9783, 13.3828);
			    }
			    if(listitem == 1)
			    {//Groove St. 125
			   		SetPlayerCheckpoint(playerid, 2455.7412, -1661.1595, 13.3046, 4.0);
					SetDestination(playerid, 2455.7412, -1661.1595, 13.3046);
			    }
                if(listitem == 2)
			    {//Grape Street Watts
			   		SetPlayerCheckpoint(playerid, 1998.5736, -1134.0631, 25.3679, 4.0);
					SetDestination(playerid, 1998.5736, -1134.0631, 25.3679);
			    }
			    if(listitem == 3)
			    {//Varrio Nuevo Estrada
			   		SetPlayerCheckpoint(playerid, 1883.5467, -2049.6381, 13.3828, 4.0);
					SetDestination(playerid, 1883.5467, -2049.6381, 13.3828);
			    }
			    if(listitem == 4)
			    {//SA Goverment
			   		SetPlayerCheckpoint(playerid, 1626.3781, -1729.5399, 13.3828, 4.0);
					SetDestination(playerid, 1626.3781, -1729.5399, 13.3828);
			    }
	 			if(listitem == 5)
			    {//SA Network
			   		SetPlayerCheckpoint(playerid, 778.2163, -1392.9984, 13.4159, 4.0);
					SetDestination(playerid, 778.2163, -1392.9984, 13.4159);
			    }
			    if(listitem == 6)
			    {//Emergency Dept.
			   		SetPlayerCheckpoint(playerid, 1196.5617, -1323.5170, 13.3984, 4.0);
					SetDestination(playerid, 1196.5617, -1323.5170, 13.3984);
			    }
			}
	    }
	    case DIALOG_BUS:
	    {
	        if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the bus menu.");
				return 1;
			}
			else
			{
				if(listitem == 0)
				{//Line 1
                    new tmpcar = GetPlayerVehicleID(playerid);
                    if(PlayerData[playerid][Job] == 6 && StaticVeh[tmpcar][vJob] == 6)
                    {
						SendClientMessage(playerid, COLOR_WHITE, "You are driving on {FFA500}Line 1{FFFFFF}.");
						PBusCP[playerid] = 0;
						SetPlayerCheckpoint(playerid, BusStations[Line1[PBusCP[playerid]]][bsX], BusStations[Line1[PBusCP[playerid]]][bsY], BusStations[Line1[PBusCP[playerid]]][bsZ], 3.0);
						SetDestination(playerid, BusStations[Line1[PBusCP[playerid]]][bsX], BusStations[Line1[PBusCP[playerid]]][bsY], BusStations[Line1[PBusCP[playerid]]][bsZ]);
						new text[128];
						format(text,sizeof(text),"{FFFFFF}1 | {FFA500}%s",BusStations[Line1[PBusCP[playerid]]][bsName]);
						UpdateBusText(tmpcar,text);
						VJob[playerid] = tmpcar;
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(tmpcar, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(tmpcar, engine, lights, alarm, 1, bonnet, boot, objective);
					}
				}
				if(listitem == 1)
				{//Special Line
					ShowPlayerDialog(playerid, DIALOG_BUS + 1, DIALOG_STYLE_INPUT, "Station Name", "Please enter below your station name.", "Enter", "");
				}
			}
	    }
	    case DIALOG_BUS + 1:
	    {
	        if(strlen(inputtext) < 18 && (!FindIP(inputtext) || Findhtml(inputtext)))
	        {
	            new text[512];
				new newcar = GetPlayerVehicleID(playerid);
				format(text,sizeof(text),"{FFFFFF}S | {FFA500}%s",inputtext);
				UpdateBusText(newcar,text);
				DisablePlayerCheckpoint(playerid);
			    PBusCP[playerid] = -2;
			    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(newcar, engine, lights, alarm, 1, bonnet, boot, objective);
	        }
	    }
	    case DIALOG_JOBS:
	    {
	        if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the job menu.");
				return 1;
			}
			else
			{
				if(listitem == 0)
				{//Pizzaboy
					SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Pizza Boy {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, 2106.4048,-1789.2028,13.5608, 3.0);
				}
				if(listitem == 1)
				{//Street Sweeper
					SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Street Sweeper {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, 1626.3418,-1896.2357,13.5514, 3.0);
				}
				if(listitem == 2)
				{//Trucker
					SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Trucker {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, -77.1289,-1136.4659,1.0781, 3.0);
				}
				if(listitem == 3)
				{//Farmer
					SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Farmer {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, -1060.9696,-1195.4563,129.6936, 3.0);
				}
				if(listitem == 4)
				{//Bus Driver
					SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Bus Driver {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, 1820.2936,-1402.4757,13.6672, 3.0);
				}
				if(listitem == 5)
				{//Garbage
				    SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Garbageman {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, 2076.9292,-2047.7618,13.5469, 3.0);
				}
				if(listitem == 6)
				{//Arms
				    SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Arms Dealer {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, 2778.8449, -1416.5430, 24.7453, 3.0);
				}
				if(listitem == 7)
				{//Drugs
                    SendClientMessage(playerid, COLOR_WHITE, "Server placed you a checkpoint at {FFA500}Drugs Dealer {FFFFFF}job. Please follow it.");
					SetPlayerCheckpoint(playerid, 2121.1872, -2274.2968, 20.6718, 3.0);
				}
			}
	    }
		case DIALOG_EMAIL:
		{
		    if(IsMail(inputtext) && response && strlen(inputtext)<30)
			{
			    strmid(PlayerData[playerid][Email], inputtext, 0, strlen(inputtext), 64);
				new str[128];
				
			   	mysql_format(SQL, str,128,"UPDATE `users` SET `Email`='%s' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Email],PlayerData[playerid][ID]);
				mysql_tquery(SQL, str, "", "");
				
				format(string, sizeof(string), "{F3FF02}REGISTRATION: {FFFFFF}You have set your email address to: %s", PlayerData[playerid][Email]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				ShowPlayerDialog(playerid, DIALOG_REFFERAL, DIALOG_STYLE_MSGBOX, "Account Refferal", "Do you have any refferal (player that brought you here)?", "Yes", "No");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Email", "Incorrect E-mail format\n\nPlease enter below your email address.", "OK", "");
			}
		}
		case DIALOG_REFFERAL:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "Account Registration", "Thank you for filling in all the information,\nnow you will proceed to the Tutorial.", "OK", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_REFFERAL + 1, DIALOG_STYLE_INPUT, "Account Refferal", "Please enter below the refferal ID", "OK", "Back");
			}
		}
		case DIALOG_REFFERAL + 1:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_REFFERAL, DIALOG_STYLE_MSGBOX, "Account Refferal", "Do you have any refferal (player that brought you here)?", "Yes", "No");
			}
			else
			{
				new refid = strval(inputtext);
				if(refid <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_REFFERAL + 1, DIALOG_STYLE_INPUT, "Account Refferal", "Invalid refferal ID\nPlease enter below the refferal ID", "OK", "Back");
					return 1;
				}
				PlayerData[playerid][Refferal] = refid;
				mysql_format(SQL, query, 128, "SELECT `username` FROM `users` WHERE ID = '%d' LIMIT 1",refid);
				mysql_tquery(SQL, query, "RefferalName", "d", playerid);
			}
		}
		case DIALOG_REFFERAL + 2:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_REFFERAL, DIALOG_STYLE_MSGBOX, "Account Refferal", "Do you have any refferal (player that brought you here)?", "Yes", "No");
			}
			else
			{
				mysql_format(SQL, query,128,"UPDATE `users` SET `Refferal`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Refferal],PlayerData[playerid][ID]);
				mysql_tquery(SQL, query, "", "");
				
				mysql_format(SQL, query,128,"UPDATE `users` SET TRefferals = TRefferals + 1 WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Refferal]);
				mysql_tquery(SQL, query, "", "");
				
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "Account Registration", "Thank you for filling in all the information,\nnow you will proceed to the Tutorial.", "OK", "");
			}
		}
		case DIALOG_HELP:
		{
		    if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the help menu.");
				return 1;
			}
			else
			{
				new stringh[1256],titleh[128];
				if(listitem == 0)
				{//Server{A9C4E4}
					titleh = "Help - Server";
					stringh = "This server is a Roleplay(RPG) Server.\n\nIf you're confused and you would like to know more information, \nask a player or an admin ({FFFFFF}/admins{A9C4E4}) - by using command {FFFFFF}/report{A9C4E4}.\n\nType {FFFFFF}/tutorial{A9C4E4} to retake the tutorial.\n\n\nScripter: {FFFFFF}Maurice{A9C4E4}.";
				}
				if(listitem == 1)
				{//Account
					titleh = "Help - Account";
					stringh = "{FFFFFF}/stats {A9C4E4}- To view your current stats\n{FFFFFF}/changepass {A9C4E4}- To change your password\n{FFFFFF}/tutorial {A9C4E4}- To retake the tutorial";
				}
				if(listitem == 2)
				{//General
					titleh = "Help - General";
					stringh = "{FFFFFF}/id {A9C4E4}- To find out the ID / Level of a person\n";
					strcat(stringh, "{FFFFFF}/pay /buy /drink\n");
					strcat(stringh, "{FFFFFF}/licenses {A9C4E4}- To view your current licenses\n");
					strcat(stringh, "{FFFFFF}/clothes {A9C4E4}- To change your skin\n");
					strcat(stringh, "{FFFFFF}/eject {A9C4E4}- To kick a person from your vehicle\n");
					strcat(stringh, "{FFFFFF}/speedlimit {A9C4E4}- To setup a cruise control\n");
				}
				if(listitem == 3)
				{//Chat
					titleh = "Help - Chat";
					stringh = "{FFFFFF}/s {A9C4E4}- To shout\n";
					strcat(stringh, "{FFFFFF}/n {A9C4E4}- To ask questions to players 1-7, admins and helpers.\n");
					strcat(stringh, "{FFFFFF}/w {A9C4E4}- To whisper something to somebody\n");
					strcat(stringh, "{FFFFFF}/cw {A9C4E4}- To whisper something to somebody (in a car)\n");
					strcat(stringh, "{FFFFFF}/f {A9C4E4}- To speak with member of a faction\n");
					strcat(stringh, "{FFFFFF}/b {A9C4E4}- To speak in other language\n");
					strcat(stringh, "{FFFFFF}/me {A9C4E4}- To show an action\n");
				}
				if(listitem == 4)
				{//Bank
					titleh = "Help - Bank";
					stringh = "{FFFFFF}/balance {A9C4E4}- To view your account\n";
					strcat(stringh, "{FFFFFF}/withdraw {A9C4E4}- To whitdraw some money.\n");
					strcat(stringh, "{FFFFFF}/deposit {A9C4E4}- To deposit some money.\n");
					strcat(stringh, "{FFFFFF}/transfer {A9C4E4}- To transfer some money.\n");
				}
				if(listitem == 5)
				{//Job
					titleh = "Help - Job";
				}
				if(listitem == 6)
				{//Faction
					titleh = "Help - Faction";
				}
				if(listitem == 7)
				{//Others
					titleh = "Help - Others";
					stringh = "{FFFFFF}/n to ask for more commands\n";
				}
				ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX,titleh,stringh,"Close","");
			}
		}
        case DIALOG_BUY:
		{
			if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the buy menu.");
				return 1;
			}
			else
			{
				if(listitem == 0)
				{//Cell Phone
					if(PlayerData[playerid][Cash] < 50) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money!");

					new randphone = 1000000 + random(8999999);
					PlayerData[playerid][PhoneNr] = randphone;

					format(string, sizeof(string), "Mobile phone purchased your new number is %s", DecimalNumber(playerid));
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_GRAD5, "You can check this anytime by Typing /stats");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: You can now type /help to see your cell phone commands.");
					GivePlayerCash(playerid, -50);

					mysql_format(SQL, query, 128,"UPDATE `users` SET `PhoneNr`='%d',`FormatNr`='%s' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][PhoneNr],DecimalNumber(playerid),PlayerData[playerid][ID]);
					mysql_tquery(SQL, query, "", "");
				}
				if(listitem == 1)
				{//Dice
					if(PlayerData[playerid][Cash] < 10) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money!");
					GivePlayerCash(playerid, -10);
					
					Dice[playerid] = 1;
					format(string, sizeof(string), "Dice purchased you can throw your dice.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /dice");
				}
				if(listitem == 2)
				{//GasCan
					if(PlayerData[playerid][Fuel] == 100) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You have 100!");
					if(PlayerData[playerid][Cash] < 50) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money!");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /fillcar");
					
					GivePlayerCash(playerid, -50);
					PlayerData[playerid][Fuel] += 10;

					mysql_format(SQL, query, 128,"UPDATE `users` SET `Fuel`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Fuel],PlayerData[playerid][ID]);
					mysql_tquery(SQL, query, "", "");
				}
				if(listitem == 3)
				{//Camera
				    if(PlayerData[playerid][Cash] < 30) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money!");
                    SendClientMessage(playerid, COLOR_WHITE, "($30) You purchase a camera with 15 slots.");
					GivePlayerWeapon(playerid, 43, 15);
				}
				ShowPlayerDialog(playerid,DIALOG_BUY,DIALOG_STYLE_LIST,"24/7 Menu","1. Cell Phone ($50)\n2. Dice ($10)\n3. Gas Can ($50)\n4. Camera ($30)","Buy","Close");
			}
		}
		case DIALOG_TUTORIAL:
		{
			SetPlayerPos(playerid,-1053.1190,1123.6959,0.4282);
			SetPlayerCameraPos(playerid,-1055.6941,1122.0156,2.4371);
			SetPlayerCameraLookAt(playerid,-1261.4883,960.6235,105.7553);
			stringt = "Salutari! Intrucat sunteti nou pe acest server, va vom prezenta cateva detalii si informatii\n";
			strcat(stringt, "referitoare la acesta pentru a stii ce e bine  si ce trebuie sa evitati sa faceti. Va rugam de\n");
			strcat(stringt, "asemenea sa va concentrati asupra tutorialului ce urmeaza sa se desfasoare pentru a evita\n");
			strcat(stringt, "viitoarele intrebari suplimentare.");
			if(!response)
	        {
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 1, DIALOG_STYLE_MSGBOX, "Tutorial - Inceputul", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 1, DIALOG_STYLE_MSGBOX, "Tutorial - Inceputul", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 1:
		{
            stringt = "In primul rand, trebuie mentionat faptul ca acesta este un server Roleplay.\n";
			strcat(stringt, "Nu acceptam jucatorii care nu respecta regulile sau care sunt aici doar pentru Deathmatch.\n");
			strcat(stringt, "De asemenea, numele din joc conteaza foarte mult si fiecare jucator are dreptul de a-si alege\n");
			strcat(stringt, "orice nume placut de el/ea atat timp cat nu este vulgar, agresiv, etc\n");
			strcat(stringt, "Pentru mai multe informatii va rugam sa vizitati www.google.ro\n");

			if(!response)
	        {
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 2, DIALOG_STYLE_MSGBOX, "Tutorial - Despre Server", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 2, DIALOG_STYLE_MSGBOX, "Tutorial - Despre Server", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 2:
		{
            stringt = "In cazul in care aveti o nelamurire, adresati-va politicos unui alt jucator sau unui.\n";
			strcat(stringt, "administrator (/admins) si rugati-l sa va dea explicatii. Totusi, va este interzis sa folositi\n");
			strcat(stringt, "comanda [/report] pentru acest lucru.\n");
				
			if(!response)
	        {
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 3, DIALOG_STYLE_MSGBOX, "Tutorial - Ajutor", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 3, DIALOG_STYLE_MSGBOX, "Tutorial - Ajutor", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 3:
		{
            stringt = "Pentru a obtine bani aveti nevoie de un job. Pe acest server pot fi intalnite doua tipuri de\n";
			strcat(stringt, "joburi: secundare si principale. Puteti detine doar un job secundar si unul principal in acelasi \n");
			strcat(stringt, "timp. Pentru joburile principale trebuie sa depuneti o aplicate pe forumul nostru, in cazul in\n");
			strcat(stringt, "care indepliniti limita minima de nivel pentru factiunea respectiva.\n");
			strcat(stringt, "Level 3: San Andreas Network, Los Santos Emergency Service\n");
			strcat(stringt, "Level 5: Grove St. 125, Grape Street Watts, Vario Nuevo Estrada\n");
			strcat(stringt, "Level 7: Los Santos Police Departament, San Andreas Government\n");

			if(!response)
	        {
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 4, DIALOG_STYLE_MSGBOX, "Tutorial - Joburi", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 4, DIALOG_STYLE_MSGBOX, "Tutorial - Joburi", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 4:
		{
            stringt = "Avansarea in nivel se face in urma timpului petrecut online.\n";
			strcat(stringt, "Pentru a face acest lucru aveti nevoie de un anumit numar de XP, iar un XP se obtine la un minut\n");
			strcat(stringt, "jucat.\n");
			
			if(!response)
	        {
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 5, DIALOG_STYLE_MSGBOX, "Tutorial - Level", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 5, DIALOG_STYLE_MSGBOX, "Tutorial - Level", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 5:
		{
            stringt = "Este interzisa utilizarea hack-urilor.\n";
			strcat(stringt, "In cazul in care observati pe cine care foloseste aceste programe, va rugam sa ne informati\n");
			strcat(stringt, "prin comanda [/report]. Persoanele care folosesc coduri vor primi ban permanent.\n");
			strcat(stringt, "De asemenea, nu uitati faptul ca sistemul anti-cheat functioneaza, iar cei prinsi au parte de ");
			strcat(stringt, "pedeapsa mentionata anterior.");
			if(!response)
	        {
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 6, DIALOG_STYLE_MSGBOX, "Tutorial - Coduri", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 6, DIALOG_STYLE_MSGBOX, "Tutorial - Coduri", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 6:
		{
            stringt = "Drive-by-ul ca sofer este interzis pe acest server. Singurul mod de a face drive-by in\n";
			strcat(stringt, "conformitate cu regulamentul este ca pasager. Daca incalcati aceasta regula veti fi\n");
			strcat(stringt, "sanctionati. De asemenea, Deathmatch-ul excesiv sau fara motiv nu este acceptat. Acesta nu\n");
			strcat(stringt, "este un server pentru deathmatch, motiv pentru care practicarea acestuia duce la ban.");
				
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 7, DIALOG_STYLE_MSGBOX, "Tutorial - Drive-by & DM", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 7, DIALOG_STYLE_MSGBOX, "Tutorial - Drive-by & DM", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 7:
		{
            stringt = "Toti jucatorii sunt obligati sa vorbeasca in romana sau engleza. In cazul in care doriti sa\n";
			strcat(stringt, "folositi o alta limba, utilizati comanda (/b). De asemenea, evitati cu desavarsire limbajul\n");
			strcat(stringt, "indecent si scrieti correct din punct de vedere gramatical. De asemenea, promovarea unor\n");
			strcat(stringt, "alte servere pe chatul acestuia duce la ban permanent.\n");

			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 8, DIALOG_STYLE_MSGBOX, "Tutorial - Limbaj", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 8, DIALOG_STYLE_MSGBOX, "Tutorial - Limbaj", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 8:
		{
            stringt = "Speram ca v-am fost de ajutor si cu aceasta ocazie ati invatat cateva lucruri despre modul\n";
			strcat(stringt, "roleplay prin informatiile prezentate. rG3 va ureaza un stimat 'Bun venit!'");
			strcat(stringt, "si distractie placuta!");
			if(!response)
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 9, DIALOG_STYLE_MSGBOX, "Tutorial - Sfarsit", stringt, "Next", "");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 9, DIALOG_STYLE_MSGBOX, "Tutorial - Sfarsit", stringt, "Next", "");
			}
		}
		case DIALOG_TUTORIAL + 9:
		{
		    if(PlayerData[playerid][Tutorial] == 0)
		    {
				format(string, sizeof(string), "%s(%d) just registered in the game.", PlayerData[playerid][Name], playerid);
				SendHelperMessage(COLOR_LIGHTRED,string);
		    }
		    new str[128];
		    PlayerData[playerid][Tutorial] = 1;
		    mysql_format(SQL, str,128,"UPDATE `users` SET `Tutorial`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Tutorial],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
		    SetCameraBehindPlayer(playerid);
			SpawnPlayer(playerid);
		}
		
	    case DIALOG_LOGIN:
	    {
	        if(!response)
	            return Kick(playerid);
	            
            if((strlen(inputtext) > 0) && (strlen(inputtext) < 25))
		    {
				new hashed_pass[129];
				WP_Hash(hashed_pass, sizeof(hashed_pass), inputtext);

				if(strcmp(hashed_pass, PlayerData[playerid][Password]) == 0)
				{//Corect password
					mysql_format(SQL, query, sizeof(query), "SELECT * FROM `users` WHERE `username` = '%e' LIMIT 1", PlayerData[playerid][Name]);
					mysql_tquery(SQL, query, "PrePlayerLogin", "d", playerid);
				}
				else
				{//Incorrect password
				    PlayerData[playerid][LoginAttempts]++;
				    if(PlayerData[playerid][LoginAttempts] >= 3)
				    {
						Kick(playerid);
					}
					else
					    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", "Wrong password!\n Please enter your password in the field below:", "Login", "Abort");
				}
			}
			else
			{
				if(strlen(inputtext) == 0)
				{
				    PlayerData[playerid][LoginAttempts]++;
				    if(PlayerData[playerid][LoginAttempts] >= 3)
					{
						Kick(playerid);
					}
					else
					    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", "Wrong password!\n Please enter your password in the field below:", "Login", "Abort");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "{FF0000}AdmBot{FFFFFF}: You've enter a very long password, nice try. Your IP was saved in our log.");
					format(string, sizeof(string), "%s enters a very long password in login dialog",PlayerData[playerid][Name]);
					FloodLog(string,playersip);
					format(string, 256, "Warning: %s(%d) enters a very long password in login dialog | IP: %s", PlayerData[playerid][Name],playerid,playersip);
					ABroadCast(RED,string,1);
					KickEx(playerid);
				}
			}
	    }
	    
	    case DIALOG_REGISTER:
	    {
	        if(!response)
	            return Kick(playerid);
	            
			if((strlen(inputtext) > 0) && (strlen(inputtext) < 25))
		    {
				WP_Hash(PlayerData[playerid][Password], 129, inputtext);

				mysql_format(SQL, query, sizeof(query), "INSERT INTO `users` (`username`, `password`) VALUES ('%e', '%s')", PlayerData[playerid][Name], PlayerData[playerid][Password]);
				mysql_tquery(SQL, query, "OnPlayerRegister", "d", playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}AdmBot{FFFFFF}: You've enter a very long password, nice try. Your IP was saved in our log.");
				format(string, sizeof(string), "%s enters a very long password in login dialog",PlayerData[playerid][Name]);
				FloodLog(string,playersip);
				format(string, 256, "Warning: %s(%d) enters a very long password in login dialog | IP: %s", PlayerData[playerid][Name],playerid,playersip);
				ABroadCast(RED,string,1);
				KickEx(playerid);
			}
	    }
	    
		case DIALOG_ATELEPORT:
		{//Admin Teleport
			if(response)
			{
				if(listitem == 0)
				{//Important Places
					ShowPlayerDialog(playerid, DIALOG_ATELEPORT+1, DIALOG_STYLE_LIST, "Teleport List - Important Places", "Bank LS\nBank SF\nCity Hall\nCNN LS\nCNN LV\nDealership\nEnter Unity Station\nExit Unity Station\nExam\nJobs\nLSPD\nSFPD", "Teleport!", "Cancel");
				}
				if(listitem == 1)
				{//HQ's
					ShowPlayerDialog(playerid, DIALOG_ATELEPORT+2, DIALOG_STYLE_LIST, "Teleport List - HQ's", "None.", "Teleport!", "Cancel");
				}
				if(listitem == 2)
				{//Others
					ShowPlayerDialog(playerid, DIALOG_ATELEPORT+3, DIALOG_STYLE_LIST, "Teleport List - Others", "Admin Base\nLos Santos Beach\nMount Chilliad\nInterior\nRace Place\nJet\nMeeting Room", "Teleport!", "Cancel");
				}
			}
			else return SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the teleport menu.");
		}
		
		case DIALOG_ATELEPORT+1:
		{//Important Places
			if(response)
			{
				if(listitem == 0)
				{//Bank LS
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1456.4750,-1044.7905,23.5552);
					}
					else
					{
						SetPlayerPos(playerid, 1456.4750,-1044.7905,23.5552);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Bank LS !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 1)
				{//Bank SF
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -2748.9695,376.2873,4.1328);
					}
					else
					{
						SetPlayerPos(playerid, -2748.9695,376.2873,4.1328);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Bank SF !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 2)
				{//City Hall
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1479.7981,-1738.6937,13.2740);
					}
					else
					{
						SetPlayerPos(playerid, 1479.7981,-1738.6937,13.2740);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to City Hall !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 3)
				{//CNN LS
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 834.3840,-1025.6362,25.8947);
					}
					else
					{
						SetPlayerPos(playerid, 834.3840,-1025.6362,25.8947);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to CNN LS !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 4)
				{//CNN LV
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2096.5972,2049.5010,10.8203);
					}
					else
					{
						SetPlayerPos(playerid, 2096.5972,2049.5010,10.8203);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to CNN LV !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 5)
				{//Dealership
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -1614.4160,1194.0829,7.0391);
					}
					else
					{
						SetPlayerPos(playerid, -1614.4160,1194.0829,7.0391);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Dealership !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 6)
				{//Enter U. Station
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -1992.1525,99.0207,27.2853);
					}
					else
					{
						SetPlayerPos(playerid, -1992.1525,99.0207,27.2853);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Unity Station (Exterior) !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}			
				if(listitem == 7)
				{//Exit U. Station
					SetPlayerPos(playerid, 16.0883,33.4171,973.3144);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("UnfreezeT", 3000, 0, "d", playerid);
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Unity Station (Interior) !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 8)
				{//Exam
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2088.1318,-1923.1281,13.2723);
					}
					else
					{
						SetPlayerPos(playerid, 2088.1318,-1923.1281,13.2723);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Exam !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 9)
				{//Jobs
					//Jobs  ---
				}
				if(listitem == 10)
				{//LSPD
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1513.0652,-1662.2667,13.2740);
					}
					else
					{
						SetPlayerPos(playerid, 1513.0652,-1662.2667,13.2740);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to LSPD !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 11)
				{//SFPD
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -1627.3053,730.7319,14.4609);
					}
					else
					{
						SetPlayerPos(playerid, -1627.3053,730.7319,14.4609);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to SFPD !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
			}
			else
			{
				ShowPlayerDialog(playerid, 32700, DIALOG_STYLE_LIST, "Teleport List", "Important Places\nHQ's\nOthers", "Teleport!", "Cancel");
			}
		}
		
		case DIALOG_ATELEPORT+2:
		{//HQ's
			if(response)
			{
				//
			}
			else
			{
				ShowPlayerDialog(playerid, 32700, DIALOG_STYLE_LIST, "Teleport List", "Important Places\nHQ's\nOthers", "Teleport!", "Cancel");
			}
		}
		
		case DIALOG_ATELEPORT+3:
		{//Others
			if(response)
			{
				if(listitem == 0)
				{//Adminbase
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -518.0380,2592.7720,53.4154);
					}
					else
					{
						SetPlayerPos(playerid, -518.0380,2592.7720,53.4154);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Adminbase !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 1)
				{//LS Beach
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 330.1483,-1801.3478,4.6435);
					}
					else
					{
						SetPlayerPos(playerid, 330.1483,-1801.3478,4.6435);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to LS Beach !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 2)
				{//Chilliad
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -2311.7415,-1637.7587,483.2643);
					}
					else
					{
						SetPlayerPos(playerid, -2311.7415,-1637.7587,483.2643);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Chilliad !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 3)
				{//Interior
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
						LinkVehicleToInterior(tmpcar,1);
						
					}
					else
					{
						SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
						SetPlayerInterior(playerid,1);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Interior !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 4)
				{//Race Place
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
						LinkVehicleToInterior(tmpcar,4);
						
					}
					else
					{
						SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
						SetPlayerInterior(playerid,4);
					}
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to RacePlace !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 5)
				{//Jet
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
					SetPlayerInterior(playerid,1);
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Jet !",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
				if(listitem == 6)
				{//Meeting Room
					SetPlayerPos(playerid, -208.2190,-227.4891,1146.9297);
					SetPlayerInterior(playerid,0);
					format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been teleported to Meeting Room!",PlayerData[playerid][Name]);
					ABroadCast(COLOR_WHITE,string,6);
				}
			}
			else
			{
				ShowPlayerDialog(playerid, 32700, DIALOG_STYLE_LIST, "Teleport List", "Important Places\nHQ's\nOthers", "Teleport!", "Cancel");
			}
		}

		case DIALOG_BLICENSE:
		{
		    if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the menu.");
				return 1;
			}
			else
			{
			    if(listitem == 0)
				{//Driving License 50
    				if(PlayerData[playerid][Cash] < 50 && PlayerData[playerid][Level] > 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
					if(PlayerData[playerid][CarLic] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have that license.");
					DrivingTest(playerid);
				}
				if(listitem == 1)
				{//Flying License 300
				    if(PlayerData[playerid][Cash] < 300) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
                    if(PlayerData[playerid][FlyLic] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have that license.");
					SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}We take $150 before you start the test.");
           			GivePlayerCash(playerid, -150);
           			FlyingTest(playerid);
				}
				if(listitem == 2)
				{//Sailing License 150
				    if(PlayerData[playerid][Cash] < 150) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
                    if(PlayerData[playerid][BoatLic] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have that license.");
					SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}We take $75 before you start the test.");
                    GivePlayerCash(playerid, -75);
                    SailingTest(playerid);
				}
				if(listitem == 3)
				{//Weapon License 250
    				if(PlayerData[playerid][Cash] < 250) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
                    if(PlayerData[playerid][GunLic] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have that license.");
					SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}You recieved the Weapon License.");
				    
				    GivePlayerCash(playerid, -250);
					PlayerData[playerid][GunLic] = 10000;
					mysql_format(SQL, query, 128,"UPDATE `users` SET `GunLic`='10000' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][ID]);
					mysql_tquery(SQL, query, "", "");
				}
				if(listitem == 4)
				{//Materials License 200
				    if(PlayerData[playerid][Cash] < 200) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
                    if(PlayerData[playerid][MatsLic] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have that license.");
					SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}You recieved the Materials License.");
                    
                    GivePlayerCash(playerid, -200);
					PlayerData[playerid][MatsLic] = 10000;
					mysql_format(SQL, query, 128,"UPDATE `users` SET `MatsLic`='10000' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][ID]);
					mysql_tquery(SQL, query, "", "");
				}
			}
		}
		case DIALOG_FAQ:
		{
		
			if(!response)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the faq menu.");
				return 1;
			}
			else
			{
				if(listitem == 0)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How can I earn money?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}There are several ways to earn money, the best way to earn money for begginers");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}is to have a job. You can choose from trucker, farmer, garbage man and bus driver.");
				}
				if(listitem == 1)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to level up?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}The only method to level up is to stay as long as you can ingame to obtain XP.");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}When the red bar is full, you passed the level.");
				}
				if(listitem == 2)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How do I earn XP?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}You get 1 respect point every minute.");
				}
				if(listitem == 3)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}Where is the dealership?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}If you want to find a location on our server you can type [/gps].");
				}
				if(listitem == 4)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to get a job?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}You can type [/jobs] to see a list of jobs.");
				}
				if(listitem == 5)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}What is the best job?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}All level 1 jobs are good.");
				}
				if(listitem == 6)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How can I buy a car?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}You need level 5 and a sum of money. You go to the dealership,");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}type [/buyvehicle] and a list will appear.");
				}
				if(listitem == 7)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to light the headlights?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}Press CTRL.");
				}
				if(listitem == 8)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to get a license?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}To buy a license you need to type /buylicense in the spawn building.");
				}
				if(listitem == 9)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to find someone number?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}If you want to find a player's mobile number, you have to buy a phone and a");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}phonebook from a 24/7. After you can use the command [/number] to find the number.");
				}
				if(listitem == 10)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to change my skin?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}Press F4 and suicide.");
				}
				if(listitem == 11)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How to join a faction?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}You need the minimum level and a form application.");
				}
				if(listitem == 12)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Q: {FFFFFF}How can I be admin?");
					SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}A: {FFFFFF}You need to be very active and have a good behavior.");
				}
			}
	    }
	    
		case DIALOG_WANTED:
		{
			if(response)
			{
				new id = Suspects[playerid][listitem];
				if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
				SendClientMessage(playerid, COLOR_WHITE,"{5181EE}______-={FFFFFF}MOBILE DATA COMPUTER{5181EE}=-_______");
				format(string, sizeof(string), "{B5B5B5}Name: {FFFFFF}%s", PlayerData[id][Name]);
				SendClientMessage(playerid, COLOR_WHITE,string);
				format(string, sizeof(string), "{B5B5B5}Current Crimes: {FFFFFF}%d", PlayerData[id][MDC]);
				SendClientMessage(playerid, COLOR_WHITE,string);
				format(string, sizeof(string), "{B5B5B5}Wanted Level: {FFFFFF}%d", PlayerData[id][WantedLevel]);
				SendClientMessage(playerid, COLOR_WHITE,string);
				format(string, sizeof(string), "{B5B5B5}Time until track lose: {FFFFFF}%d mins", PlayerData[id][TrackLose]);
				SendClientMessage(playerid, COLOR_WHITE,string);
				if(PlayerData[id][MDC] == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2,"Last Crime:");
					format(string,sizeof(string),"- %s {B5B5B5}(Claimant: {FFFFFF}%s{B5B5B5}) on %s",PlayerData[id][LastCrime],PlayerData[id][LastReporter],PlayerData[id][LastDate]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				else
				{
					for(new i = 0; i < PlayerData[id][MDC]; i++)
					{
						format(string,sizeof(string),"- %s {B5B5B5}(Claimant: {FFFFFF}%s{B5B5B5}) on %s",MDCData[id][i][mReason],MDCData[id][i][mReporter],MDCData[id][i][mDate]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				format(string, sizeof(string), "{B5B5B5}Total crimes commited: {FFFFFF}%d", PlayerData[id][Crimes]);
				SendClientMessage(playerid, COLOR_WHITE,string);
				format(string, sizeof(string), "{B5B5B5}Times arrested: {FFFFFF}%d", PlayerData[id][Arrests]);
				SendClientMessage(playerid, COLOR_WHITE,string);
				SendClientMessage(playerid, COLOR_WHITE,"{5181EE}_______________________________________");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(id, X,Y,Z);
				SetPlayerCheckpoint(playerid, X,Y,Z, 3);
				PlayerData[playerid][PlayerToFind] = id;
			}
			else return SendClientMessage(playerid, COLOR_YELLOW2, "You've closed the wanted menu.");
		}
		
		case DIALOG_SKINS:
		{
			if(response)
			{//Next
				new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
				PlayerData[playerid][CSkin] += 1;
				if(PlayerData[playerid][CSkin] == tfactionskins[faction]) PlayerData[playerid][CSkin] = 0;
				PlayerData[playerid][Char] = factionskins[faction][PlayerData[playerid][CSkin]];
				SetPlayerSkin(playerid,factionskins[faction][PlayerData[playerid][CSkin]]);
				ShowPlayerDialog(playerid, DIALOG_SKINS, DIALOG_STYLE_MSGBOX, "Clothes", "Use {FFFFFF}Next {A9C4E4}to select the char you want to use.\nWhen you are done press {FFFFFF}Done{A9C4E4}.", "Next", "Done");
			}
			else
			{//Done
				SpawnPlayer(playerid);
				new str[128];
				mysql_format(SQL, str,128,"UPDATE `users` SET `Chara`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Char],PlayerData[playerid][ID]);
				mysql_tquery(SQL, str, "", "");
			}
		}
		
		case DIALOG_DSINFO:
		{
		    if(response)
  			{
  			    SelectTextDraw(playerid, 0xFF0000FF);
  			}
  			else
  			{
  			    SelectTextDraw(playerid, 0xFF0000FF);
  			}
		}
		
		case DIALOG_RADIO:
		{
			if(!response)
			{
				return 1;
			}
			switch(listitem)
			{
				case 0:
				{
					PlayAudioStreamForPlayer(playerid,"http://80.86.106.136:8000/");
					RadioSet[playerid] = 666;
				}
				case 1:
				{
					PlayAudioStreamForPlayer(playerid,"http://80.86.106.35:8000/");
					RadioSet[playerid] = 1;
				}
				case 2:
				{
					PlayAudioStreamForPlayer(playerid,"http://stream.profm.ro:8012/profm.mp3");
					RadioSet[playerid] = 2;
				}
				case 3:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.radio21.ro/site/Radio21Live.m3u");
					RadioSet[playerid] = 3;
				}
				case 4:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.radiozu.ro/live.m3u");
					RadioSet[playerid] = 4;
				}
				case 5:
				{
					PlayAudioStreamForPlayer(playerid,"http://radiotaraf.no-ip.biz:7100/");
					RadioSet[playerid] = 5;
				}
				case 6:
				{
					PlayAudioStreamForPlayer(playerid,"http://89.238.252.146:9000/listen.pls");
					RadioSet[playerid] = 6;
				}
				case 7:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.radiointens.ro/asculta-live.m3u");
					RadioSet[playerid] = 7;
				}
				case 8:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.greudedifuzat.eu/greudedifuzat.pls");
					RadioSet[playerid] = 8;
				}
				case 9:
				{
					PlayAudioStreamForPlayer(playerid,"http://asculta.radiotequila.ro:8989/listen.pls");
					RadioSet[playerid] = 9;
				}
				case 10:
				{
					PlayAudioStreamForPlayer(playerid,"http://live.eliberadio.ro:8000/listen.pls");
					RadioSet[playerid] = 10;
				}
				case 11:
				{
					StopAudioStreamForPlayer(playerid);
					RadioSet[playerid] = 0;
				}
			}
			return 1;
		}
		
		case DIALOG_SERVER:
		{
			if(response)
			{
				if(listitem == 0)
				{//Gravity
					ShowPlayerDialog(playerid, DIALOG_SERVER+1, DIALOG_STYLE_INPUT, "Server Gravity", "Enter the server's gravity", "Change", "");
				}		
				if(listitem == 1)
				{//Name
					ShowPlayerDialog(playerid, DIALOG_SERVER+2, DIALOG_STYLE_INPUT, "Server Name", "Enter the server's name", "Change", "");
				}
				if(listitem == 2)
				{//Password
					ShowPlayerDialog(playerid, DIALOG_SERVER+3, DIALOG_STYLE_INPUT, "Server Password", "Enter the server's password", "Change", "");
				}	
				if(listitem == 3)
				{//Website
					ShowPlayerDialog(playerid, DIALOG_SERVER+4, DIALOG_STYLE_INPUT, "Server Website", "Enter the server's website", "Change", "");
				}
			}
		}
		
		/*
		case DIALOG_SERVER+1:
		{//Gravity
			new Float:igravity = strval(inputtext);
			format(string,sizeof(string),"gravity %f",igravity);
			SendRconCommand(string);
			format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s changed the gravity to %f!",sendername,igravity);
			ABroadCast(COLOR_WHITE,string,1);
		}
		*/
		
		case DIALOG_SERVER+2:
		{//Name
			new servername[25];
			strmid(servername, inputtext, 0, strlen(inputtext), 999);
			format(string,sizeof(string),"hostname %s",servername);
			SendRconCommand(string);
			format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s changed the server name to %s!",PlayerData[playerid][Name],servername);
			ABroadCast(COLOR_WHITE,string,1);
		}
		
		case DIALOG_SERVER+3:
		{//Password
			new servername[25];
			strmid(servername, inputtext, 0, strlen(inputtext), 999);
			format(string,sizeof(string),"password %s",servername);
			SendRconCommand(string);
			format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s changed the server password to %s!",PlayerData[playerid][Name],servername);
			ABroadCast(COLOR_WHITE,string,1);
		}
		
		case DIALOG_SERVER+4:
		{//Website
			new servername[25];
			strmid(servername, inputtext, 0, strlen(inputtext), 999);
			format(string,sizeof(string),"weburl %s",servername);
			SendRconCommand(string);
			format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s changed the server web to %s!",PlayerData[playerid][Name],servername);
			ABroadCast(COLOR_WHITE,string,1);
		}
		
		case ADMIN_NETSTATS_DIALOGID:
		{
			KillTimer(gNetStatsTimerId);
			gNetStatsPlayerId = INVALID_PLAYER_ID;
		}
		
	    default:
			return 0;
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    new fation = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(PlayerData[playerid][IsLoggedIn] == true && fation == 0 && JoinedCS[playerid] == 0)
	{
	    SetPlayerPos(playerid, 1103.9390,-839.4619,112.3059);
	    SetPlayerCameraPos(playerid, 1102.8582,-831.9663,114.9373);
	    SetPlayerCameraLookAt(playerid, 1103.9390,-839.4619,112.3059);
	    SetPlayerFacingAngle(playerid, 10.0);
	    TogglePlayerControllable(playerid, 0);
		if(classid < 1) classid = 162;
		if(classid > 162) classid = 1;
		SetPlayerSkin(playerid, Peds[classid][0]);
		PlayerData[playerid][Char] = Peds[classid][0];
	}
	else if(fation != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Please use /clothes");
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    new fation = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
    if(PlayerData[playerid][IsLoggedIn] == true && fation == 0)
	{
	    new str[128];
	    TogglePlayerControllable(playerid, 1);
		mysql_format(SQL, str,128,"UPDATE `users` SET `Chara`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[playerid][Char],PlayerData[playerid][ID]);
		mysql_tquery(SQL, str, "", "");
		SetPlayerSkin(playerid, PlayerData[playerid][Char]);
    }
    return 1;
}

function SetPlayerFColor(playerid)
{
	new faction;
	faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	switch(faction)
	{
		case 0: SetPlayerColor(playerid,0xFFFFFFFF); //None
		case 1: SetPlayerColor(playerid,COLOR_DBLUE); //PD
		case 2: SetPlayerColor(playerid,0x40863CFF); //Grove St. 125
		//case 2: SetPlayerColor(playerid,0x006600); //Grove St. 125
		case 3: SetPlayerColor(playerid,0x660066FF); //Grape Street Watts
		//case 3: SetPlayerColor(playerid,0xD900D9FF); //Grape Street Watts
		case 4: SetPlayerColor(playerid,COLOR_LIGHTBLUE); //Varrio Nuevo Estrada
		case 5: SetPlayerColor(playerid,0x98DD17FF); //Parliament
		case 6: SetPlayerColor(playerid,COLOR_PURPLE); //SA Network
		case 7: SetPlayerColor(playerid,COLOR_LIGHTRED); //SA Network
	}
}

function PutPlayerInSpawn(playerid)
{
	new randn = random(sizeof(SpawnSpawns));
	SetPlayerPos(playerid, SpawnSpawns[randn][0], SpawnSpawns[randn][1], SpawnSpawns[randn][2]);
	SetPlayerFacingAngle(playerid, SpawnSpawns[randn][3]);
	return 1;
}

function PutPlayerInJail(playerid)
{
	new randn = random(sizeof(JailSpawns));
	SetPlayerPos(playerid, JailSpawns[randn][0], JailSpawns[randn][1], JailSpawns[randn][2]);
	SetPlayerFacingAngle(playerid, JailSpawns[randn][3]);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("UnfreezeT", 3000, 0, "d", playerid);
	return 1;
}

function IsAtJailPoint(playerid)
{
	if(PlayerToPoint(6.0,playerid,1565.8726,-1695.6337,5.8906))
	{
		return 1;
	}
	return 0;
}

function PrePlayerLogin(playerid)
{
	AssignPlayerData(playerid);
}

function PlayerLogin(playerid,step)
{
	new string[256],playersip[64];
	GetPlayerIp(playerid,playersip, 64);
	switch(step)
	{
		case 0:
		{
			format(string, sizeof(string), "{F81414}MYSQL: {FFFFFF}Checking if your IP is banned.");
			SendClientMessage(playerid, COLOR_WHITE,string);
			
			mysql_format(SQL,string,128,"SELECT * FROM `bans` WHERE `ip`='%s' LIMIT 1",playersip);
			mysql_tquery(SQL,string,"BanInfoo","di",playerid,0);
		}
		case 1:
		{
			format(string, sizeof(string), "{F81414}MYSQL: {FFFFFF}Checking if your account is banned.");
			SendClientMessage(playerid, COLOR_WHITE,string);
			
			mysql_format(SQL,string,128,"SELECT * FROM `bans` WHERE `Player`='%s' LIMIT 1",PlayerData[playerid][Name]);
			mysql_tquery(SQL,string,"BanInfoo","di",playerid,1);
		}
		case 2:
		{//Succes
			SetPlayerScore(playerid, PlayerData[playerid][Level]);
			if (PlayerData[playerid][WantedLevel] > 0)
			{
				format(string, sizeof(string), "When you left the server you had Wanted Level %d.",PlayerData[playerid][WantedLevel]);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				SetPlayerWantedLevel(playerid, PlayerData[playerid][WantedLevel]);
			}
			SetPlayerFColor(playerid);
			SpawnPlayer(playerid);
			SetPlayerSkin(playerid,PlayerData[playerid][Char]);
			GivePlayerMoney(playerid, -GetPlayerMoney(playerid));
			SetPlayerCash(playerid);
			
			new hours, minutes, year, month, day;
			new datestr[128], timestr[32];

			gettime(hours, minutes);
			getdate(year, month, day);
			
			format(string, sizeof(string), "%02d.%02d.%02d %02d:%02d",day,month,year,hours,minutes);
			strmid(PlayerData[playerid][LastLog], string, 0, strlen(string), 255);
			
			PlayerData[playerid][online] = 1;
			mysql_format(SQL, string,128,"UPDATE `users` SET `LastLogin`='%s',`online`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][LastLog],PlayerData[playerid][online],PlayerData[playerid][ID]);
			mysql_tquery(SQL, string, "", "");
	
			format(string, sizeof(string), "%s has logged in from IP: %s", PlayerData[playerid][Name],playersip);
			printf(string);
			
			format(string, sizeof(string), "{F81414}MYSQL: {FFFFFF}Your IP: %s has saved succesfully in our database.",playersip);
			SendClientMessage(playerid, COLOR_WHITE,string);
			

			new country[40], isp[40], city[40];
			GetPlayerCountry(playerid, country, sizeof(country));
			GetPlayerISP(playerid, isp, sizeof(isp));
			GetPlayerCity(playerid, city, sizeof(city));
			
			if(strcmp(isp, "ROMTELECOM S.A") == 0 || strcmp(isp, "RCS & RDS S.A.") == 0)
			{
			    strmid(country, "Romania", 0, strlen("Romania"), 999);
			}
			strmid(PlayerData[playerid][ipCountry], country, 0, strlen(country), 999);
			strmid(PlayerData[playerid][ipCity], city, 0, strlen(city), 999);
			strmid(PlayerData[playerid][ipISP], isp, 0, strlen(isp), 999);
			
			mysql_format(SQL, string,256,"UPDATE `users` SET `ipCountry`='%s',`ipCity`='%s',`ipISP`='%s' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][ipCountry],PlayerData[playerid][ipCity],PlayerData[playerid][ipISP],PlayerData[playerid][ID]);
			mysql_tquery(SQL, string, "", "");
			
			format(string, sizeof(string), "{F81414}MYSQL: {FFFFFF}You logged in from %s (%s) using %s",country,city,isp);
			SendClientMessage(playerid, COLOR_WHITE,string);
			
			LoginLog(playerid,playersip,country,city,isp);
			new XPneed = GetXPPoints(playerid);

			format(string, 100, "%d / %d XP", PlayerData[playerid][Exp], XPneed);
			PlayerTextDrawSetString(playerid, XPRemain, string);

			format(string, 100, "Time Left: %d min", XPneed-PlayerData[playerid][Exp]);
			PlayerTextDrawSetString(playerid, XPTLeft, string);

			format(string, 100, "Level: %d (%d XP)", PlayerData[playerid][Level],PlayerData[playerid][TotalExp]);
			PlayerTextDrawSetString(playerid, XPTotal, string);

			new Float:percent;
			percent = ((PlayerData[playerid][Exp] * 100) / XPneed);
			SetPlayerProgressBarValue(playerid, barxp, percent);
			HidePlayerProgressBar(playerid, barxp);
			ShowPlayerProgressBar(playerid, barxp);

			PlayerTextDrawShow(playerid,XPRemain);
			PlayerTextDrawShow(playerid,XPTLeft);
			PlayerTextDrawShow(playerid,XPTotal);
			
			format(datestr,128,"%02d.%02d.%d", day, month, year);
		   	format(timestr,32,"%02d:%02d",hours,minutes);
		   	
	   		TextDrawSetString(txtTimeDisp,timestr);
	   		TextDrawSetString(txtDateDisp,datestr);
	   		
			TextDrawShowForPlayer(playerid,txtTimeDisp);
			TextDrawShowForPlayer(playerid,txtDateDisp);
			
			new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
			if(faction >= 2 && faction <= 4)
			{
				for(new id = 1; id <= turfss; id++)
				{
					if(TurfInfo[id][zOwned] == 2)
					{
						GangZoneShowForPlayer(playerid, Turfs[id], TurfColorGrove);
					}
					if(TurfInfo[id][zOwned] == 3)
					{
						GangZoneShowForPlayer(playerid, Turfs[id], TurfColorGSW);
					}
					if(TurfInfo[id][zOwned] == 4)
					{
						GangZoneShowForPlayer(playerid, Turfs[id], TurfColorVNE);
					}
				}
				PlayerData[playerid][OnDuty] = 1;
			}
			if(faction == 5) PlayerData[playerid][OnDuty] = 1;
			
			PlayerData[playerid][IsLoggedIn] = true;
			SetPlayerVirtualWorld(playerid, 0);
   			if(PlayerData[playerid][Tutorial] == 0)
			{
			    SetPlayerPos(playerid, -720.3318,1515.9364,76.9307);
				SetPlayerCameraPos(playerid, -721.6722,1515.1118,74.3855);
				SetPlayerCameraLookAt(playerid, -791.6120,1503.1776,40.6432);
				SetPlayerInterior(playerid, 0);
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, COLOR_YELLOW, "Please fill in some information to proceed.");
				ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Email", "Please enter below your email address.", "OK", "");
			}
			AFKLoggin[playerid] = -1;
			if(PlayerData[playerid][Activated] == 0)
			{
				SendClientMessage(playerid, RED, "WARNING: Your account isn't activated");
				SendClientMessage(playerid, RED, "WARNING: Please enter here rg3 ");
	            SendClientMessage(playerid, RED, "WARNING: And activate it as soon as possible.");
			}
		}
	}
	return 1;
}

function BanInfoo(playerid,step)
{
	switch(step)
	{
		case 0:
		{
			if(cache_num_rows() > 0)
			{
				GameTextForPlayer(playerid, "~r~IP BANNED", 5000, 5);
				SendClientMessage(playerid,0xA9C4E4FF,"Your IP is banned on this server.");
				SendClientMessage(playerid,0xA9C4E4FF,"Post a unban request on www.google.ro");
				KickEx(playerid);
			}
			else PlayerLogin(playerid,1);
		}
		case 1:
		{
			if(PlayerData[playerid][Banned] == 0){ PlayerLogin(playerid,2); return 1; }
			
			new adminban[25],banneddatee[50],reason[25],time, string[128];
			new UD, UM, UY, UH, UMi;
			
			cache_get_field_content(0, "Admin", adminban, SQL, 129);
			cache_get_field_content(0, "BannedDate", banneddatee, SQL, 129);
			cache_get_field_content(0, "reason", reason, SQL, 129);
			time = cache_get_field_content_int(0, "time");
			UD = cache_get_field_content_int(0, "UD");
			UM = cache_get_field_content_int(0, "UM");
			UY = cache_get_field_content_int(0, "UY");
			UH = cache_get_field_content_int(0, "UH");
			UMi = cache_get_field_content_int(0, "UMi");
			
			if(PlayerData[playerid][Banned] == 1)
			{//Temporar
				new annres = IsAccBanned(UY,UM,UD,UH,UMi);
				if(annres == 3)
				{//Still banned
					GameTextForPlayer(playerid, "~r~Account BANNED", 5000, 5);
					format(string, sizeof(string), "Your account was banned by %s for %d days, resaon: %s (%s).",adminban,time,reason,banneddatee);
					SendClientMessage(playerid,0xA9C4E4FF,string);
					SendClientMessage(playerid,0xA9C4E4FF,"Post a unban request on www.google.ro");
					KickEx(playerid);
					return 1;
				}
				if(annres == 2)
				{//Unban
					PlayerData[playerid][Banned] = 0;
					mysql_format(SQL,string,128,"UPDATE `users` SET `Banned`='0' WHERE `username`='%s'",PlayerData[playerid][Name]);
					mysql_tquery(SQL,string, "", "");
					mysql_format(SQL,string,128,"DELETE FROM `bans` WHERE `Player`='%s'",PlayerData[playerid][Name]);
					mysql_tquery(SQL,string, "", "");
					ServerInfo[banned]--;
					mysql_format(SQL,string, sizeof(string),"UPDATE `infos` SET `banned`='%d' WHERE ID = 1",ServerInfo[banned]);
					mysql_tquery(SQL,string, "", "");
					PlayerLogin(playerid,2);
				}
			}
			if(PlayerData[playerid][Banned] == 2)
			{//Permanent
				GameTextForPlayer(playerid, "~r~Account BANNED", 5000, 5);
				format(string, sizeof(string), "Your account was banned by %s, resaon: %s (%s).",adminban,reason,banneddatee);
				SendClientMessage(playerid,0xA9C4E4FF,string);
				SendClientMessage(playerid,0xA9C4E4FF,"Post a unban request on www.google.ro");
				KickEx(playerid);
			}
		}
	}
	return 1;
}
function IsAccBanned(iyear,imonth,iday,ihour,iminute)
{
	new year, month,day;
	getdate(year, month, day);
	if(iyear <= year)
	{
		if(iyear < year)
		{
			return 2;
		}
		else if(iyear == year)
		{
			if(imonth < month)
			{
				return 2;
			}
			else if(imonth == month)
			{
				if(iday < day)
				{
					return 2;
				}
				else if(iday == day)
				{
					new hour,minute,second;
					gettime(hour,minute,second);
					if(ihour < hour)
					{
						return 2;
					}
					else if(ihour == hour)
					{
						if(iminute < minute)
						{
							return 2;
						}
						else
						{
							return 3;
						}
					}
					else
					{
						return 3;
					}
				}
				else
				{
					return 3;
				}
			}
			else
			{
				return 3;
			}
		}
		else
		{
			return 3;
		}
	}
	return 1;
}

function OnPlayerRegister(playerid)
{
    new string[128], hours, minutes, year, month, day, loginstring[128];
	PlayerData[playerid][ID] = cache_insert_id();
	
	gettime(hours, minutes);
	getdate(year, month, day);
	
	format(string, sizeof(string), "%02d.%02d.%02d %02d:%02d",day,month,year,hours,minutes);
	strmid(PlayerData[playerid][RegDate], string, 0, strlen(string), 255);

	mysql_format(SQL, string,128,"UPDATE `users` SET `RegisterDate`='%s' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][RegDate],PlayerData[playerid][ID]);
	mysql_tquery(SQL, string, "", "");
	
	format(string, sizeof(string), "Account registered, you can login now by typing your password below.");
	ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", string, "Login", "Abort");
	
	ServerInfo[users]++;
	strmid(ServerInfo[newestacc], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);

	mysql_format(SQL, loginstring,128,"UPDATE `infos` SET `users`='%d' WHERE ID = 1",ServerInfo[users]);
	mysql_tquery(SQL, loginstring, "", "");
	mysql_format(SQL, loginstring,128,"UPDATE `infos` SET `newestacc`='%s' WHERE ID = 1",ServerInfo[newestacc]);
	mysql_tquery(SQL, loginstring, "", "");
	
	return 1;
}

stock ResetKey(car)
{
	foreach(Player, i)
	{
		if(Key[i] == car)
		{
			Key[i] = 0;
			KeyC[i] = 0;
		}
	}
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:range)
{
    new Float:X, Float:Y, Float:Z;
    GetVehiclePos(vehicleid, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, range, X, Y, Z))return true;
    else return false;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(Player, i)
	{
		if( IsPlayerInVehicle( i, vehicleid ) ) return 1;
	}
	return 0;
}

stock FindEmptyID()
{
	new i;
	for(i = 1; i <= pvehs; i++)
	{
		if(CarInfo[i][cID] == -2)
		{
			return i;
		}
	}
	return 0;
}

stock FindSpawnID(car)
{
	new i;
	for(i = 1; i <= pvehs; i++)
	{
		if(CarInfo[i][Spawned] == car)
		{
			return i;
		}
	}
	return 0;
}

function CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[128];
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(PlayerData[playerid][WantedLevel] >= 1)
		{
		    new price = PlayerData[playerid][WantedLevel] * 100;
			new count, cop;
			foreach(Player, i)
			{
			    new faction = PlayerData[i][Member] + PlayerData[i][Leader];
			    if(faction == 1 && CrimInRange(20.0, playerid,i))
			    {
					count = 1;
					format(string, sizeof(string), "~w~Suspect~r~Dead~n~Bonus~g~$%d", price);
					GameTextForPlayer(i, string, 5000, 1);
					GivePlayerCash(i, price);
					cop = i;
				}
			}
			if(count == 1)
			{
			    new time = 0, str[128];

				switch(PlayerData[playerid][WantedLevel])
				{
					case 1: { time = 720; }
					case 2: { time = 960; }
					case 3: { time = 1440; }
					case 4: { time = 1820; }
					case 5: { time = 2160;}
					case 6: { time = 2400;}
				}

				GivePlayerCash(playerid, -price);

				ResetPlayerWeapons(playerid);

				PlayerData[playerid][WantedLevel] = 0;
				PlayerData[playerid][TrackLose] = 0;
				PlayerData[playerid][JailTime] = time;
				PlayerData[playerid][Jailed] = 1;
				PlayerData[playerid][MDC] = 0;

				SetPlayerWantedLevel(playerid, 0);

				mysql_format(SQL, str,128,"UPDATE `users` SET `WantedLevel`='0',`TrackLose`='0',`Jailed`='1' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][ID]);
				mysql_tquery(SQL, str, "", "");

				mysql_format(SQL, str,128,"UPDATE `users` SET `JailTime`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][JailTime],PlayerData[playerid][ID]);
				mysql_tquery(SQL, str, "", "");

				format(string, sizeof(string), "You are jailed for %d seconds (-$%s).", PlayerData[playerid][JailTime], Decimal(price));
				SendClientMessage(playerid, COLOR_1BLUE, string);

				format(string, sizeof(string), "<< %s killed suspect %s for %d seconds ($%s). >>", PlayerData[cop][Name], PlayerData[playerid][Name], time, Decimal(price));
				SendRadioMessage(1, COLOR_LIGHTRED, string);

				RemovePlayerAttachedObject(playerid,0);
			}
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	   	if(PPizzaCP[playerid] >= 0)
		{
			new engine, lights, alarm, doors, bonnet, boot, objective;
		    new vehicleid = VJob[playerid];
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			DisablePlayerCheckpoint(playerid);
			RemoveDestination(playerid);
	  		//SetPlayerSkin(playerid,PlayerData[playerid][Char]);
		    PPizzaCP[playerid] = -1;
	        VJob[playerid] = -1;
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	  	}
	  	if(PSweeperCP[playerid] >= 0)
		{
		    new vehicleid = VJob[playerid];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			DisablePlayerCheckpoint(playerid);
			RemoveDestination(playerid);
		    PSweeperCP[playerid] = -1;
	        VJob[playerid] = -1;
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
		}
		if(PTruckerCP[playerid] >= 0)
		{
		    new vehicleid = VJob[playerid];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			DisablePlayerCheckpoint(playerid);
			RemoveDestination(playerid);
		    PTruckerCP[playerid] = -1;
	        VJob[playerid] = -1;
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
		}
		if(PFarmerCP[playerid] >= 0)
		{
		    new vehicleid = VJob[playerid];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			DisablePlayerCheckpoint(playerid);
		    PFarmerCP[playerid] = -1;
	        VJob[playerid] = -1;
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
		}
		if(PBusCP[playerid] >= 0)
		{
		    new vehicleid = VJob[playerid];
			new text[128];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			DisablePlayerCheckpoint(playerid);
			RemoveDestination(playerid);
		    PBusCP[playerid] = -1;
	        VJob[playerid] = -1;
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	        format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
			UpdateBusText(vehicleid,text);
		}
		if(PBusCP[playerid] == -2)
		{
		    new vehicleid = VJob[playerid];
		    new text[128];
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		    PBusCP[playerid] = -1;
	        VJob[playerid] = -1;
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	        format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
			UpdateBusText(vehicleid,text);
		}
	}
	
    if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER) // Player entered a vehicle as a driver
    {
        new vehicleid = GetPlayerVehicleID(playerid);
		new carid = FindSpawnID(vehicleid);
		if(CarInfo[carid][cID] != -2 && carid != 0)
		{
			format(string, sizeof(string), "* This %s is owned by %s.", vehName[CarInfo[carid][cModel]-400],CarInfo[carid][cOwner]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
		if(!(IsAPlane(vehicleid) || IsABoat(vehicleid) || IsABike(vehicleid)))
		{
		    if(PlayerData[playerid][CarLic] == 0 && StaticVeh[vehicleid][vSpecial] == 0)
		    {
                RemovePlayerFromVehicle(playerid);
		    	SendClientMessage(playerid, COLOR_WHITE, "You don't have a driving license");
		    }
		}
		if(IsABoat(vehicleid) && PlayerData[playerid][BoatLic] == 0 && StaticVeh[vehicleid][vSpecial] == 0)
		{
		    RemovePlayerFromVehicle(playerid);
	    	SendClientMessage(playerid, COLOR_WHITE, "You don't have a sailing license");
		}
		if(IsAPlane(vehicleid) && PlayerData[playerid][FlyLic] == 0 && StaticVeh[vehicleid][vSpecial] == 0)
		{
		    RemovePlayerFromVehicle(playerid);
	    	SendClientMessage(playerid, COLOR_WHITE, "You don't have a flying license");
		}
		if(StaticVeh[vehicleid][vFaction] != faction && StaticVeh[vehicleid][vFaction] > 0)
		{
			RemovePlayerFromVehicle(playerid);
			format(string,sizeof(string),"You aren't member of %s!",FactionName(StaticVeh[vehicleid][vFaction]));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			if(faction > 0 && PlayerData[playerid][OnDuty] == 0 && StaticVeh[vehicleid][vFaction] > 0)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "You must be on-duty before driving this car.");
			}
			else
			{
				if(StaticVeh[vehicleid][vRank] > PlayerData[playerid][Rank])
				{
					RemovePlayerFromVehicle(playerid);
					format(string,sizeof(string),"You must be Rank %d+ to drive this vehicle!",StaticVeh[vehicleid][vRank]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
		if(VSpecial[playerid] != StaticVeh[vehicleid][vSpecial] && StaticVeh[vehicleid][vSpecial] > 15)
		{
      		RemovePlayerFromVehicle(playerid);
		    SendClientMessage(playerid, COLOR_WHITE, "You aren't allowed to drive this car.");
		}
		if(PlayerData[playerid][Job] != StaticVeh[vehicleid][vJob] && StaticVeh[vehicleid][vJob] > 0)
		{
		    RemovePlayerFromVehicle(playerid);
			format(string,sizeof(string),"You aren't a %s!",JobName(StaticVeh[vehicleid][vJob]));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		if(VSpecial[playerid] == 100)
		{
			SetPlayerRaceCheckpoint(playerid, 0, ExamenD1[ExamPoint[playerid]][0], ExamenD1[ExamPoint[playerid]][1], ExamenD1[ExamPoint[playerid]][2], ExamenD1[ExamPoint[playerid] + 1][0], ExamenD1[ExamPoint[playerid] + 1][1], ExamenD1[ExamPoint[playerid] + 1][2], 5.0);
			EStep[playerid] += 1;
			ExamPoint[playerid] += 1;
		}
		if(VSpecial[playerid] == 101)
		{
		    SetPlayerRaceCheckpoint(playerid, 3, ExamenF[ExamPoint[playerid]][0], ExamenF[ExamPoint[playerid]][1], ExamenF[ExamPoint[playerid]][2], ExamenF[ExamPoint[playerid] + 1][0], ExamenF[ExamPoint[playerid] + 1][1], ExamenF[ExamPoint[playerid] + 1][2], 5.0);
			EStep[playerid] += 1;
			ExamPoint[playerid] += 1;
		}
		if(VSpecial[playerid] == 102)
		{
		    SetPlayerRaceCheckpoint(playerid, 0, ExamenS[ExamPoint[playerid]][0], ExamenS[ExamPoint[playerid]][1], ExamenS[ExamPoint[playerid]][2], ExamenS[ExamPoint[playerid] + 1][0], ExamenS[ExamPoint[playerid] + 1][1], ExamenS[ExamPoint[playerid] + 1][2], 5.0);
			EStep[playerid] += 1;
			ExamPoint[playerid] += 1;
		}
    }
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	new query[128], string[128];
    new vehicleid = GetPlayerVehicleID(playerid);
	if(StaticVeh[vehicleid][vSpecial] == 100 && EStep[playerid] == 1)
	{
	    if(ExamPoint[playerid] < 6)
		{
			SetPlayerRaceCheckpoint(playerid, 0, ExamenD1[ExamPoint[playerid]][0], ExamenD1[ExamPoint[playerid]][1], ExamenD1[ExamPoint[playerid]][2], ExamenD1[ExamPoint[playerid] + 1][0], ExamenD1[ExamPoint[playerid] + 1][1], ExamenD1[ExamPoint[playerid] + 1][2], 5.0);
			ExamPoint[playerid] += 1;
			return 1;
		}
		else
		{
            if(ExamPoint[playerid] == 7)
			{
			    SetVehiclePos(vehicleid, 1857.5712,-2488.9146,13.2383);
			    SetVehicleZAngle(vehicleid, 90.0);
			    EStep[playerid] += 1;
			    ExamPoint[playerid] = 0;
			    DisablePlayerRaceCheckpoint(playerid);
			    SetPlayerRaceCheckpoint(playerid, 0, ExamenD2[ExamPoint[playerid]][0], ExamenD2[ExamPoint[playerid]][1], ExamenD2[ExamPoint[playerid]][2], ExamenD2[ExamPoint[playerid] + 1][0], ExamenD2[ExamPoint[playerid] + 1][1], ExamenD2[ExamPoint[playerid] + 1][2], 1.0);
			    return 1;
			}
			SetPlayerRaceCheckpoint(playerid, 1, ExamenD1[ExamPoint[playerid]][0], ExamenD1[ExamPoint[playerid]][1], ExamenD1[ExamPoint[playerid]][2], 0.0,0.0,0.0, 5.0);
            ExamPoint[playerid] += 1;
			return 1;
		}
	}
	if(StaticVeh[vehicleid][vSpecial] == 100 && EStep[playerid] == 2)
	{
	    if(ExamPoint[playerid] < 17)
		{
			SetPlayerRaceCheckpoint(playerid, 0, ExamenD2[ExamPoint[playerid]][0], ExamenD2[ExamPoint[playerid]][1], ExamenD2[ExamPoint[playerid]][2], ExamenD2[ExamPoint[playerid] + 1][0], ExamenD2[ExamPoint[playerid] + 1][1], ExamenD2[ExamPoint[playerid] + 1][2], 1.0);
			ExamPoint[playerid] += 1;
			return 1;
		}
		else
		{
			if(ExamPoint[playerid] == 18)
			{
			    SetVehiclePos(vehicleid, 1965.2764,-2179.4365,13.2320);
			    SetVehicleZAngle(vehicleid, 0.0);
			    EStep[playerid] += 1;
			    ExamPoint[playerid] = 0;
	  			DisablePlayerRaceCheckpoint(playerid);
	  			SetPlayerRaceCheckpoint(playerid, 0, ExamenD3[ExamPoint[playerid]][0], ExamenD3[ExamPoint[playerid]][1], ExamenD3[ExamPoint[playerid]][2], ExamenD3[ExamPoint[playerid] + 1][0], ExamenD3[ExamPoint[playerid] + 1][1], ExamenD3[ExamPoint[playerid] + 1][2], 5.0);
	  			return 1;
			}
			SetPlayerRaceCheckpoint(playerid, 1, ExamenD2[ExamPoint[playerid]][0], ExamenD2[ExamPoint[playerid]][1], ExamenD2[ExamPoint[playerid]][2], 0.0,0.0,0.0, 1.0);
	  		ExamPoint[playerid] += 1;
	  		return 1;
		}
	}
	if(StaticVeh[vehicleid][vSpecial] == 100 && EStep[playerid] == 3)
	{
	    if(ExamPoint[playerid] < 5)
		{
			SetPlayerRaceCheckpoint(playerid, 0, ExamenD3[ExamPoint[playerid]][0], ExamenD3[ExamPoint[playerid]][1], ExamenD3[ExamPoint[playerid]][2], ExamenD3[ExamPoint[playerid] + 1][0], ExamenD3[ExamPoint[playerid] + 1][1], ExamenD3[ExamPoint[playerid] + 1][2], 5.0);
			ExamPoint[playerid] += 1;
			return 1;
		}
		else
		{
			if(ExamPoint[playerid] == 6)
			{
                SetVehicleToRespawn(vehicleid);
	  			SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}You recieved the Driving License.");

				if(PlayerData[playerid][Level] == 1) GivePlayerCash(playerid, -50);
				
				PlayerData[playerid][CarLic] = 10000;
				VSpecial[playerid] = 0;
				mysql_format(SQL, query, 128, "UPDATE `users` SET `CarLic`='10000' WHERE `id`='%d' LIMIT 1",PlayerData[playerid][ID]);
				mysql_tquery(SQL, query, "", "");
				DisablePlayerRaceCheckpoint(playerid);
				EStep[playerid] = 0;
				ExamPoint[playerid] = 0;
	  			return 1;
			}
			SetPlayerRaceCheckpoint(playerid, 1, ExamenD3[ExamPoint[playerid]][0], ExamenD3[ExamPoint[playerid]][1], ExamenD3[ExamPoint[playerid]][2], 0.0,0.0,0.0, 5.0);
	  		ExamPoint[playerid] += 1;
	  		return 1;
		}
	}
	if(StaticVeh[vehicleid][vSpecial] == 101)
	{
	    if(ExamPoint[playerid] < 14)
		{
			SetPlayerRaceCheckpoint(playerid, 3, ExamenF[ExamPoint[playerid]][0], ExamenF[ExamPoint[playerid]][1], ExamenF[ExamPoint[playerid]][2], ExamenF[ExamPoint[playerid] + 1][0], ExamenF[ExamPoint[playerid] + 1][1], ExamenF[ExamPoint[playerid] + 1][2], 5.0);
			ExamPoint[playerid] += 1;
			return 1;
		}
		else
		{
			if(ExamPoint[playerid] == 15)
			{
                SetVehicleToRespawn(vehicleid);
	  			SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}You recieved the Flying License.");

				GivePlayerCash(playerid, -150);

				PlayerData[playerid][FlyLic] = 10000;
				VSpecial[playerid] = 0;
				mysql_format(SQL, query, 128, "UPDATE `users` SET `FlyLic`='10000' WHERE `id`='%d' LIMIT 1",PlayerData[playerid][ID]);
				mysql_tquery(SQL, query, "", "");
				DisablePlayerRaceCheckpoint(playerid);
				EStep[playerid] = 0;
				ExamPoint[playerid] = 0;
	  			return 1;
			}
			SetPlayerRaceCheckpoint(playerid, 4, ExamenF[ExamPoint[playerid]][0], ExamenF[ExamPoint[playerid]][1], ExamenF[ExamPoint[playerid]][2], 0.0,0.0,0.0, 5.0);
	  		ExamPoint[playerid] += 1;
	  		return 1;
		}
	}
	if(StaticVeh[vehicleid][vSpecial] == 102)
	{
	    if(ExamPoint[playerid] < 10)
		{
			SetPlayerRaceCheckpoint(playerid, 0, ExamenS[ExamPoint[playerid]][0], ExamenS[ExamPoint[playerid]][1], ExamenS[ExamPoint[playerid]][2], ExamenS[ExamPoint[playerid] + 1][0], ExamenS[ExamPoint[playerid] + 1][1], ExamenS[ExamPoint[playerid] + 1][2], 5.0);
			ExamPoint[playerid] += 1;
			return 1;
		}
		else
		{
			if(ExamPoint[playerid] == 11)
			{
                SetVehicleToRespawn(vehicleid);
	  			SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}You recieved the Sailing License.");

				GivePlayerCash(playerid, -75);

				PlayerData[playerid][BoatLic] = 10000;
				VSpecial[playerid] = 0;
				mysql_format(SQL, query, 128, "UPDATE `users` SET `BoatLic`='10000' WHERE `id`='%d' LIMIT 1",PlayerData[playerid][ID]);
				mysql_tquery(SQL, query, "", "");
				DisablePlayerRaceCheckpoint(playerid);
				EStep[playerid] = 0;
				ExamPoint[playerid] = 0;
	  			return 1;
			}
			SetPlayerRaceCheckpoint(playerid, 1, ExamenS[ExamPoint[playerid]][0], ExamenS[ExamPoint[playerid]][1], ExamenS[ExamPoint[playerid]][2], 0.0,0.0,0.0, 5.0);
	  		ExamPoint[playerid] += 1;
	  		return 1;
		}
	}
	if(StaticVeh[vehicleid][vSpecial] == 10001)
	{
		if(PKartCP[playerid] <= 22)
		{
			SetPlayerRaceCheckpoint(playerid, 0, KartCP[PKartCP[playerid]][0], KartCP[PKartCP[playerid]][1], KartCP[PKartCP[playerid]][2], KartCP[PKartCP[playerid] + 1][0], KartCP[PKartCP[playerid] + 1][1], KartCP[PKartCP[playerid] + 1][2], 3);
			PKartCP[playerid] += 1;
			return 1;
		}
		else
		{
			if(KartPrize == 0)
			{
				KartPrize++;
				KartPlayers--;
				format(string, sizeof(string), "Kart-Event: %s ended the race on 1st place!", PlayerData[playerid][Name]);
				SendClientMessageToAll(COLOR_WHITE,string);
				GivePlayerCash(playerid, 2500);
				DisablePlayerRaceCheckpoint(playerid);
				if(KartPlayers == 0)
				{
					foreach(Player, i)
					{
						JoinedKart[i] = 0;
						DisablePlayerRaceCheckpoint(i);
						KillWinners();
					}
					for(new i = 0; i < 22; i++)
					{
						SetVehicleToRespawn(KartCar[i]);
					}
				}
			}
			else if(KartPrize == 1)
			{
				KartPrize++;
				KartPlayers--;
				format(string, sizeof(string), "Kart-Event: %s ended the race on 2nd place!", PlayerData[playerid][Name]);
				SendClientMessageToAll(COLOR_WHITE,string);
				GivePlayerCash(playerid, 2000);
				DisablePlayerRaceCheckpoint(playerid);
				if(KartPlayers == 0)
				{
					foreach(Player, i)
					{
						JoinedKart[i] = 0;
						DisablePlayerRaceCheckpoint(i);
						KillWinners();
					}
					for(new i = 0; i < 22; i++)
					{
						SetVehicleToRespawn(KartCar[i]);
					}
				}
			}
			else if(KartPrize == 2)
			{
				KartPrize++;
				KartPlayers--;
				format(string, sizeof(string), "Kart-Event: %s ended the race on 3rd place!", PlayerData[playerid][Name]);
				SendClientMessageToAll(COLOR_WHITE,string);
				
				GivePlayerCash(playerid, 1000);
				DisablePlayerRaceCheckpoint(playerid);
				KillWinners();
				foreach(Player, i)
				{
					JoinedKart[i] = 0;
					DisablePlayerRaceCheckpoint(i);
				}
				for(new i = 0; i < 22; i++)
				{
					SetVehicleToRespawn(KartCar[i]);
				}
			}
		}
	}
	
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(PlayerData[playerid][SpectateP] != -1) PlayerSpectateVehicle(PlayerData[playerid][SpectateP], vehicleid);
	if(StaticVeh[vehicleid][vSpecial] == 15) SendClientMessage(playerid, RED, "WARNING: This bike will respawn in 10 seconds if you leave it.");
	if(ispassenger == 1)
	{
	    new driver = WhoIsDriver(vehicleid);
	    if(driver != INVALID_PLAYER_ID)
	    {
	        new radio = RadioSet[driver];
	        switch(radio)
			{
				case 666:
				{
					PlayAudioStreamForPlayer(playerid,"http://80.86.106.136:8000/");
					RadioSet[playerid] = 666;
				}
				case 1:
				{
					PlayAudioStreamForPlayer(playerid,"http://80.86.106.35:8000/");
					RadioSet[playerid] = 1;
				}
				case 2:
				{
					PlayAudioStreamForPlayer(playerid,"http://stream.profm.ro:8012/profm.mp3");
					RadioSet[playerid] = 2;
				}
				case 3:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.radio21.ro/site/Radio21Live.m3u");
					RadioSet[playerid] = 3;
				}
				case 4:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.radiozu.ro/live.m3u");
					RadioSet[playerid] = 4;
				}
				case 5:
				{
					PlayAudioStreamForPlayer(playerid,"http://radiotaraf.no-ip.biz:7100/");
					RadioSet[playerid] = 5;
				}
				case 6:
				{
					PlayAudioStreamForPlayer(playerid,"http://89.238.252.146:9000/listen.pls");
					RadioSet[playerid] = 6;
				}
				case 7:
				{
					PlayAudioStreamForPlayer(playerid,"http://92.114.63.16:8100/listen.pls");
					RadioSet[playerid] = 7;
				}
				case 8:
				{
					PlayAudioStreamForPlayer(playerid,"http://www.greudedifuzat.eu/greudedifuzat.pls");
					RadioSet[playerid] = 8;
				}
				case 9:
				{
					PlayAudioStreamForPlayer(playerid,"http://asculta.radiotequila.ro:8989/listen.pls");
					RadioSet[playerid] = 9;
				}
				case 10:
				{
					PlayAudioStreamForPlayer(playerid,"http://live.eliberadio.ro:8000/listen.pls");
					RadioSet[playerid] = 10;
				}
			}
	    }
	}
	return 1;
}
function UpdateBusText(carid, text[])
{
	Delete3DTextLabel(BusText[carid-182]);
	BusText[carid-182] = Create3DTextLabel( text, COLOR_YELLOW_DIALOG, 0.0, 0.0, 0.0, 50.0, 0, 1 );
	Attach3DTextLabelToVehicle(BusText[carid-182], StaticVeh[carid][vID], 0.0352, 5.6202, 1.7338);
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerData[playerid][SpectateP] != -1) PlayerSpectatePlayer(PlayerData[playerid][SpectateP], playerid);
	
	if(PlayerData[playerid][RadarUse] == 1)
	{
		PlayerData[playerid][RadarUse] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE2, "You stopped your radar.");
	}
	
	if(VSpecial[playerid] >= 100 && VSpecial[playerid] == StaticVeh[vehicleid][vSpecial])
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE2, "*Exam failed.");
		VSpecial[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
	}

	if(PPizzaCP[playerid] >= 0)
	{
	    new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		DisablePlayerCheckpoint(playerid);
		RemoveDestination(playerid);
  		//SetPlayerSkin(playerid,PlayerData[playerid][Char]);
	    PPizzaCP[playerid] = -1;
        VJob[playerid] = -1;
        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	}
	if(PSweeperCP[playerid] >= 0)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		DisablePlayerCheckpoint(playerid);
		RemoveDestination(playerid);
	    PSweeperCP[playerid] = -1;
        VJob[playerid] = -1;
        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	}
	if(PTruckerCP[playerid] >= 0)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		DisablePlayerCheckpoint(playerid);
		RemoveDestination(playerid);
	    PTruckerCP[playerid] = -1;
        VJob[playerid] = -1;
        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	}
	if(PFarmerCP[playerid] >= 0)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		DisablePlayerCheckpoint(playerid);
	    PFarmerCP[playerid] = -1;
        VJob[playerid] = -1;
        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
	}
	if(PBusCP[playerid] >= 0)
	{
		new text[128];
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		DisablePlayerCheckpoint(playerid);
		RemoveDestination(playerid);
	    PBusCP[playerid] = -1;
        VJob[playerid] = -1;
        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
        format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
		UpdateBusText(vehicleid,text);
	}
	if(PBusCP[playerid] == -2)
	{
	    new text[128];
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
	    PBusCP[playerid] = -1;
        VJob[playerid] = -1;
        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Job: {FFFFFF}You exited the vehicle.");
        format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
		UpdateBusText(vehicleid,text);
	}
	RadioSet[playerid] = 0;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	new str[128];
	Death[playerid] = 0;
	SetPlayerSkin(playerid,PlayerData[playerid][Char]);
	SetPlayerHealth(playerid, 100.0);
	SetPlayerFColor(playerid);
	if(PlayerData[playerid][CarLic] == 0 && PlayerData[playerid][Level] <= 2)
	{
		SendClientMessage(playerid, COLOR_WHITE, "{00FFFF}Driving License: {FFFFFF}You need to enter in the spawn building.");
		SendClientMessage(playerid, COLOR_WHITE, "{00FFFF}Driving License: {FFFFFF}Then exit the main room.");
		SendClientMessage(playerid, COLOR_WHITE, "{00FFFF}Driving License: {FFFFFF}And go to the desk.");
	}
	
	if(PlayerData[playerid][IsLoggedIn] == false)
	{
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** This server requires a Login BEFORE spawn (Kicked) **");
        KickEx(playerid);
 	}
 	PPizzaCP[playerid] = -1, PSweeperCP[playerid] = -1, PTruckerCP[playerid] = -1, PFarmerCP[playerid] = -1;
 	PlayerData[playerid][InBizz] = -1; PlayerData[playerid][InHouse] = -1;
 	
 	new vehicleid = VJob[playerid];
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
	if(PBusCP[playerid] >= 0)
	{
		new text[128];
		format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
		UpdateBusText(vehicleid,text);
	}
	if(PBusCP[playerid] == -2)
	{
	    new text[128];
		format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
		UpdateBusText(vehicleid,text);
	}
	PBusCP[playerid] = -1;
	VJob[playerid] = -1;
	if(PlayerData[playerid][JailTime] == 0)
	{
		new spawn, faction, rand;
		spawn = PlayerData[playerid][SpawnChange];
		faction = PlayerData[playerid][Leader] + PlayerData[playerid][Member];
		switch(spawn)
		{
			case 0:
			{//Public Spawn
				PutPlayerInSpawn(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
			case 1:
			{//Home
			    new house = PlayerData[playerid][HKey];
			    SetPlayerInterior(playerid,HouseInfo[house][hInt]);
				SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
				PlayerData[playerid][InHouse] = house;
			}
			case 2:
			{//HQ 1
				switch(faction)
				{
					case 1:
					{//PD
						SetPlayerPos(playerid,1568.7095,-1690.7382,5.8906); SetPlayerFacingAngle(playerid, 180.0);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
					case 2:
					{//Groove
						if(War[faction] == 1)
						{
						    SetPlayerPos(playerid,2486.4844,-1646.7738,14.0703); SetPlayerFacingAngle(playerid, 180.0);
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You have an active war, you're spawned at HQ.");
						}
						else
						{
							rand = random(4); rand += 1;
							if(rand == 1) { SetPlayerPos(playerid,2486.4844,-1646.7738,14.0703); SetPlayerFacingAngle(playerid, 180.0); }
							if(rand == 2) { SetPlayerPos(playerid,2329.2424,-1681.2673,14.7058); SetPlayerFacingAngle(playerid, 270.0); }
							if(rand == 3) { SetPlayerPos(playerid,2326.7817,-1717.8855,13.5469); SetPlayerFacingAngle(playerid, 180.0); }
							if(rand == 4) { SetPlayerPos(playerid,2244.0940,-1639.1412,15.9074); SetPlayerFacingAngle(playerid, 160.0); }
						}
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
					case 3:
					{//GSW
						if(War[faction] == 1)
						{
                            SetPlayerPos(playerid,1999.9636,-1115.0054,27.1318); SetPlayerFacingAngle(playerid, 180.0);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You have an active war, you're spawned at HQ.");
						}
						else
						{
							rand = random(4); rand += 1;
							if(rand == 1) { SetPlayerPos(playerid,1999.9636,-1115.0054,27.1318); SetPlayerFacingAngle(playerid, 180.0); }
							if(rand == 2) { SetPlayerPos(playerid,2036.4166,-1060.4535,25.6508); SetPlayerFacingAngle(playerid, 150.0); }
							if(rand == 3) { SetPlayerPos(playerid,2094.3784,-1145.3188,26.5929); SetPlayerFacingAngle(playerid, 90.0); }
							if(rand == 4) { SetPlayerPos(playerid,2090.8862,-1279.5984,26.0539); SetPlayerFacingAngle(playerid, 180.0); }
						}
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
					case 4:
					{//VNE
						if(War[faction] == 1)
						{
                            SetPlayerPos(playerid,1899.4979,-2005.9283,13.5469); SetPlayerFacingAngle(playerid, 180.0);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You have an active war, you're spawned at HQ.");
						}
						else
						{
							rand = random(4); rand += 1;
							if(rand == 1) { SetPlayerPos(playerid,1899.4979,-2005.9283,13.5469); SetPlayerFacingAngle(playerid, 180.0); }
							if(rand == 2) { SetPlayerPos(playerid,1850.7974,-2136.9758,15.1668); SetPlayerFacingAngle(playerid, 180.0); }
							if(rand == 3) { SetPlayerPos(playerid,1941.9490,-2116.0127,13.6953); SetPlayerFacingAngle(playerid, 270.0); }
							if(rand == 4) { SetPlayerPos(playerid,1929.6526,-1917.8108,15.2568); SetPlayerFacingAngle(playerid, 180.0); }
						}
      					SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
					case 5:
					{//Mayor
					    SetPlayerPos(playerid,1653.8485,-1660.8538,22.5156); SetPlayerFacingAngle(playerid, 180.0);
					    SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
					case 6:
					{//SA Network
						SetPlayerPos(playerid,761.0854,-1357.6547,13.5201); SetPlayerFacingAngle(playerid, 277.0);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
					case 7:
					{//Emer. Dept.
						SetPlayerPos(playerid,1183.7910,-1323.8447,13.5761); SetPlayerFacingAngle(playerid, 275.0);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
					}
				}
			}
		}
	}
	else
	{
		PutPlayerInJail(playerid);
	}
	PlayerData[playerid][InHQ] = -1;
	if(CS == 2)
	{
		if(JoinedCS[playerid] == 1) Team1 -= 1;
		if(JoinedCS[playerid] == 2) Team2 -= 1;
		if(Team1 == 0)
		{
		    foreach(Player, i)
	       	{
	    	    SendClientMessage(i, COLOR_WHITE, "Police Officers won the Counter-Strike event!");
	    	    if(JoinedCS[i] == 2)
	    	    {
	    	        SendClientMessage(i, COLOR_WHITE, "Congratulations! You won $2000 and 5 XP.");
	           		GivePlayerCash(i,2000);
	           		PlayerData[i][Exp] += 5;
			        PlayerData[i][TotalExp] += 5;

					mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][ID]);
					mysql_tquery(SQL, str, "", "");
				}
			}
			KillWinners();
			CS = 0;
		}
		if(Team2 == 0)
		{
			foreach(Player, i)
		    {
			    SendClientMessage(i, COLOR_WHITE, "Terrorists won the Counter-Strike event!");
	  		    if(JoinedCS[i] == 1)
	    		{
	    			SendClientMessage(i, COLOR_WHITE, "Congratulations! You won $2000 and 5 XP.");
	                GivePlayerCash(i,2000);
	                PlayerData[i][Exp] += 5;
			        PlayerData[i][TotalExp] += 5;

					mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][ID]);
					mysql_tquery(SQL, str, "", "");
	    		}
			}
			KillWinners();
			CS = 0;
		}
		if(JoinedCS[playerid] > 0)
		{
			JoinedCS[playerid] = 0;
			SetPlayerPos(playerid, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
			SetPlayerInterior(playerid, TeleportInt[playerid]);
			SetPlayerVirtualWorld(playerid, TeleportVW[playerid]);
			TogglePlayerControllable(playerid, 0);
            SetTimerEx("UnfreezeT", 5000, 0, "d", playerid);
			ResetPlayerWeapons(playerid);
		}
	}
	DisablePlayerRaceCheckpoint(playerid);
	DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[128];
	if(PlayerData[playerid][IsLoggedIn] == false) {SendClientMessage(playerid, TEAM_CYAN_COLOR, "You aren't logged in."); return 0;}
	if(PlayerData[playerid][Muted] == 1) {SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced."); SendClientMessage(playerid, TEAM_CYAN_COLOR, "Use /mutetime to see when you can speak again."); return 0;}
	if(FindIP(text) || Findhtml(text) && strlen(text) < 60)
	{
	    format(string, 256, "Warning: %s(%d) type on chat: %s.", PlayerData[playerid][Name],playerid, text);
		ABroadCast(COLOR_YELLOW,string,1);
		return 0;
	}
	if(Mobile[playerid] != -1)
	{
		format(string, sizeof(string), "(cellphone) %s says: %s", PlayerData[playerid][Name], text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(PlayerData[Mobile[playerid]][SpeakerPhone] != 0)
				{
				    format(string, sizeof(string), "(speakerphone) %s says: %s", PlayerData[playerid][Name], text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"There's nobody there!");
		}
		return 0;
	}
	if(TalkingLive[playerid] >= 0)
	{
		if(PlayerData[playerid][Member] == 6 || PlayerData[playerid][Leader] == 6)
		{
		    format(string, sizeof(string), "LiveNR %s: %s", PlayerData[playerid][Name], text);
			SendClientMessageToAll(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "LivePlayer %s: %s", PlayerData[playerid][Name], text);
			SendClientMessageToAll(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[256];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "* Please type in the Title of your Newspaper."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "* Please type in a Text Line of your Newspaper."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
				format(fstring, sizeof(fstring), "%s", PlayerData[playerid][Name]);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Now you can write down the News Lines, 7 remaining.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "* You wrote Line %d of the Newspaper.", line);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Your Newspaper has been added to the News List (for Paper Boys).");
			}
		}
	    return 0;
	}
	format(string, sizeof(string), "%s says: %s", PlayerData[playerid][Name], text);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 0;
}

FindIP(StrToChk[])
{
	new IpLevel = 0;
	for(new a = 0; a < strlen(StrToChk); a++)
	{
		switch(IpLevel)
		{
			case 0:
			{
	    		if(IsNum(StrToChk[a])) IpLevel++;
			}
			case 1, 2:
			{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 4;
                else IpLevel = 0;
			}
			case 3:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 4:
			{
			    if(IsNum(StrToChk[a])) IpLevel++;
			    else IpLevel = 0;
			}
			case 5, 6:
			{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 8;
                else IpLevel = 0;
			}
			case 7:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 8:
			{
			    if(IsNum(StrToChk[a])) IpLevel++;
			    else IpLevel = 0;
			}
			case 9, 10:{
                if(IsNum(StrToChk[a])) IpLevel++;
                else if(StrToChk[a] == '.') IpLevel = 12;
                else IpLevel = 0;
			}
			case 11:
			{
			    if(StrToChk[a] == '.') IpLevel++;
			    else IpLevel = 0;
			}
			case 12:
			{
			    if(IsNum(StrToChk[a])) return 1;
                else IpLevel = 0;
   			}
  		}
	}
	return 0;
}

Findhtml(SPAM[])
{
 	if(strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
 	if(strfind(SPAM, ".ro", true) != -1 || strfind(SPAM, ":7777", true) != -1 || strfind(SPAM, "bzone", true) != -1 || strfind(SPAM, "b-zone", true) != -1  || strfind(SPAM, "redz", true) != -1 || strfind(SPAM, "bugged", true) != -1) return 1;
 	if(strfind(SPAM, "Pro-Gaming", true) != -1) return 1;
 	return 0;
}

IsNum(textchar)
{
	if(textchar == '0') return 1;
	if(textchar == '1') return 1;
	if(textchar == '2') return 1;
	if(textchar == '3') return 1;
	if(textchar == '4') return 1;
	if(textchar == '5') return 1;
	if(textchar == '6') return 1;
	if(textchar == '7') return 1;
	if(textchar == '8') return 1;
	if(textchar == '9') return 1;
	return 0;
}

public OnPlayerDisconnect(playerid,reason)
{
	new string[128], str[128];
	numplayers--;
	mysql_format(SQL, string,128,"UPDATE `users` SET `online`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][ID]);
	mysql_tquery(SQL, string, "", "");
	if(PlayerData[playerid][SpectateP] != -1)
	{
		new id = PlayerData[playerid][SpectateP];
		PlayerData[id][WatchingTV] = 0;//
		PlayerData[id][Spectate] = -2;
		GameTextForPlayer(id, "~w~                Target~n~~r~                Left", 5000, 6);
		PlayerPlaySound(id, 1145, 0.0, 0.0, 0.0);
		PlayerData[playerid][SpectateP] = -1;
	}
	
	switch(reason)
    {
        case 0: format(string,sizeof string,"%s exited the game. (crash)", PlayerData[playerid][Name]);
        case 1: format(string,sizeof string,"%s exited the game. (quit)", PlayerData[playerid][Name]);
        case 2: format(string,sizeof string,"%s exited the game. (kicked/banned)", PlayerData[playerid][Name]);
    }
    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    
	TextDrawDestroy(TextDrawSpec[playerid][1]);
	TextDrawDestroy(TextDrawSpec[playerid][2]);
	TextDrawDestroy(TextDrawSpec[playerid][3]);
	TextDrawDestroy(TextDrawSpec[playerid][4]);
    MysqlRaceCheck[playerid]++;
	
	if(PlayerData[playerid][Leader] == 7 || PlayerData[playerid][Member] == 7)
	{
	    if(PlayerData[playerid][OnDuty] == 1) { Medics -= 1; }
	}
	if(Kart == 1 && JoinedKart[playerid] == 1) KartPlayers -= 1;
	if(CS == 2)
	{
		if(JoinedCS[playerid] > 0)
		{
			if(JoinedCS[playerid] == 1) Team1 -= 1;
			if(JoinedCS[playerid] == 2) Team2 -= 1;
		}
		if(Team1 == 0)
		{
		    foreach(Player, i)
	       	{
	    	    SendClientMessage(i, COLOR_WHITE, "Police Officers won the Counter-Strike event!");
	    	    if(JoinedCS[i] == 2)
	    	    {
	    	        SendClientMessage(i, COLOR_WHITE, "Congratulations! You won $2000 and 5 XP.");
	           		GivePlayerCash(i,2000);
	           		PlayerData[i][Exp] += 5;
			        PlayerData[i][TotalExp] += 5;

					mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][ID]);
					mysql_tquery(SQL, str, "", "");
				}
			}
			KillWinners();
			CS = 0;
		}
		if(Team2 == 0)
		{
			foreach(Player, i)
		    {
			    SendClientMessage(i, COLOR_WHITE, "Terrorists won the Counter-Strike event!");
	  		    if(JoinedCS[i] == 1)
	    		{
	    			SendClientMessage(i, COLOR_WHITE, "Congratulations! You won $2000 and 5 XP.");
	                GivePlayerCash(i,2000);
	                PlayerData[i][Exp] += 5;
			        PlayerData[i][TotalExp] += 5;

					mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][ID]);
					mysql_tquery(SQL, str, "", "");
	    		}
			}
			KillWinners();
			CS = 0;
		}
	}
	
	foreach(Player, i)
	{
		if(PlayerData[i][PlayerToFind] == playerid)
		{
			PlayerData[i][PlayerToFind] = -1;
			DisablePlayerCheckpoint(i);
			format(string,sizeof(string),"~w~Find Target %s\n~r~left the game",PlayerData[playerid][Name]);
			GameTextForPlayer(i, string, 5000, 1);
		}
		if(MedicAns[i] >= 0)
        {
	        if(MedicAns[i] == playerid)
	        {
	            MedicAns[i] = -1;
	            GameTextForPlayer(i, "~w~Medic Caller~n~~r~Left the game", 5000, 1);
	            DisablePlayerCheckpoint(i);
	        }
        }
	}
	
	if(VJob[playerid] >= 0)
	{
	    new vehicleid = VJob[playerid];
	    new engine, lights, alarm, doors, bonnet, boot, objective;
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		if(PBusCP[playerid] >= 0)
		{
			new text[128];
			format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
			UpdateBusText(vehicleid,text);
		}
		if(PBusCP[playerid] == -2)
		{
		    new text[128];
			format(text,sizeof(text),"{FFFFFF}W | {FFA500}Bus no. %d",vehicleid-181);
			UpdateBusText(vehicleid,text);
		}
	}
	
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetPlayerPos(playerid, fX, fY, fZ);
			SetVehiclePos(tmpcar, fX, fY, fZ+3);
			PutPlayerInVehicle(playerid, tmpcar, 0);
		}
		else
		{
			SetPlayerPos(playerid, fX, fY, fZ);
		}
	}
	return 1;
}

function Spectator()
{
	new string[256];
	foreach(Player, i)
	{
		if(PlayerData[i][Spectate] >= 0)
		{
			SetPlayerColor(i,COLOR_SPEC);
			new targetid = PlayerData[i][Spectate];
			if(IsPlayerConnected(targetid))
			{
			    if(PlayerData[i][Admin] >= 1)
			    {
			        new Float:health;
				    new name[MAX_PLAYER_NAME];
				    GetPlayerName(targetid, name, sizeof(name));
				    GetPlayerHealth(targetid, health);
   				 	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
					{
				        new Float:Valoarea;
				        new carid = GetPlayerVehicleID(targetid);
						GetVehicleHealth(carid,Valoarea);
                        TextDrawHideForPlayer(i, TextDrawSpec[i][1]);	TextDrawHideForPlayer(i, TextDrawSpec[i][2]);	TextDrawHideForPlayer(i, TextDrawSpec[i][3]);	TextDrawHideForPlayer(i, TextDrawSpec[i][4]);
					    format(string, sizeof(string), "~y~%s (%d)", name, targetid);
					    TextDrawSetString(TextDrawSpec[i][1], string);
					    format(string, sizeof(string), "Health:~r~ %.1f", health);
					    TextDrawSetString(TextDrawSpec[i][2], string);
					    format(string, sizeof(string), "Vehicle ID:~r~ %d", carid);
						TextDrawSetString(TextDrawSpec[i][3], string);
						format(string, sizeof(string), "Vehicle Health:~r~ %.1f", Valoarea);
						TextDrawSetString(TextDrawSpec[i][4], string);
					    TextDrawShowForPlayer(i, TextDrawSpec[i][1]);	TextDrawShowForPlayer(i, TextDrawSpec[i][2]);	TextDrawShowForPlayer(i, TextDrawSpec[i][3]);	TextDrawShowForPlayer(i, TextDrawSpec[i][4]);
					}
				    else
				    {
				    	//format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~%s[ID:%d]~n~~w~Health:~r~%.1f",name,targetid,health);
				    	TextDrawHideForPlayer(i, TextDrawSpec[i][1]);	TextDrawHideForPlayer(i, TextDrawSpec[i][2]);	TextDrawHideForPlayer(i, TextDrawSpec[i][3]);	TextDrawHideForPlayer(i, TextDrawSpec[i][4]);
					    format(string, sizeof(string), "~y~%s (%d)", name, targetid);
					    TextDrawSetString(TextDrawSpec[i][1], string);
					    format(string, sizeof(string), "Health:~r~ %.1f", health);
					    TextDrawSetString(TextDrawSpec[i][2], string);
					    TextDrawShowForPlayer(i, TextDrawSpec[i][1]);	TextDrawShowForPlayer(i, TextDrawSpec[i][2]);
					}
					//GameTextForPlayer(i, string, 2500, 4);
			    }
			}//Targetid connected
			else
			{
			    TextDrawHideForPlayer(i, TextDrawSpec[i][1]);	TextDrawHideForPlayer(i, TextDrawSpec[i][2]);	TextDrawHideForPlayer(i, TextDrawSpec[i][3]);	TextDrawHideForPlayer(i, TextDrawSpec[i][4]);
			}
		}
		if(PlayerData[i][Spectate] == -2)
		{
			PlayerData[i][Spectate] = -1;
			TogglePlayerControllable(i, 1);
			TogglePlayerSpectating(i, 0);
			SpawnPlayer(i);
			SetPlayerFColor(i);
			TextDrawHideForPlayer(i, TextDrawSpec[i][1]);
		    TextDrawHideForPlayer(i, TextDrawSpec[i][2]);
		    TextDrawHideForPlayer(i, TextDrawSpec[i][3]);
		    TextDrawHideForPlayer(i, TextDrawSpec[i][4]);
			TextDrawHideForPlayer(i, TextDrawSpec[i][1]);
		    TextDrawHideForPlayer(i, TextDrawSpec[i][2]);
		    TextDrawHideForPlayer(i, TextDrawSpec[i][3]);
		    TextDrawHideForPlayer(i, TextDrawSpec[i][4]);
		}
	}
}

function ABroadCast(color,const string[],level)
{
	foreach(Player, i)
	{
		if (PlayerData[i][Admin] >= level)
		{
			SendClientMessage(i, color, string);
		}
	}
	printf("ABC: %s", string);
	ABCLog(string);
	return 1;
}

function GameModeInitExitFunc()
{
	new string[128];
	foreach(Player, i)
	{
		DisablePlayerCheckpoint(i);
		format(string, sizeof(string), "~w~Restart Server");
		GameTextForPlayer(i, string, 4000, 1);
		SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
		SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
		PlayerData[i][IsLoggedIn] = false;
		
		PlayerData[i][online] = 0;
		mysql_format(SQL, string,128,"UPDATE `users` SET `online`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][online],PlayerData[i][ID]);
		mysql_tquery(SQL, string, "", "");
	}
	SetTimer("GameModeExitFunc", 4000, 0);
	return 1;
}

function GameModeExitFunc()
{
	KillTimer(spdtimer);
	KillTimer(usetimer);
	KillTimer(othtimer);
	KillTimer(spectatetimer);
	GameModeExit();
}

function HideDSTD(playerid)
{
    PlayerTextDrawHide(playerid,DSModel);
    PlayerTextDrawHide(playerid,DSName);
	PlayerTextDrawHide(playerid,DSPrice);
	PlayerTextDrawHide(playerid,DSStock);
	PlayerTextDrawHide(playerid,DSBox);
	PlayerTextDrawHide(playerid,DSTest);
	PlayerTextDrawHide(playerid,DSInfo);
	PlayerTextDrawHide(playerid,DSBuy);
	PlayerTextDrawHide(playerid,DSCancel);
	PlayerTextDrawHide(playerid,DSPrev);
	PlayerTextDrawHide(playerid,DSNext);
}
function CancelTDrive(playerid)
{
	SendClientMessage(playerid,COLOR_WHITE,"{F3FF02}Your test drive time has expired!");
	SetPlayerPos(playerid,2131.7759,-1150.5256,24.1473);
	DestroyVehicle(VehicleDealer[playerid]);
	SetPlayerVirtualWorld(playerid,0);
	InDealer[playerid] = 0;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new string[128];
    if(playertextid == DSPrev)
    {
        if(DealerID[playerid] == 1) DealerID[playerid] = dsvehs+1;
		DealerID[playerid] -= 1;
		DestroyVehicle(VehicleDealer[playerid]);
		VehicleDealer[playerid] = CreateVehicle(DSModels[DealerID[playerid]][dModel],2124.9263,-1130.8911,25.2097,DSAngle[playerid],1,1,-1);
		SetVehicleVirtualWorld(VehicleDealer[playerid],playerid+1);

		SelectTextDraw(playerid, 0xFF0000FF);
		PlayerTextDrawShow(playerid,DSBox);
		PlayerTextDrawShow(playerid,DSTest);
		PlayerTextDrawShow(playerid,DSInfo);
		PlayerTextDrawShow(playerid,DSBuy);
		PlayerTextDrawShow(playerid,DSCancel);
		PlayerTextDrawShow(playerid,DSPrev);
		PlayerTextDrawShow(playerid,DSNext);

	    PlayerTextDrawSetPreviewModel(playerid, DSModel, DSModels[DealerID[playerid]][dModel]);
		PlayerTextDrawShow(playerid,DSModel);

		format(string,sizeof(string),"Name: ~y~%s",vehName[DSModels[DealerID[playerid]][dModel]-400]);
		PlayerTextDrawSetString(playerid,DSName,string);
		PlayerTextDrawShow(playerid,DSName);

		format(string,sizeof(string),"Price: ~y~$%s",Decimal(DSModels[DealerID[playerid]][dPrice]));
		PlayerTextDrawSetString(playerid,DSPrice,string);
		PlayerTextDrawShow(playerid,DSPrice);

	    format(string,sizeof(string),"Stock: ~y~%d",DSModels[DealerID[playerid]][dStock]);
		PlayerTextDrawSetString(playerid,DSStock,string);
		PlayerTextDrawShow(playerid,DSStock);
    }
	if(playertextid == DSNext)
    {
		if(DealerID[playerid] == dsvehs) DealerID[playerid] = 0;
        DealerID[playerid] += 1;
		DestroyVehicle(VehicleDealer[playerid]);
		VehicleDealer[playerid] = CreateVehicle(DSModels[DealerID[playerid]][dModel],2124.9263,-1130.8911,25.2097,DSAngle[playerid],1,1,-1);
		SetVehicleVirtualWorld(VehicleDealer[playerid],playerid+1);

		SelectTextDraw(playerid, 0xFF0000FF);
		PlayerTextDrawShow(playerid,DSBox);
		PlayerTextDrawShow(playerid,DSTest);
		PlayerTextDrawShow(playerid,DSInfo);
		PlayerTextDrawShow(playerid,DSBuy);
		PlayerTextDrawShow(playerid,DSCancel);
		PlayerTextDrawShow(playerid,DSPrev);
		PlayerTextDrawShow(playerid,DSNext);

	    PlayerTextDrawSetPreviewModel(playerid, DSModel, DSModels[DealerID[playerid]][dModel]);
		PlayerTextDrawShow(playerid,DSModel);

		format(string,sizeof(string),"Name: ~y~%s",vehName[DSModels[DealerID[playerid]][dModel]-400]);
		PlayerTextDrawSetString(playerid,DSName,string);
		PlayerTextDrawShow(playerid,DSName);

		format(string,sizeof(string),"Price: ~y~$%s",Decimal(DSModels[DealerID[playerid]][dPrice]));
		PlayerTextDrawSetString(playerid,DSPrice,string);
		PlayerTextDrawShow(playerid,DSPrice);

	    format(string,sizeof(string),"Stock: ~y~%d",DSModels[DealerID[playerid]][dStock]);
		PlayerTextDrawSetString(playerid,DSStock,string);
		PlayerTextDrawShow(playerid,DSStock);
    }
    if(playertextid == DSModel)
    {
		if(DSAngle[playerid] == 330.0)  DSAngle[playerid] = -30.0;
		DSAngle[playerid] += 30.0;
		
        PlayerTextDrawSetPreviewModel(playerid, DSModel, DSModels[DealerID[playerid]][dModel]);
		PlayerTextDrawSetPreviewRot(playerid, DSModel, 0.0, 0.0, DSAngle[playerid], 1.0);
		PlayerTextDrawShow(playerid,DSModel);
		
		SetVehicleZAngle(VehicleDealer[playerid],DSAngle[playerid]);
    }
    if(playertextid == DSTest)
    {
        new engine,lights,alarm,doors,bonnet,boot,objective;

		GetVehicleParamsEx(VehicleDealer[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(VehicleDealer[playerid],1,lights,alarm,doors,bonnet,boot,objective);
		
        SetVehiclePos(VehicleDealer[playerid],1694.9312,-785.2761,54.3741);
		SetVehicleZAngle(VehicleDealer[playerid],348.5435);
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);

		PutPlayerInVehicle(playerid,VehicleDealer[playerid],0);
		SendClientMessage(playerid,COLOR_WHITE,"You have 30 seconds to test your car, have fun!");
		SetTimerEx("CancelTDrive", 30 * 1000, 0, "d", playerid);
		
		CancelSelectTextDraw(playerid);
		HideDSTD(playerid);
    }
    if(playertextid == DSInfo)
    {
        CancelSelectTextDraw(playerid);
        new title[128], content[512];
		format(content, sizeof(content), "Name: {FFFFFF}%s\n{A9C4E4}Model: {FFFFFF}%d\n{A9C4E4}Price: {FFFFFF}$%s\n{A9C4E4}Stock: {FFFFFF}%d\n{A9C4E4}Doors: {FFFFFF}%d\n{A9C4E4}Type: {FFFFFF}%s\n{A9C4E4}MaxSpeed: {FFFFFF}%d",vehName[DSModels[DealerID[playerid]][dModel]-400],DSModels[DealerID[playerid]][dModel],Decimal(DSModels[DealerID[playerid]][dPrice]),DSModels[DealerID[playerid]][dStock],DSModels[DealerID[playerid]][dDoors],DSModels[DealerID[playerid]][dType],DSModels[DealerID[playerid]][dMaxSpeed]);
		format(title, sizeof(title), "Informations about %s", vehName[DSModels[DealerID[playerid]][dModel]-400]);
		ShowPlayerDialog(playerid, DIALOG_DSINFO, DIALOG_STYLE_MSGBOX, title, content, "Close", "");
		//
    }
    if(playertextid == DSCancel)
    {
    	DestroyVehicle(VehicleDealer[playerid]);
        TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
		CancelSelectTextDraw(playerid);
		HideDSTD(playerid);
		InDealer[playerid] = 0;
    }
    if(playertextid == DSBuy)
    {
        if(DSModels[DealerID[playerid]][dPrice] > PlayerData[playerid][Cash]) return SendClientMessage(playerid,COLOR_WHITE,"{FFFFCC}Error: You don't have enough money!");
        if(DSModels[DealerID[playerid]][dStock] == 0)
		{
			SendClientMessage(playerid,COLOR_WHITE,"{FFFFCC}Error: We don't have anymore this type of car!");
		}
		else
		{
		    new idd = FindEmptyID();
			if(idd == 0 || idd == pvehs)
			{
				pvehs += 1;
				idd = pvehs;
			}
			new key = FindCSlot(playerid);
			if(key == 1)
			{
				PlayerData[playerid][CarKey1] = idd;
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey1='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey1], PlayerData[playerid][ID]);
				mysql_tquery(SQL, string, "", "");
			}
			if(key == 2)
			{
				PlayerData[playerid][CarKey2] = idd;
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey2='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey2], PlayerData[playerid][ID]);
				mysql_tquery(SQL, string, "", "");
			}
			if(key == 3)
			{
				PlayerData[playerid][CarKey3] = idd;
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey3='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey3], PlayerData[playerid][ID]);
				mysql_tquery(SQL, string, "", "");
			}
			if(key == 4)
			{
				PlayerData[playerid][CarKey4] = idd;
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey4='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey4], PlayerData[playerid][ID]);
				mysql_tquery(SQL, string, "", "");
			}
			if(key == 5)
			{
				PlayerData[playerid][CarKey5] = idd;
				mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey5='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey5], PlayerData[playerid][ID]);
				mysql_tquery(SQL, string, "", "");
			}
			
			CarInfo[idd][Userid] = PlayerData[playerid][ID];
			CarInfo[idd][cID] = idd;
			CarInfo[idd][cModel] = DSModels[DealerID[playerid]][dModel];
			CarInfo[idd][cLocationx] = 2148.5664;	CarInfo[idd][cLocationy] = -1157.5551;	CarInfo[idd][cLocationz] = 23.5491;
			CarInfo[idd][cAngle] = 270.3397;
			CarInfo[idd][cColorOne] = 1;	CarInfo[idd][cColorOne] = 1;
			strmid(CarInfo[idd][cOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
			CarInfo[idd][cValue] = DSModels[DealerID[playerid]][dPrice];
			strmid(CarInfo[idd][cLicense], "NewCar", 0, 6, 255);
			CarInfo[idd][cAlarm] = 0;	CarInfo[idd][cLock] = 0;
			CarInfo[idd][mod0] = 0;		CarInfo[idd][mod1] = 0;		CarInfo[idd][mod2] = 0;		CarInfo[idd][mod3] = 0;
			CarInfo[idd][mod4] = 0;		CarInfo[idd][mod5] = 0;		CarInfo[idd][mod6] = 0;		CarInfo[idd][mod7] = 0;
			CarInfo[idd][mod8] = 0;		CarInfo[idd][mod9] = 0;		CarInfo[idd][mod10] = 0;	CarInfo[idd][mod11] = 0;
			CarInfo[idd][mod12] = 0;	CarInfo[idd][mod13] = 0;	CarInfo[idd][paintjob] = 0;	CarInfo[idd][KM] = 0;

			mysql_format(SQL, string, sizeof(string),"INSERT INTO cars (ID, Model) VALUES (%d, %d)",  idd, CarInfo[idd][cModel]);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationx='%f' WHERE ID=%d", CarInfo[idd][cLocationx], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationy='%f' WHERE ID=%d", CarInfo[idd][cLocationy], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationz='%f' WHERE ID=%d", CarInfo[idd][cLocationz], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Angle='%f' WHERE ID=%d", CarInfo[idd][cAngle], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne='%d' WHERE ID=%d", CarInfo[idd][cColorOne], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorTwo='%d' WHERE ID=%d", CarInfo[idd][cColorTwo], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Owner='%s' WHERE ID=%d", CarInfo[idd][cOwner], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Value='%d' WHERE ID=%d", CarInfo[idd][cValue], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET License='%s' WHERE ID=%d", CarInfo[idd][cLicense], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Alarm='%d' WHERE ID=%d", CarInfo[idd][cAlarm], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], idd);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Userid='%d' WHERE ID=%d", PlayerData[playerid][ID], idd);
			mysql_tquery(SQL, string, "", "");

			CarInfo[idd][Spawned] = CreateVehicle(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],1,1,-1);
			SetVehicleNumberPlate(idd,CarInfo[idd][cLicense]);

			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Spawned='%d' WHERE ID=%d", CarInfo[idd][Spawned], idd);
			mysql_tquery(SQL, string, "", "");

			GivePlayerCash(playerid, -DSModels[DealerID[playerid]][dPrice]);
			if(DSModels[DealerID[playerid]][dStock] > 1)
			{
				DSModels[DealerID[playerid]][dStock] -= 1;
				mysql_format(SQL, string, sizeof(string), "UPDATE dsveh SET Stock='%d' WHERE ID=%d", DSModels[DealerID[playerid]][dStock], DealerID[playerid]);
				mysql_tquery(SQL, string, "", "");
			}
			
			DestroyVehicle(VehicleDealer[playerid]);
	        TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid,0);
			CancelSelectTextDraw(playerid);
			HideDSTD(playerid);
			InDealer[playerid] = 0;
			
			format(string, sizeof(string), "Congratultions. You bought a %s for $%s. You can find your car in the near park. ",vehName[DSModels[DealerID[playerid]][dModel]-400],Decimal(CarInfo[idd][cValue]));
			SendClientMessage(playerid,COLOR_YELLOW2,string);

			SetPlayerCheckpoint(playerid,CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],5.0);
		}
    }
    return 1;
}

function DrivingTest(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}Please enter in the exam vehicle.");
	SetPlayerCheckpoint(playerid, 1365.6302,-1646.8070,13.3828, 5.0);
	VSpecial[playerid] = 100;
}

function FlyingTest(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}Please enter in the exam vehicle.");
	SetPlayerCheckpoint(playerid, 1679.7637,-2613.8149,13.5469, 5.0);
	VSpecial[playerid] = 101;
}

function SailingTest(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}License: {FFFFFF}Please enter in the exam vehicle.");
	SetPlayerCheckpoint(playerid, 723.0069,-1493.9131,1.9343, 5.0);
	VSpecial[playerid] = 102;
}

function KartEvent()
{
	Kart = 1;
	KartPrize = 0;
	KartPlayers = 0;
	foreach(Player, i)
	{
	    SendClientMessage(i, COLOR_WHITE, "Event Kart-Race! 1st place: $2500 | 2nd place: $2000 | 3rd place: $1000!");
		SendClientMessage(i, COLOR_WHITE, "If you would join in this event, type /join. In 30 seconds, the event will start!");
		JoinedKart[i] = 0;
	}
	SetTimer("KartEventSTOP",30000,0);
	return 1;
}

function KartEventSTOP()
{
	if(KartPlayers >= 5)
	{
		foreach(Player, i)
		{
	     	SetPlayerHealth(i, 100);
	     	SendClientMessage(i, COLOR_WHITE, "Now you cannot join in Kart-Race event! Registration is closed!");
			if(JoinedKart[i] > 0)
			{
				SendClientMessage(i, COLOR_WHITE, "Event Race: Start! Go Go Go!");
				TogglePlayerControllable(i, 1);
				PKartCP[i] = 0;
				SetPlayerRaceCheckpoint(i, 0, KartCP[PKartCP[i]][0], KartCP[PKartCP[i]][1], KartCP[PKartCP[i]][2], KartCP[PKartCP[i] + 1][0], KartCP[PKartCP[i] + 1][1], KartCP[PKartCP[i] + 1][2], 3);
			}
		}
		Kart = 2;
	}
	else
	{
		foreach(Player, i)
		{
			SendClientMessage(i, COLOR_WHITE, "Registration on Kart-Race event is closed!");
			SendClientMessage(i, COLOR_WHITE, "Because players didn't join in event, it is over!");
		}
		KartPlayers = 0;
		Kart = 0;
		KillWinners();
	}
	return 1;
}

function CSEvent()
{
	CS = 1;
	Team1 = 0;
	Team2 = 0;
 	foreach(Player, i)
	{
		SendClientMessage(i, COLOR_WHITE, "Event Counter-Strike! Price is $2000 and 5 XP for team whitch will win!");
		SendClientMessage(i, COLOR_WHITE, "If you would join in this event, type /join. In 30 seconds, the event will start!");
		JoinedCS[i] = 0;
	}
	SetTimer("CSEventSTOP",30000,0);
	return 1;
}

function CSEventSTOP()
{
	if(Team1 > 0 && Team2 > 0)
	{
		foreach(Player, i)
		{
   			SendClientMessage(i, COLOR_WHITE, "Now you cannot join in Counter-Strike event! Registration is closed!");
			if(JoinedCS[i] > 0)
			{
			    SetPlayerHealth(i, 100);
				SetPlayerArmour(i, 0.0);
			    ResetPlayerWeapons(i);
				TogglePlayerControllable(i, 1);
    			SendClientMessage(i, COLOR_WHITE, "Succes!");
				GivePlayerWeapon(i, 24, 9999);
				GivePlayerWeapon(i, 29, 9999);
				GivePlayerWeapon(i, 31, 9999);
				GivePlayerWeapon(i, 34, 9999);
			}
		}
		CS = 2;
	}
	else
	{
		foreach(Player, i)
		{
  			SendClientMessage(i, COLOR_WHITE, "Registration on Counter-Strike event is closed!");
			SendClientMessage(i, COLOR_WHITE, "Because players didn't join in event, it is over!");
			if(JoinedCS[i] > 0)
			{
                SetPlayerHealth(i, 0);
                JoinedCS[i] = 0;
                SetPlayerSkin(i, PlayerData[i][Char]);
			}
		}
		CS = 0;
		KillWinners();
	}
	return 1;
}

function KillWinners()
{
	foreach(Player, i)
	{
		if(JoinedCS[i] > 0)
		{
			JoinedCS[i] = 0;
			ResetPlayerWeapons(i);
			SetPlayerPos(i, TeleportDest[i][4],TeleportDest[i][5],TeleportDest[i][6]);
			SetPlayerInterior(i, TeleportInt[i]);
			SetPlayerVirtualWorld(i, TeleportVW[i]);
			TogglePlayerControllable(i, 0);
            SetTimerEx("UnfreezeT", 5000, 0, "d", i);
			SetPlayerFColor(i);
			SetPlayerSkin(i, PlayerData[i][Char]);
			SetPlayerHealth(i, 100.0);
		}
		if(JoinedKart[i] > 0)
		{
			SetPlayerPos(i, TeleportDest[i][4],TeleportDest[i][5],TeleportDest[i][6]);
			SetPlayerInterior(i, TeleportInt[i]);
			SetPlayerVirtualWorld(i, TeleportVW[i]);
			TogglePlayerControllable(i, 0);
            SetTimerEx("UnfreezeT", 5000, 0, "d", i);
			SetPlayerHealth(i, 100.0);
			VSpecial[i] = 0;
		}
	}
	return 1;
}

public OnVehicleMod(playerid,vehicleid,componentid)
{
    return 1;
}

function SetTunning(idd)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    new carid = CarInfo[idd][Spawned];
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(carid,0,lights,alarm,CarInfo[idd][cLock],bonnet,boot,objective);
	if(CarInfo[idd][mod0] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod0]);
	}
	if(CarInfo[idd][mod1] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod1]);
	}
	if(CarInfo[idd][mod2] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod2]);
	}
	if(CarInfo[idd][mod3] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod3]);
	}
	if(CarInfo[idd][mod4] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod4]);
	}
	if(CarInfo[idd][mod5] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod5]);
	}
	if(CarInfo[idd][mod6] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod6]);
	}
	if(CarInfo[idd][mod7] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod7]);
	}
	if(CarInfo[idd][mod8] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod8]);
	}
	if(CarInfo[idd][mod9] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod9]);
	}
	if(CarInfo[idd][mod10] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod10]);
	}
	if(CarInfo[idd][mod11] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod11]);
	}
	if(CarInfo[idd][mod12] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod12]);
	}
	if(CarInfo[idd][mod13] != 0)
	{
		AddVehicleComponent(carid,CarInfo[idd][mod13]);
	}
	SetVehicleNumberPlate(carid,CarInfo[idd][cLicense]);
}

function OnAdPlaced(playerid)
{
    curid[playerid] = cache_insert_id();
	new string[144];
	format(string, sizeof(string), "{00D900}CNN: {FFFFFF}Your ad is in position {00D900}%d{FFFFFF}. Time remaining: {00D900}%d{FFFFFF} sec.", curid[playerid], (curid[playerid] - idad) * 30);
	SendClientMessage(playerid, COLOR_WHITE, string);
}

function PreAd(playerid, adtext[])
{
	new string[144], query[128];
	if(cache_num_rows() == 1)
	{
		format(string, sizeof(string), "{00D900}CNN: {FFFFFF}Your ad is in position {00D900}%d{FFFFFF}. Time remaining: {00D900}%d{FFFFFF} sec.", curid[playerid], (curid[playerid] - idad) * 30);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
    if(!PlayerToPoint(7,playerid,845.007446,-1046.207397,25.010288)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near CNN!");
    if(PlayerData[playerid][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your phone is offline!");
 	if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
    if(strlen(adtext) > 45) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your advertisment is too long!");
    if(FindIP(adtext) || Findhtml(adtext))
	{
	    format(string, 256, "[WARNING]: %s(%d) type on /ad: %s.", PlayerData[playerid][Name],playerid, adtext);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
    new payout = strlen(adtext) * SBizzInfo[8][sbEntranceCost];
    if(PlayerData[playerid][Cash] < payout)
	{
		format(string, sizeof(string), "{FFFFCC}Error: You used %d characters which cost $%d, you don't have enough.", strlen(adtext), payout);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	format(string, sizeof(string), "~r~Paid $%d~n~~w~Message contained: %d Characters", payout, strlen(adtext));
	GameTextForPlayer(playerid, string, 5000, 5);
	if(ads == 0)
	{
	    SetTimer("TakeAd", 30 * 1000, false);
	    ads = 1;
	}

	SBizzInfo[8][sbTill] += payout;
	GivePlayerCash(playerid, -payout);

	mysql_format(SQL, query,128,"UPDATE `sbizz` SET `Till`='%d' WHERE `ID`='8'",SBizzInfo[8][sbTill]);
	mysql_tquery(SQL, query, "", "");

	mysql_format(SQL, query, sizeof(query), "INSERT INTO `ads` (`user`, `message`, `phone`) VALUES ('%s', '%s', '%s')", PlayerData[playerid][Name], adtext, DecimalNumber(playerid));
	mysql_tquery(SQL, query, "OnAdPlaced", "d", playerid);
	return 1;
}

YCMD:sleep(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][InHouse] == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must be in a house to sleep!");
	if(Sleeping[playerid])
	{
		SendClientMessage(playerid, COLOR_WHITE, "Welcome back.");
		TogglePlayerControllable(playerid, 1);
		SetPlayerFColor(playerid);
		
		PlayerData[playerid][online] = 1;
		mysql_format(SQL, string,128,"UPDATE `users` SET `online`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][online],PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	
		Sleeping[playerid] = 0;
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "[AFK] Have a nice sleep.");
		TogglePlayerControllable(playerid, 0);
		LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		SetPlayerColor(playerid,0x737373FF);
		
		PlayerData[playerid][online] = 2;
		mysql_format(SQL, string,128,"UPDATE `users` SET `online`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][online],PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	
		Sleeping[playerid] = 1;
	}
	return 1;
}

YCMD:allowon(playerid, params[], help)
{
	Allowed[playerid] = 1;
	return 1;
}

YCMD:allowoff(playerid, params[], help)
{
	Allowed[playerid] = 0;
	return 1;
}

YCMD:movieon(playerid, params[], help)
{
	if(Allowed[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not a movie maker!");
    foreach(Player, i)
	{
		ShowPlayerNameTagForPlayer(playerid, i, false);
	}
	PlayerTextDrawHide(playerid, Speedd);
	PlayerTextDrawHide(playerid, Fuell);
	PlayerTextDrawHide(playerid, Destination);
	PlayerTextDrawHide(playerid, DestinationKM);
	PlayerTextDrawHide(playerid, Radio);
	TextDrawHideForPlayer(playerid,txtTimeDisp);
	TextDrawHideForPlayer(playerid,txtDateDisp);
	HidePlayerProgressBar(playerid, barxp);
	PlayerTextDrawHide(playerid,XPRemain);
	PlayerTextDrawHide(playerid,XPTLeft);
	PlayerTextDrawHide(playerid,XPTotal);
    GameTextForPlayer(playerid, "~W~Movie ~G~on", 5000, 5);
	return 1;
}

YCMD:movieoff(playerid, params[], help)
{
	foreach(Player, i)
	{
		ShowPlayerNameTagForPlayer(playerid, i, true);
	}
    TextDrawShowForPlayer(playerid,txtTimeDisp);
	TextDrawShowForPlayer(playerid,txtDateDisp);
	ShowPlayerProgressBar(playerid, barxp);
	PlayerTextDrawShow(playerid,XPRemain);
	PlayerTextDrawShow(playerid,XPTLeft);
	PlayerTextDrawShow(playerid,XPTotal);
	Allowed[playerid] = 0;
	return 1;
}
YCMD:getdrugs(playerid, params[], help)
{
	new amount, str[128], string[128];
	if(PlayerData[playerid][Job] != 9) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not an Drugs Dealer!");
    if(!PlayerToPoint(7,playerid,2167.7480, -2263.0820, 13.3051)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near drugs factory!");
    if(PlayerData[playerid][Drugs] > 9) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't carry more than 10 grams of drugs!");
	if(sscanf(params, "i", amount)) return SendUsage(playerid,"/getdrugs <amount>");
	if(amount > 10 || amount < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid amount!");
	new price = amount * 100;
	if(PlayerData[playerid][Cash] < price) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money!");

	format(string, sizeof(string), "* You get %d grams of drugs", amount);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	
	PlayerData[playerid][Drugs] += amount;

	mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");

	GivePlayerCash(playerid, -price);
	return 1;
}

YCMD:usedrugs(playerid, params[], help)
{
	new name[64], drugs, string[128], str[128];
	if(PlayerData[playerid][Drugs] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs!");
	if(sscanf(params, "s[64]", name))
	{
		SendUsage(playerid,"/usedrugs <drug name>");
		SendUsage(playerid,"Available names: Marijuana, Cocaine, Extasy, LSD");
	}
	else
	{
	    new Float:health;
		GetPlayerHealth(playerid,health);
	    
		if(strcmp(name,"marijuana",true) == 0) 		drugs = 1;
        else if(strcmp(name,"cocaine",true) == 0) 	drugs = 2;
        else if(strcmp(name,"extasy",true) == 0) 	drugs = 3;
        else if(strcmp(name,"lsd",true) == 0) 		drugs = 4;
        else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid drug name!");
        
        if(drugs > PlayerData[playerid][Drugs]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs!");
        
        PlayerStoned[playerid] += drugs;
        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + drugs * 1000);
        
        PlayerData[playerid][Drugs] -= drugs;
        mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
		mysql_tquery(SQL, str, "", "");
		
		if(health > ((100 - drugs) * 10.0)) SetPlayerHealth(playerid, 100.0);
		else SetPlayerHealth(playerid, health + drugs * 10.0);
	
        if(PlayerStoned[playerid] >= 6)
        {
            ApplyAnimation(playerid , "CRACK","crckdeth2",4.1,1,1,1,1,10000);
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("UnfreezeT", 5000, 0, "d", playerid);
        }
		format(string, sizeof(string), "* %s has used some drugs (%s).", PlayerData[playerid][Name], name);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",4.0,0,0,0,0,0);
		GameTextForPlayer(playerid, "~w~You are~n~~p~Stoned", 4000, 1);
		
	}
	return 1;
}

YCMD:ticket(playerid, params[], help)
{
	new id, amount, reason[32], sendername[25], giveplayer[25], string[256];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "uis[32]", id,amount,reason)) return SendUsage(playerid,"/ticket <Name/Playerid> <amount> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't gave ticket to yourself!");
	if(PlayerData[id][Cash] < amount) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player doesn't have enough money!");
	if(amount > 100000) return 1;
	format(string, sizeof(string), "* You gave %s a ticket costing $%d for %s", giveplayer, amount, reason);
	SendClientMessage(playerid, COLOR_LIGHTBLUE2, string);
	format(string, sizeof(string), "* Officer %s has given you a ticket costing $%d for %s (Use /accept ticket %d)", sendername, amount, reason, playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE2, string);
	TicketOffer[id] = playerid;
	TicketMoney[id] = amount;
	return 1;
}

YCMD:selldrugs(playerid, params[], help)
{
	new id, pricee, amount, string[128];
    if(PlayerData[playerid][Job] != 9) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are not an Drugs Dealer!");
    if(sscanf(params, "uii", id,amount,pricee)) return SendUsage(playerid,"/selldrugs <Name/Playerid> <amount> <price>");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
    if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");
	if(amount > PlayerData[playerid][Drugs]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs.");
	if(pricee > 100000) return 1;
	
	format(string, sizeof(string), "* You offerd %s %d grams for $%s.",PlayerData[id][Name],amount,Decimal(pricee));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Drugs Dealer %s wants to sell you %d grams for $%s, (use /accept drugs %d) to accept.",PlayerData[playerid][Name],amount,Decimal(pricee),playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);

	DrugOffer[playerid] = id;
	DrugOffered[id] = playerid;
	DrugPrice[id] = pricee;
    DrugAmount[id] = amount;
	return 1;
}

YCMD:sellmaterials(playerid, params[], help)
{
    new id, pricee, amount, string[128];
    if(PlayerData[playerid][Job] != 8) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are not an Arms Dealer!");
    if(sscanf(params, "uii", id,amount,pricee)) return SendUsage(playerid,"/sellmaterials <Name/Playerid> <amount> <price>");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
    if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");
	if(amount > PlayerData[playerid][Materials]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough materials.");
	if(pricee > 100000) return 1;

	format(string, sizeof(string), "* You offerd %s %d materials for $%s.",PlayerData[id][Name],amount,Decimal(pricee));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Arms Dealer %s wants to sell you %d materials for $%s, (use /accept materials %d) to accept.",PlayerData[playerid][Name],amount,Decimal(pricee),playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);

	MaterialsOffer[playerid] = id;
	MaterialsOffered[id] = playerid;
	MaterialsPrice[id] = pricee;
    MaterialsAmount[id] = amount;
	return 1;
}

YCMD:sellgun(playerid, params[], help)
{
	new id,weapon[15],pricee,weaponn,string[128];
	if(PlayerData[playerid][Job] != 8) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are not an Arms Dealer!");
	if(sscanf(params, "us[15]i", id,weapon,pricee)) return SendUsage(playerid,"/sellgun <Name/Playerid> <weapon> <price>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(strcmp(weapon,"sdpistol",true) == 0) { if(PlayerData[playerid][Materials] > 9) weaponn = 23;  else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"flowers",true) == 0) { if(PlayerData[playerid][Materials] > 0) weaponn = 14; else {  SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"eagle",true) == 0) { if(PlayerData[playerid][Materials] > 14)  weaponn = 24; else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"mp5",true) == 0) {	if(PlayerData[playerid][Materials] > 19) weaponn = 29; else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"shotgun",true) == 0) { if(PlayerData[playerid][Materials] > 19) weaponn = 25; else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"ak47",true) == 0) { if(PlayerData[playerid][Materials] > 59) weaponn = 30; else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"m4",true) == 0) { if(PlayerData[playerid][Materials] > 59) weaponn = 31;  else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else if(strcmp(weapon,"rifle",true) == 0) { if(PlayerData[playerid][Materials] > 59) weaponn = 33; else { SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Not enough Materials for that Weapon!"); return 1; } }
	else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid weapon name!");
	if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");
	if(pricee > 100000) return 1;
	
	format(string, sizeof(string), "* You offerd %s a %s for $%s.",PlayerData[id][Name],weapon,Decimal(pricee));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Arms Dealer %s wants to sell you a %s for $%s, (use /accept gun %d) to accept.",PlayerData[playerid][Name],weapon,Decimal(pricee),playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);

	GunOffer[playerid] = id;
	GunOffered[id] = playerid;
	GunPrice[id] = pricee;
    GunModel[id] = weaponn;
    
	return 1;
}

YCMD:getmaterials(playerid, params[], help)
{
	if(PlayerData[playerid][Job] != 8) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not an Arms Dealer!");
    if(!PlayerToPoint(7,playerid,2735.7463, -2551.0705, 13.6457)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near materials get!");
	if(Mats[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please deliver the materials first!");
	if(PlayerData[playerid][Cash] < 100) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money!");
    SendClientMessage(playerid, COLOR_YELLOW, "You bought 10 materials for $100, deliver it to the factory!");
    Mats[playerid] = 1;
	GivePlayerCash(playerid, -100);
	return 1;
}

YCMD:delivermaterials(playerid, params[], help)
{
	new str[128];
	if(PlayerData[playerid][Job] != 8) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not an Arms Dealer!");
    if(!PlayerToPoint(7,playerid,1530.7158, 952.2706, 10.8203)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near materials get!");
	if(Mats[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please get the materials first!");
    SendClientMessage(playerid, COLOR_YELLOW, "You delivered 10 materials!");
    Mats[playerid] = 0;

	PlayerData[playerid][Materials] += 10;

	mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Materials],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:ad(playerid, params[], help)
{
	new adtext[56], query[128];
	if(PlayerData[playerid][Level] < 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You need to be level 3 or higher.");
    if(sscanf(params, "s[55]", adtext)) return SendUsage(playerid,"/ad <advertisment>");
	mysql_format(SQL, query, 128, "SELECT `ID` FROM `ads` WHERE LOWER(user) = LOWER('%s') LIMIT 1",PlayerData[playerid][Name]);
	mysql_tquery(SQL, query, "PreAd", "ds", playerid, adtext);
	return 1;
}

YCMD:gps(playerid, params[], help)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are not driving a vehicle.");
	if(VSpecial[playerid] >= 100) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are taking an exam.");
	ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "Global Positioning System", "Important locations\nHead Quarters", "Select", "Cancel");
	return 1;
}

YCMD:forum(playerid, params[], help)
{
	SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Forum: {FFFFFF}Our forum is {FFFF00}--");
	return 1;
}

YCMD:changepass(playerid, params[], help)
{
	new cpass[25], npass[25];
    if(sscanf(params, "s[25]s[25]", cpass, npass)) return SendUsage(playerid,"/changepass <current password> <new password>");
    new hashed_pass[129];
	WP_Hash(hashed_pass, sizeof(hashed_pass), cpass);
    if(strcmp(hashed_pass, PlayerData[playerid][Password])) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Incorrect password.");
    if(strlen(npass) > 25 || strlen(npass) < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Password must be between 1 and 25 characters.");

	new hashed_pass2[129];
	WP_Hash(hashed_pass2, sizeof(hashed_pass2), npass);
	
	new str[256];
	mysql_format(SQL, str, 256,"UPDATE `users` SET `Password`='%s' WHERE `ID`='%d' LIMIT 1",hashed_pass2,PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	
	new string[128];
	format(string,sizeof(string),"{FFFF00}Password: {FFFFFF}Your new password is: %s.",npass);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:join(playerid, params[], help)
{
    if(CS == 1 && JoinedCS[playerid] == 0 && PlayerData[playerid][WantedLevel] == 0 && PlayerData[playerid][PlayerCuffed] == 0)
	{
		if(Team1 < Team2)
		{
		    GetPlayerPos(playerid, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
			TeleportInt[playerid] = GetPlayerInterior(playerid);
			TeleportVW[playerid] = GetPlayerVirtualWorld(playerid);
			SetPlayerPos(playerid, -2136.9424,-90.2070,35.3203);
			Team1 += 1;
			JoinedCS[playerid] = 1;
			TogglePlayerControllable(playerid, 0);

            SetPlayerVirtualWorld(playerid, 1000);
            SetPlayerInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "You joined in the event as a terrorist.");
			SetPlayerSkin(playerid, 123);
			SetPlayerColor(playerid,COLOR_LIGHTRED);
		}
		else
		{
		    GetPlayerPos(playerid, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
		    TeleportInt[playerid] = GetPlayerInterior(playerid);
			TeleportVW[playerid] = GetPlayerVirtualWorld(playerid);
			SetPlayerPos(playerid, -2145.9585,-275.1007,35.3203);
		    Team2 += 1;
		    JoinedCS[playerid] = 2;
		    TogglePlayerControllable(playerid, 0);
		    
		    SetPlayerVirtualWorld(playerid, 1000);
		    SetPlayerInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "You join in the event as a police officer.");
			SetPlayerSkin(playerid, 71);
			SetPlayerColor(playerid,COLOR_DBLUE);
		}
	}
	if(Kart == 1 && JoinedKart[playerid] == 0 && PlayerData[playerid][WantedLevel] == 0 && PlayerData[playerid][PlayerCuffed] == 0)
	{
		if(KartPlayers > 21) return SendClientMessage(playerid, COLOR_WHITE, "There are 21 players on this event.");
		
		GetPlayerPos(playerid, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
		TeleportInt[playerid] = GetPlayerInterior(playerid);
		TeleportVW[playerid] = GetPlayerVirtualWorld(playerid);
		
		JoinedKart[playerid] = 1;
		SetPlayerVirtualWorld(playerid, 10001);
		PutPlayerInVehicle(playerid, KartCar[KartPlayers], 0);
		new e,l,a,d,b,bo,o;
		GetVehicleParamsEx(KartCar[KartPlayers],e,l,a,d,b,bo,o);
		SetVehicleParamsEx(KartCar[KartPlayers],1,l,a,d,b,bo,o);
		TogglePlayerControllable(playerid, 0);
		
		VSpecial[playerid] = 10001;
		KartPlayers += 1;
	}
	
	return 1;
}

YCMD:csalive(playerid, params[], help)
{
	new string[128];
	if(CS != 2) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: CS event is currently off.");
    foreach(Player, i)
    {
       	if(JoinedCS[i] == 1)
    	{
       		format(string,sizeof(string),"%s(%d)",PlayerData[i][Name],i);
       		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		}
		if(JoinedCS[i] == 2)
    	{
       		format(string,sizeof(string),"%s(%d)",PlayerData[i][Name],i);
       		SendClientMessage(playerid, COLOR_DBLUE, string);
		}
	}
	return 1;
}
YCMD:csevent(playerid, params[], help)
{
	new string[128];
    if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
    CSEvent();
    format(string, sizeof(string), "AdmBot: Admin %s started a counter-strike event.",PlayerData[playerid][Name]);
    SendClientMessageToAll(COLOR_NEWS,string);
	return 1;
}

YCMD:payfactionmembers(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	foreach(Player, i)
    {
		if(PlayerData[i][Member] > 0 || PlayerData[i][Leader] > 0)
		{
			new amount = PlayerData[i][Rank] * 1500;
			GivePlayerCash(i, amount);
			
			format(string, sizeof(string), "{00B8E6}You recieved $%s.", Decimal(amount));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "NR AdmBot: All faction members online has recieved their payment from Admin %s.", PlayerData[playerid][Name]);
    SendClientMessageToAll(COLOR_NEWS,string);
	return 1;
}

YCMD:kartevent(playerid, params[], help)
{
	new string[128];
    if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
    KartEvent();
    format(string, sizeof(string), "AdmBot: Admin %s started an kart event.",PlayerData[playerid][Name]);
    SendClientMessageToAll(COLOR_NEWS,string);
	return 1;
}

YCMD:sbot(playerid, params[], help)
{
    if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, name[25], level;
	if(sscanf(params, "us[25]ii", id, name, level)) return SendUsage(playerid,"/sbot <bot playerid> <Exact Name> <level>");
	SetPlayerName(id, name);
	SetPlayerScore(id, level);
	SetPlayerColor(id,0xFFFFFFFF);
	ByPASS[id] = 1;
	return 1;
}

YCMD:w(playerid, params[], help)
{
	new message[128],string[128],id;
	if(PlayerData[playerid][Muted] == 1) return SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
	if(sscanf(params, "us[128]", id, message)) return SendUsage(playerid,"/w <Name/Playerid> <message>");
	{
		if(FindIP(message) || Findhtml(message))
		{
		    format(string, 256, "Warning: %s(%d) type on /w: %s.", PlayerData[playerid][Name],playerid, message);
			ABroadCast(COLOR_YELLOW,string,1);
			return 1;
		}
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't whisper to yourself!");
		if(GetDistanceBetweenPlayers(playerid,id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");

		format(string, sizeof(string), "%s whispers: %s", PlayerData[playerid][Name], message);
		SendClientMessage(id, COLOR_YELLOW, string);
		format(string, sizeof(string), "Whisper to %s: %s", PlayerData[id][Name], message);
		SendClientMessage(playerid,  COLOR_YELLOW, string);
	}
	return 1;
}

YCMD:cw(playerid, params[], help)
{
	new message[128],string[128];
	if(PlayerData[playerid][Muted] == 1) return SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/cw <message>");
	if(FindIP(message) || Findhtml(message))
	{
	    format(string, 256, "Warning: %s(%d) type on /cw: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	new vehicle = GetPlayerVehicleID(playerid);
    foreach(Player, i)
    {
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
        {
    	   if(GetPlayerVehicleID(i) == vehicle)
           {
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
                	format(string, sizeof(string), "Driver %s says: %s", PlayerData[playerid][Name], message);
                    SendClientMessage(i, COLOR_YELLOW, string);
                }
                else
                {
					format(string, sizeof(string), "Passenger %s says: %s", PlayerData[playerid][Name], message);
                    SendClientMessage(i, COLOR_YELLOW, string);
     			}
			}
		}
	}
	return 1;
}

YCMD:b(playerid, params[], help)
{
	new message[128],string[128];
	if(PlayerData[playerid][Muted] == 1) return SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/b <message>");
	if(FindIP(message) || Findhtml(message))
	{
	    format(string, 256, "Warning: %s(%d) type on /b: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	format(string, sizeof(string), "%s says: (( %s ))", PlayerData[playerid][Name], message);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

YCMD:me(playerid, params[], help)
{
	new message[128],string[128];
	if(PlayerData[playerid][Muted] == 1) return SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/me <action>");
	if(FindIP(message) || Findhtml(message))
	{
	    format(string, 256, "Warning: %s(%d) type on /me: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	format(string, sizeof(string), "* %s %s", PlayerData[playerid][Name], message);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

YCMD:tempp(playerid, params[], help)
{
	SetPlayerPos(playerid, 2131.7759,-1150.5256,24.1473);
	return 1;
}

YCMD:work(playerid, params[], help)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't driving a vehicle!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PlayerData[playerid][Job] == 1 && StaticVeh[vehicleid][vJob] == 1)
	{//PizzaBoy
	    new randn = random(sizeof(PizzaCP));
	    SetPlayerCheckpoint(playerid, PizzaCP[randn][0], PizzaCP[randn][1], PizzaCP[randn][2], 4.0);
	    SetDestination(playerid, PizzaCP[randn][0], PizzaCP[randn][1], PizzaCP[randn][2]);
		//SetPlayerSkin(playerid, 155);
		PPizzaCP[playerid] = randn;
        VJob[playerid] = vehicleid;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PlayerData[playerid][Job] == 2 && StaticVeh[vehicleid][vJob] == 2)
	{//Street Sweeper
        PSweeperCP[playerid] = 0;
		SetPlayerCheckpoint(playerid, SweeperCP[PSweeperCP[playerid]][0], SweeperCP[PSweeperCP[playerid]][1], SweeperCP[PSweeperCP[playerid]][2], 4.0);
	    SetDestination(playerid, SweeperCP[PSweeperCP[playerid]][0], SweeperCP[PSweeperCP[playerid]][1], SweeperCP[PSweeperCP[playerid]][2]);
	    
        VJob[playerid] = vehicleid;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PlayerData[playerid][Job] == 3 && StaticVeh[vehicleid][vJob] == 3)
	{//Street Sweeper
        PGarbageCP[playerid] = 0;
		SetPlayerCheckpoint(playerid, GarbageCP[PGarbageCP[playerid]][0], GarbageCP[PGarbageCP[playerid]][1], GarbageCP[PGarbageCP[playerid]][2], 4.0);
	    SetDestination(playerid, GarbageCP[PGarbageCP[playerid]][0], GarbageCP[PGarbageCP[playerid]][1], GarbageCP[PGarbageCP[playerid]][2]);

        VJob[playerid] = vehicleid;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PlayerData[playerid][Job] == 4 && StaticVeh[vehicleid][vJob] == 4)
	{//Farmer
        if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You haven't attach a trailer!");
		new randn = random(sizeof(FarmerCP));
	    SetPlayerCheckpoint(playerid, FarmerCP[randn][0], FarmerCP[randn][1], FarmerCP[randn][2], 4.0);
	    PFarmerCP[playerid] = randn;
        VJob[playerid] = vehicleid;
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PlayerData[playerid][Job] == 5 && StaticVeh[vehicleid][vJob] == 5)
	{//Trucker
        new randn = random(sizeof(TruckerCP));
	    SetPlayerCheckpoint(playerid, TruckerCP[randn][0], TruckerCP[randn][1], TruckerCP[randn][2], 4.0);
	    SetDestination(playerid, TruckerCP[randn][0], TruckerCP[randn][1], TruckerCP[randn][2]);
		PTruckerCP[playerid] = randn;
        VJob[playerid] = vehicleid;
        SendClientMessage(playerid, COLOR_YELLOW, "Take a trailer and deliver to the checkpoint!");
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PlayerData[playerid][Job] == 6 && StaticVeh[vehicleid][vJob] == 6)
	{//Bus Driver
	    if(PBusCP[playerid] == 0)
	    {
	        new Float:x, Float:y, Float:z, string[128];
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z+3);
			format(string, sizeof(string), "%s abuse at BusDriver",PlayerData[playerid][Name]);
			FloodLog(string,"abuse");
	    }
        ShowPlayerDialog(playerid,DIALOG_BUS,DIALOG_STYLE_LIST,"Bus Control Panel","Line 1\nSpecial Line","Select","Exit");
	}
	return 1;
}

YCMD:getjob(playerid, params[], help)
{
	new str[128];
	//if(PlayerData[playerid][Job] != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have a job!");
	if(PlayerToPoint(3.0,playerid,2106.4048,-1789.2028,13.5608))
	{//Pizzaboy
		SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Pizzaboy{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Enter in a vehicle and type {FFA500}/work{FFFFFF}.");
		PlayerData[playerid][Job] = 1;
	}
    else if(PlayerToPoint(3.0,playerid,1626.3418,-1896.2357,13.5514))
	{//STREET SWEEPER
		SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Street Sweeper{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Enter in a vehicle and type {FFA500}/work{FFFFFF}.");
		PlayerData[playerid][Job] = 2;
	}
	else if(PlayerToPoint(3.0,playerid,2076.9292,-2047.7618,13.5469))
	{//Garbageman
	    SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Garbageman{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Enter in a vehicle and type {FFA500}/work{FFFFFF}.");
		PlayerData[playerid][Job] = 3;
	}
	else if(PlayerToPoint(3.0,playerid,-1060.9696,-1195.4563,129.6936))
	{//Farmer
	    SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Farmer{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Enter in a vehicle and type {FFA500}/work{FFFFFF}.");
		PlayerData[playerid][Job] = 4;
	}
	else if(PlayerToPoint(3.0,playerid,-77.1289,-1136.4659,1.0781))
	{//Trucker
		SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Trucker{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Enter in a vehicle and type {FFA500}/work{FFFFFF}.");
		PlayerData[playerid][Job] = 5;
	}
	else if(PlayerToPoint(3.0,playerid,1820.2936,-1402.4757,13.6672))
	{//Bus Driver
	    SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Bus Driver{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Enter in a vehicle and type {FFA500}/work{FFFFFF}.");
		PlayerData[playerid][Job] = 6;
	}
	else if(PlayerToPoint(3.0,playerid,2778.8449, -1416.5430, 24.7453))
	{//Arms Dealer
	    SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Arms Dealer{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Type {FFA500}/getmaterials{FFFFFF} to get some materials.");
		PlayerData[playerid][Job] = 8;
	}
	else if(PlayerToPoint(3.0,playerid,2121.1872, -2274.2968, 20.6718))
	{//Drugs Dealer
	    SendClientMessage(playerid, COLOR_WHITE, "Now you are a {FFA500}Drugs Dealer{FFFFFF}.");
		SendClientMessage(playerid, COLOR_WHITE, "Type {FFA500}/getdrugs{FFFFFF} to get some drugs.");
		PlayerData[playerid][Job] = 9;
	}
	PlayerData[playerid][JobTime] = PlayerData[playerid][TotalExp];
	mysql_format(SQL, str,128,"UPDATE `users` SET `Job`='%d',`JobTime`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Job],PlayerData[playerid][JobTime],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:helpme(playerid, params[], help)
{
	new message[128], string2[164];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/helpme <message>");
	if(rTime[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You must wait 5 seconds until your next help!");
	format(string2, sizeof(string2), "Help from %s(%d): %s", PlayerData[playerid][Name], playerid, message);
	SendHelperMessage(0xFF4545FF,string2);
	
	format(string2, sizeof(string2), "{F3FF02}Your Help Message was sent to the Helpers.");
	SendClientMessage(playerid, 0xFFFFFFFF, string2);
	
	NeedAns[playerid] = 2;
	
	rTime[playerid] = 1;
	SetTimerEx("Report", 5000, 0, "%d", playerid);
	return 1;
}

YCMD:close(playerid, params[], help)
{
	new oldid, string2[128];
	if(PMTo[playerid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't having an active connection.");
	oldid = PMTo[playerid];
	
	PMTo[playerid] = -1;
	PMTo[oldid] = -1;
	
	format(string2, sizeof(string2), "You close the connection with %s", PlayerData[oldid][Name]);
	SendClientMessage(playerid, 0xFF4545FF,string2);
	format(string2, sizeof(string2), "%s closes the connection with you", PlayerData[playerid][Name]);
	SendClientMessage(oldid, 0xFF4545FF,string2);
	return 1;
}

YCMD:connect(playerid, params[], help)
{
	new id, string2[128];
	if((PlayerData[playerid][Admin] + PlayerData[playerid][Helper]) == 0) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(PMTo[playerid] != -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have an active connection.");
	
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/connect <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	
	if(NeedAns[id] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player doesn't requested an answer.");
	
	format(string2, sizeof(string2), "You accepted %s's request. Type /answer to speak with him/her.", PlayerData[id][Name]);
	SendClientMessage(playerid, 0xFF4545FF,string2);
	format(string2, sizeof(string2), "%s accepted your request. Type /answer to speak with him/her.", PlayerData[playerid][Name]);
	SendClientMessage(id, 0xFF4545FF,string2);
	
	if(NeedAns[id] == 1)
	{//Report
		format(string2, sizeof(string2), "%s accepted the %s's request.", PlayerData[playerid][Name], PlayerData[id][Name]);
		SendHelperMessage(0xFF4545FF,string2);
	}
	if(NeedAns[id] == 2)
	{//Help
		format(string2, sizeof(string2), "%s accepted the %s's request.", PlayerData[playerid][Name], PlayerData[id][Name]);
		SendAdminMessage(0xFF4545FF,string2);
	}
	PMTo[playerid] = id;
	PMTo[id] = playerid;
	
	NeedAns[id] = 0;
	return 1;
}

YCMD:answer(playerid, params[], help)
{
	new message[128], string[128];
	if(PMTo[playerid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't having an active connection.");
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/answer <message>");
	
	format(string, sizeof(string), "PM from %s: %s", PlayerData[playerid][Name], message);
	SendClientMessage(PMTo[playerid], COLOR_YELLOW, string);
	format(string, sizeof(string), "PM sent to %s : %s", PlayerData[PMTo[playerid]][Name], message);
	SendClientMessage(playerid,  COLOR_YELLOW, string);
	
	return 1;
}

YCMD:report(playerid, params[], help)
{
	new message[128], string2[164];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/report <message>");
	if(rTime[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You must wait 5 seconds until your next report!");
	format(string2, sizeof(string2), "Report from %s(%d): %s", PlayerData[playerid][Name], playerid, message);
	SendAdminMessage(0xFF4545FF,string2);
	
	format(string2, sizeof(string2), "{F3FF02}Your Report Message was sent to the Admins.");
	SendClientMessage(playerid, 0xFFFFFFFF, string2);
	
	NeedAns[playerid] = 1;
	
	rTime[playerid] = 1;
	SetTimerEx("Report", 5000, 0, "%d", playerid);
	return 1;
}

YCMD:licenses(playerid, params[], help)
{
	new text1[15], text2[15], text3[15], text5[15], text6[15], string[128];
	if(PlayerData[playerid][CarLic] == 0)
	{
		format(text1,sizeof(text1),"Not Passed");
	}
	else
	{
		format(text1,sizeof(text1),"Passed (%d)",PlayerData[playerid][CarLic]);
	}
	if(PlayerData[playerid][FlyLic] == 0)
	{
		format(text2,sizeof(text2),"Not Passed");
	}
	else
	{
		format(text2,sizeof(text2),"Passed (%d)",PlayerData[playerid][FlyLic]);
	}
	if(PlayerData[playerid][BoatLic] == 0)
	{
		format(text3,sizeof(text3),"Not Passed");
	}
	else
	{
		format(text3,sizeof(text3),"Passed (%d)",PlayerData[playerid][BoatLic]);
	}
	/*if(PlayerData[playerid][FishLic] == 0)
	{
		format(text4,sizeof(text4),"Not Passed");
	}
	else
	{
		format(text4,sizeof(text4),"Passed (%d)",PlayerData[playerid][FishLic]);
	}*/
	if(PlayerData[playerid][GunLic] == 0)
	{
		format(text5,sizeof(text5),"Not Passed");
	}
	else
	{
		format(text5,sizeof(text5),"Passed (%d)",PlayerData[playerid][GunLic]);
	}
	if(PlayerData[playerid][MatsLic] == 0)
	{
		format(text6,sizeof(text6),"Not Passed");
	}
	else
	{
		format(text6,sizeof(text6),"Passed (%d)",PlayerData[playerid][MatsLic]);
	}
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Licenses __________________|");
	format(string, sizeof(string), "** Drivers License: %s.", text1);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Flying License: %s.", text2);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Sailing License: %s.", text3);
	SendClientMessage(playerid, COLOR_GREY, string);
	/*format(string, sizeof(string), "** Fishing License: %s.", text4);
	SendClientMessage(playerid, COLOR_GREY, string);*/
	format(string, sizeof(string), "** Weapon License: %s.", text5);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Materials License: %s.", text6);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
	return 1;
}

YCMD:buylicense(playerid, params[], help)
{
    new string[310];
	if(!PlayerToPoint(7,playerid,36.1739,21.2692,973.3081)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in spawn building");
	string = "Driving License ($50)\nFlying License ($300)\nSailing License ($150)\nWeapon License ($250)\nMaterials License ($200)";
	ShowPlayerDialog(playerid,DIALOG_BLICENSE,DIALOG_STYLE_LIST,"License purchase",string,"Select","");
	return 1;
}

YCMD:infos(playerid, params[], help)
{
	if(!PlayerToPoint(7,playerid,22.7703,35.3976,973.3081)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in spawn building");
	new string[512];
	format(string,sizeof(string),"Total Accounts: {FFFFFF}%d",ServerInfo[users]);
	format(string,sizeof(string),"%s\n{A9C4E4}Newest Account: {FFFFFF}%s",string,ServerInfo[newestacc]);
	format(string,sizeof(string),"%s\n{A9C4E4}Banned Accounts: {FFFFFF}%d",string,ServerInfo[banned]);
	format(string,sizeof(string),"%s\n{A9C4E4}Record: {FFFFFF}%d {A9C4E4}({FFFFFF}%s{A9C4E4})",string,ServerInfo[recordnumber],ServerInfo[recorddate]);
	format(string,sizeof(string),"%s\n{A9C4E4}Tax: {FFFFFF}$%d",string,ServerInfo[tax]);
	format(string,sizeof(string),"%s\n{A9C4E4}Objects: {FFFFFF}%d",string,CountDynamicObjects());
	format(string,sizeof(string),"%s\n{A9C4E4}Vehicles: {FFFFFF}%d",string,vehss);
	format(string,sizeof(string),"%s\n{A9C4E4}Factions: {FFFFFF}16",string);
	format(string,sizeof(string),"%s\n{A9C4E4}Scripter: {FFFFFF}Maurice {A9C4E4}| SA-MP {FFFFFF}0.3z",string);
	format(string,sizeof(string),"%s\n{A9C4EF}Owner: {FFFFFF}Boby.Negrean",string);
	ShowPlayerDialog(playerid,DIALOG_UNUSED,DIALOG_STYLE_MSGBOX,"General Informations",string,"Close","");
	return 1;
}

YCMD:faq(playerid, params[], help)
{
	new string[310];
	if(!PlayerToPoint(7,playerid,34.3682,21.3059,973.3081)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in spawn building");
	string = "How can I earn money?\nHow to level up?\nHow do I earn respect points?\nWhere is the dealership?\n";
	strcat(string, "How to get a job?\nWhat is the best job?\nHow can I buy a car?\nHow to light the headlights?\n");
	strcat(string, "How to get a license?\nHow to find someone number?\nHow to change my skin?\nHow to join a faction?\nHow can I be admin?");
	ShowPlayerDialog(playerid,DIALOG_FAQ,DIALOG_STYLE_LIST,"Frequently asked questions",string,"Select","");
	return 1;
}

YCMD:fakechatt(playerid, params[], help)
{
	new id, chat, message[128], string[128];
    if(sscanf(params, "uis[128]", id, chat, message)) return SendUsage(playerid,"/fakechat <Name/Playerid> <chat> <message>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new faction = PlayerData[id][Member] + PlayerData[id][Leader];
	switch(chat)
	{
	    case 0:
	    {//Normal
	        format(string, sizeof(string), "%s says: %s", PlayerData[id][Name], message);
			ProxDetector(20.0, id, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    }
	    case 1:
	    {//f
	        format(string, sizeof(string), "** %s %s: (( %s )) **", GetRank(id), PlayerData[id][Name], message);
			if(PlayerData[id][Leader] > 0)
				SendRadioMessage(faction, 0x00B8E600, string);
			else
			    //SendRadioMessage(faction, 0x33CCFFAA, string);
		        SendRadioMessage(faction, 0x1AD7F4AA, string);
	    }
	    case 2:
	    {//a
	        format(string, sizeof(string), "%d %s: %s", PlayerData[id][Admin], PlayerData[id][Name], message);
			SendAdminMessage(COLOR_ADMCHAT, string);
	    }
	}
	return 1;
}

YCMD:tutorial(playerid, params[], help)
{
	new stringt[1024];
	SetPlayerPos(playerid,-1053.1190,1123.6959,0.4282);
	SetPlayerCameraPos(playerid,-1055.6941,1122.0156,2.4371);
	SetPlayerCameraLookAt(playerid,-1261.4883,960.6235,105.7553);
	stringt = "Salutari! Intrucat sunteti nou pe acest server, va vom prezenta cateva detalii si informatii\n";
	strcat(stringt, "referitoare la acesta pentru a stii ce e bine  si ce trebuie sa evitati sa faceti. Va rugam de\n");
	strcat(stringt, "asemenea sa va concentrati asupra tutorialului ce urmeaza sa se desfasoare pentru a evita\n");
	strcat(stringt, "viitoarele intrebari suplimentare.");
	ShowPlayerDialog(playerid, DIALOG_TUTORIAL + 1, DIALOG_STYLE_MSGBOX, "Tutorial - Inceputul", stringt, "Next", "");
}

LoopingAnim(playerid,animlib[],animname[], Float:Speeda, looping, lockx, locky, lockz, lp)
{
    if(PlayerData[playerid][PlayerCuffed] > 0)
    {
    	SendClientMessage(playerid, COLOR_GREY, "You cannot do this right now!");
    	return 1;
    }
    ApplyAnimation(playerid, animlib, animname, Speeda, looping, lockx, locky, lockz, lp);
    return 1;
}
OnePlayAnim(playerid,animlib[],animname[], Float:Speeda, looping, lockx, locky, lockz, lp)
{
    if(PlayerData[playerid][PlayerCuffed] > 0)
    {
	    SendClientMessage(playerid, COLOR_GREY, "You cannot do this right now!");
	}
	else
	{
		ApplyAnimation(playerid, animlib, animname, Speeda, looping, lockx, locky, lockz, lp);
    }
}
YCMD:stopani(playerid, params[], help)
{
    if(PlayerTied[playerid] > 0) return 1;
	if(GetPlayerVehicleID(playerid)) return 1;
	if(PlayerStoned[playerid] >= 6) return 1;
	if(JoinedCS[playerid] > 0)
	{
	    new reason[25], string[128];
	    format(reason,sizeof(reason),"Bug Abuse (CS)");
	    KickLog(playerid,1024,reason);

		format(string, sizeof(string), "AdmCmd: %s was kicked by AdmBot, reason: %s", PlayerData[playerid][Name], reason);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		
		KickEx(playerid);
	}
	ClearAnimations(playerid);
    return 1;
}
YCMD:animlist(playerid,params[],help)
{
	SendClientMessage(playerid,COLOR_WHITE,"/fall /injured /push /handsup /bomb /drunk /getarrested /laugh /chairsit2");
	SendClientMessage(playerid,COLOR_WHITE,"/medic /robman /taichi /lookout /kiss /cellin /cellout /crossarms /lay");
	SendClientMessage(playerid,COLOR_WHITE,"/deal /crack /smokem /smokef /groundsit /chat /dance /fucku /strip /hide");
	SendClientMessage(playerid,COLOR_WHITE,"/rollfall /bat /lifejump /lay2 /chant /aim /lowthrow /highthrow /lean");
	SendClientMessage(playerid,COLOR_WHITE,"/gsign1 /gsign2 /gsign3 /gsign4 /gsign5 /gift /sit /vomit /chairsit");
	SendClientMessage(playerid,COLOR_WHITE,"/slapass /slapped /celebrate /animsex /bj /wave /eatsit /reload");
	SendClientMessage(playerid,COLOR_WHITE,"Type /animlist2 for more actions.");
	SendClientMessage(playerid,COLOR_LIGHTRED,"To stop the animation /stopani");
	return 1;
}

YCMD:animlist2(playerid,params[],help)
{
	SendClientMessage(playerid,COLOR_WHITE,"/follow /greet /stand /injured2 /piss");
	SendClientMessage(playerid,COLOR_WHITE,"/hitch /bitchslap /cpr /rap /wankoff");
	SendClientMessage(playerid,COLOR_WHITE,"/dance /fsit /msit /relax /win /win2");
	SendClientMessage(playerid,COLOR_WHITE,"/yes /deal2 /thankyou /invite1 /invite2");
	SendClientMessage(playerid,COLOR_WHITE,"/celebrate2 /scratch /gangwalk /shake");
	SendClientMessage(playerid,COLOR_WHITE,"/crossarms2 /crossarms3");
	SendClientMessage(playerid,COLOR_LIGHTRED,"To stop the animation /stopani");
	return 1;
}
YCMD:smoke(playerid,params[],help)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}
YCMD:lowthrow(playerid,params[],help)
{
	OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	return 1;
}
//Groundkick
YCMD:highthrow(playerid,params[],help)
{
	OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
	return 1;
}
YCMD:aim(playerid,params[],help)
{
	LoopingAnim(playerid,"ped","ARRESTgun",4.0,0,1,1,1,-1);//Gunaim
	return 1;
}
YCMD:chant(playerid,params[],help)
{
	LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
	return 1;
}
YCMD:lay2(playerid,params[],help)
{
	LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
	return 1;
}
YCMD:lifejump(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
	return 1;
}
YCMD:bat(playerid,params[],help)
{
	LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
	return 1;
}
YCMD:rollfall(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	return 1;
}
YCMD:reload(playerid,params[],help)
{
	OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
	return 1;
}
YCMD:groundsit(playerid,params[],help)
{
	LoopingAnim(playerid,"BEACH","ParkSit_M_loop",4.0,1,0,0,0,0);//Sit
	return 1;
}
YCMD:medic(playerid,params[],help)
{
	OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	return 1;
}
YCMD:push(playerid,params[],help)
{
	OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;
}
YCMD:handsup(playerid,params[],help)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}
YCMD:fall(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
	return 1;
}
YCMD:dance(playerid,params[],help)
{
	new dancestyle;
	if(sscanf(params, "i", dancestyle)) return SendUsage(playerid,"/dancestyle <1-3>");
	if(dancestyle==1)
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	}
	else if(dancestyle==2)
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	}
	else if(dancestyle==3)
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	}
	return 1;
}
YCMD:rap(playerid,params[],help)
{
	new rapstyle;
	if(sscanf(params, "i", rapstyle)) return SendUsage(playerid,"/rap <1-3>");
	if(rapstyle==1)
	{
		LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
	}
	else if(rapstyle==2)
	{
		LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
	}
	else if(rapstyle==3)
	{
		LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
	}
	return 1;
}
YCMD:wankoff(playerid,params[],help)
{
	new wankstyle;
	if(sscanf(params, "i", wankstyle)) return SendUsage(playerid,"/wankoff <1-3>");
	if(wankstyle==1)
	{
		LoopingAnim(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
	}
	else if(wankstyle==2)
	{
		LoopingAnim(playerid,"PAULNMAC","wank_loop",4.0,1,1,1,1,0);
	}
	else if(wankstyle==3)
	{
		LoopingAnim(playerid,"PAULNMAC","wank_out",4.0,1,1,1,1,0);
	}
	return 1;
}
YCMD:strip(playerid,params[],help)
{
	new stripstyle;
	if(sscanf(params, "i", stripstyle)) return SendUsage(playerid,"/stripstyle <1-7>");
	if(stripstyle==1)
	{
		LoopingAnim(playerid,"STRIP","strip_A",4.0,1,1,1,1,0);
	}
	else if(stripstyle==2)
	{
		LoopingAnim(playerid,"STRIP","strip_B",4.0,1,1,1,1,0);
	}
	else if(stripstyle==3)
	{
		LoopingAnim(playerid,"STRIP","strip_C",4.0,1,1,1,1,0);
	}
	else if(stripstyle==4)
	{
		LoopingAnim(playerid,"STRIP","strip_D",4.0,1,1,1,1,0);
	}
	else if(stripstyle==5)
	{
		LoopingAnim(playerid,"STRIP","strip_E",4.0,1,1,1,1,0);
	}
	else if(stripstyle==6)
	{
		LoopingAnim(playerid,"STRIP","strip_F",4.0,1,1,1,1,0);
	}
	else if(stripstyle==7)
	{
		LoopingAnim(playerid,"STRIP","strip_G",4.0,1,1,1,1,0);
	}
	return 1;
}
YCMD:animsex(playerid,params[],help)
{
	new sexstyle;
	if(sscanf(params, "i", sexstyle)) return SendUsage(playerid,"/animsex <1-8>");
	if(sexstyle==1)
	{
		LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.0,1,1,1,1,0);
	}
	else if(sexstyle==2)
	{
		LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.0,1,1,1,1,0);
	}
	else if(sexstyle==3)
	{
		LoopingAnim(playerid,"SNM","SPANKINGW",4.0,1,1,1,1,0);
	}
	else if(sexstyle==4)
	{
		LoopingAnim(playerid,"SNM","SPANKINGP",4.0,1,1,1,1,0);
	}
	else if(sexstyle==5)
	{
		LoopingAnim(playerid,"SNM","SPANKEDW",4.0,1,1,1,1,0);
	}
	else if(sexstyle==6)
	{
		LoopingAnim(playerid,"SNM","SPANKEDP",4.0,1,1,1,1,0);
	}
	else if(sexstyle==7)
	{
		LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.0,1,1,1,1,0);
	}
	else if(sexstyle==8)
	{
		LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.0,1,1,1,1,0);
	}
	return 1;
}
YCMD:bj(playerid,params[],help)
{
	new bjstyle;
	if(sscanf(params, "i", bjstyle)) return SendUsage(playerid,"/dancestyle <1-12>");
	if(bjstyle==1)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.0,1,1,1,1,0);
	}
	else if(bjstyle==2)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.0,1,1,1,1,0);
	}
	else if(bjstyle==3)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.0,1,1,1,1,0);
	}
	else if(bjstyle==4)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.0,1,1,1,1,0);
	}
	else if(bjstyle==5)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.0,1,1,1,1,0);
	}
	else if(bjstyle==6)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.0,1,1,1,1,0);
	}
	else if(bjstyle==7)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.0,1,1,1,1,0);
	}
	else if(bjstyle==8)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.0,1,1,1,1,0);
	}
	else if(bjstyle==9)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.0,1,1,1,1,0);
	}
	else if(bjstyle==10)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.0,1,1,1,1,0);
	}
	else if(bjstyle==11)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.0,1,1,1,1,0);
	}
	else if(bjstyle==12)
	{
		LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.0,1,1,1,1,0);
	}
	return 1;
}
//CELLPHONEI
YCMD:cellin(playerid,params[],help)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;
}
//CELLPHONEOUT
YCMD:cellout(playerid,params[],help)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}
//Leam
YCMD:lean(playerid,params[],help)
{
	LoopingAnim(playerid,"GANGS","leanIDLE",4.0,1,0,0,0,0);
	return 1;
}
//piss
YCMD:piss(playerid,params[],help)
{
	ApplyAnimation(playerid,"PAULNMAC","Piss_in",4.0,0,0,0,0,0);
	return 1;
}
//follow
YCMD:follow(playerid,params[],help)
{
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
	return 1;
}
//greet
YCMD:greet(playerid,params[],help)
{
	ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	return 1;
}
//stand
YCMD:stand(playerid,params[],help)
{
	LoopingAnim(playerid,"WUZI","Wuzi_stand_loop",4.0,1,0,0,0,0);
	return 1;
}
//injured2
YCMD:injured2(playerid,params[],help)
{
	LoopingAnim(playerid,"SWAT","gnstwall_injurd",4.0,1,0,0,0,0);
	return 1;
}
//hitch
YCMD:hitch(playerid,params[],help)
{
	LoopingAnim(playerid,"MISC","Hiker_Pose",4.0,1,0,0,0,0);
	return 1;
}
//shake
YCMD:shake(playerid,params[],help)
{
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
	return 1;
}
//bitchslap
YCMD:bitchslap(playerid,params[],help)
{
	ApplyAnimation(playerid,"MISC","bitchslap",4.0,0,0,0,0,0);
	return 1;
}
//CPR
YCMD:cpr(playerid,params[],help)
{
	LoopingAnim(playerid,"MEDIC","CPR",4.0,1,0,0,0,0);
	return 1;
}
YCMD:gsign1(playerid,params[],help)
{
	ApplyAnimation(playerid,"GHANDS","gsign1",4.0,0,1,1,1,1);
	return 1;
}
YCMD:gsign2(playerid,params[],help)
{
	ApplyAnimation(playerid,"GHANDS","gsign2",4.0,0,1,1,1,1);
	return 1;
}
YCMD:gsign3(playerid,params[],help)
{
	ApplyAnimation(playerid,"GHANDS","gsign3",4.0,0,1,1,1,1);
	return 1;
}
YCMD:gsign4(playerid,params[],help)
{
	ApplyAnimation(playerid,"GHANDS","gsign4",4.0,0,1,1,1,1);
	return 1;
}
YCMD:gsign5(playerid,params[],help)
{
	ApplyAnimation(playerid,"GHANDS","gsign5",4.0,0,1,1,1,1);
	return 1;
}
//Gift
YCMD:gift(playerid,params[],help)
{
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}
//sit
YCMD:chairsit(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","SEAT_idle",4.0,1,0,0,0,0);
	return 1;
}
//injured
YCMD:injured(playerid,params[],help)
{
	LoopingAnim(playerid,"SWEET","Sweet_injuredloop",4.0,1,0,0,0,0);
	return 1;
}
//slapass
YCMD:slapped(playerid,params[],help)
{
	ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.0,0,0,0,0,0);
	return 1;
}
//getslapedintheass
YCMD:slapass(playerid,params[],help)
{
	ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0);
	return 1;
}
//Drunk
YCMD:drunk(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}
//gangwalk
YCMD:gangwalk(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
	return 1;
}
//gangwalk2
YCMD:gangwalk2(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
	return 1;
}
//EatSit
YCMD:eatsit(playerid,params[],help)
{
	LoopingAnim(playerid,"FOOD","FF_Sit_Loop",4.0,1,0,0,0,0);
	return 1;
}
//Celebrate
YCMD:celebrate(playerid,params[],help)
{
	LoopingAnim(playerid,"benchpress","gym_bp_celebrate",4.0,1,0,0,0,0);
	return 1;
}
//Win1
YCMD:win(playerid,params[],help)
{
	LoopingAnim(playerid,"CASINO","cards_win",4.0,1,0,0,0,0);
	return 1;
}
//Win2
YCMD:win2(playerid,params[],help)
{
	LoopingAnim(playerid,"CASINO","Roulette_win",4.0,1,0,0,0,0);
	return 1;
}
//YES!!
YCMD:yes(playerid,params[],help)
{
	LoopingAnim(playerid,"CLOTHES","CLO_Buy",4.0,1,0,0,0,0);
	return 1;
}
//Dealer2
YCMD:deal2(playerid,params[],help)
{
	LoopingAnim(playerid,"DEALER","DRUGS_BUY",4.0,1,0,0,0,0);
	return 1;
}
//Thank
YCMD:thankyou(playerid,params[],help)
{
	LoopingAnim(playerid,"FOOD","SHP_Thank",4.0,1,0,0,0,0);
	return 1;
}
//Invite1
YCMD:invite1(playerid,params[],help)
{
	ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
	return 1;
}
//Invite2
YCMD:invite2(playerid,params[],help)
{
	ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
	return 1;
}
//Celebrate2
YCMD:celebrate2(playerid,params[],help)
{
	LoopingAnim(playerid,"GYMNASIUM","gym_tread_celebrate",4.0,1,0,0,0,0);
	return 1;
}
//Sit
YCMD:sit(playerid,params[],help)
{
	LoopingAnim(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.0,1,0,0,0,0);
	return 1;
}
//Scratch
YCMD:scratch(playerid,params[],help)
{
	LoopingAnim(playerid,"MISC","Scratchballs_01",4.0,1,0,0,0,0);
	return 1;
}
//PlaceaBomb
YCMD:bomb(playerid,params[],help)
{
	ClearAnimations(playerid);
	ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);//PlaceBomb
	return 1;
}
//PoliceArrest
YCMD:getarrested(playerid,params[],help)
{
	LoopingAnim(playerid,"ped","ARRESTgun",4.0,0,1,1,1,-1);//GunArrest
	return 1;
}
//Laugh
YCMD:laugh(playerid,params[],help)
{
	ApplyAnimation(playerid,"RAPPING","Laugh_01",4.0,0,0,0,0,0);//Laugh
	return 1;
}
//RobLookout
YCMD:lookout(playerid,params[],help)
{
	ApplyAnimation(playerid,"SHOP","ROB_Shifty",4.0,0,0,0,0,0);//RobLookout
	return 1;
}
//RobThreat
YCMD:robman(playerid,params[],help)
{
	LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",4.0,1,0,0,0,0);//Rob
	return 1;
}
//Armscrossed
YCMD:crossarms(playerid,params[],help)
{
	LoopingAnim(playerid,"COP_AMBIENT","Coplook_loop",4.0,0,1,1,1,-1);//Armscrossed
	return 1;
}
//Armscrossed2
YCMD:crossarms2(playerid,params[],help)
{
	LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,0,1,1,1,-1);//Armscrossed2
	return 1;
}
//Armscrossed3
YCMD:crossarms3(playerid,params[],help)
{
	LoopingAnim(playerid,"DEALER","DEALER_IDLE_01",4.0,0,1,1,1,-1);//Armscrossed3
	return 1;
}
//LayDown
YCMD:lay(playerid,params[],help)
{
	LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);//Laydown
	return 1;
}
//TakeCover
YCMD:hide(playerid,params[],help)
{
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER&&GetPlayerState(playerid)!=PLAYER_STATE_PASSENGER)
	{
		LoopingAnim(playerid,"ped","cower",3.0,1,0,0,0,0);//TakingCover
		return 1;
	}
	return 1;
}
//Vomit
YCMD:vomit(playerid,params[],help)
{
	ApplyAnimation(playerid,"FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);//VomitBAH!
	return 1;
}
//EatBurger
YCMD:eat(playerid,params[],help)
{
	ApplyAnimation(playerid,"FOOD","EAT_Burger",3.0,0,0,0,0,0);//EatBurger
	return 1;
}
//Wave
YCMD:wave(playerid,params[],help)
{
	LoopingAnim(playerid,"ON_LOOKERS","wave_loop",4.0,1,0,0,0,0);//Wave
	return 1;
}
//Dealer
YCMD:deal(playerid,params[],help)
{
	LoopingAnim(playerid,"DEALER","DEALER_DEAL",4.0,1,0,0,0,0);//DealDrugs
	return 1;
}
//CrackDieing
YCMD:crack(playerid,params[],help)
{
	LoopingAnim(playerid,"CRACK","crckdeth2",4.0,1,0,0,0,0);//DieingofCrack
	return 1;
}
//MaleSmoking
YCMD:smokem(playerid,params[],help)
{
	LoopingAnim(playerid,"SMOKING","M_smklean_loop",4.0,1,0,0,0,0);//Smoke
	return 1;
}
//FemaleSmoking
YCMD:smokef(playerid,params[],help)
{
	LoopingAnim(playerid,"SMOKING","F_smklean_loop",4.0,1,0,0,0,0);//FemaleSmoking
	return 1;
}
//MaleSit
YCMD:msit(playerid,params[],help)
{
	LoopingAnim(playerid,"BEACH","ParkSit_M_loop",4.0,1,0,0,0,0);//MaleSit
	return 1;
}
//FemaleSit
YCMD:fsit(playerid,params[],help)
{
	LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);//FemaleSit
	return 1;
}
//IdleChat
YCMD:chat(playerid,params[],help)
{
	LoopingAnim(playerid,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
	return 1;
}
//Fucku
YCMD:fucku(playerid,params[],help)
{
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}
//TaiChi
YCMD:taichi(playerid,params[],help)
{
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;
}
//ChairSit
YCMD:chairsit2(playerid,params[],help)
{
	LoopingAnim(playerid,"BAR","dnk_stndF_loop",4.0,1,0,0,0,0);
	return 1;
}
//Kiss
YCMD:kiss(playerid,params[],help)
{
	ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
	return 1;
}
//Relax
YCMD:relax(playerid,params[],help)
{
	LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
	return 1;
}

function IsAtATM(playerid)
{
    if(PlayerToPoint(3.0,playerid,1748.6030,-1862.7672,13.5759) || PlayerToPoint(3.0,playerid,1816.1312,-1557.5348,13.5060))
	{
		return 1;
	}
	else if (PlayerToPoint(3.0,playerid,1083.2356,-1817.2999,13.6117) || PlayerToPoint(3.0,playerid,603.1664,-1247.7566,18.4132))
	{
	    return 1;
	}
	else if (PlayerToPoint(3.0,playerid,1460.1993,-1791.9718,13.5468))
	{
	    return 1;
	}
	return 0;
}

function IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,20.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,161.2281,-94.1747,1001.8047) || PlayerToPoint(50.0,playerid,161.2811,-84.2215,1001.8047))
		{//Zip & Victim
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,153.3538,-85.0267,1001.8047) || PlayerToPoint(50.0,playerid,167.6036,-82.2797,1001.8047))
		{//Zip & Victim
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,181.5176,-88.2608,1002.0234) || PlayerToPoint(50.0,playerid,161.1186,-87.9201,1001.8047))
		{//Zip & Victim
		    return 1;
		}
	}
	return 0;
}

YCMD:warstats(playerid, params[], help)
{
	new string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	for(new i = 1; i < sizeof(Turfs); i++)
	{
		if((WarInfo[i][wFaction] == faction) || (WarInfo[i][wAttacker] == faction))
		{
			format(string, sizeof(string), "Turf %d, Time remaining: %i mins",i,WarInfo[i][wTime]);
		    SendClientMessage(playerid, TEAM_AZTECAS_COLOR,string);
			new score = WarScore[playerid][i] / 10;
			format(string,sizeof(string),"Your score is: %i (%i deaths)", score, WarDeaths[playerid][i]);
			SendClientMessage(playerid, TEAM_AZTECAS_COLOR,string);
		}
	}
	return 1;
}

YCMD:clothes(playerid, params[], help)
{
	new fation = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(fation == 0) SendClientMessage(playerid, COLOR_WHITE, "Press F4 and kill yourself");
	else
	{
	    if(!IsAtClothShop(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a cloth shop.");
	    new rand = random(sizeof(InviteSpawns));
	    SetPlayerPos(playerid, InviteSpawns[rand][0], InviteSpawns[rand][1], InviteSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, InviteSpawns[rand][3]);
		SetPlayerCameraPos(playerid,InviteSpawns[rand][0] + 3, InviteSpawns[rand][1], InviteSpawns[rand][2]);
		SetPlayerCameraLookAt(playerid,InviteSpawns[rand][0], InviteSpawns[rand][1], InviteSpawns[rand][2]);
		SetPlayerInterior(playerid,0);
		TogglePlayerControllable(playerid, 0);

		PlayerData[playerid][CSkin] = 0;
		PlayerData[playerid][Char] = factionskins[fation][PlayerData[playerid][CSkin]];
		SetPlayerSkin(playerid,factionskins[fation][PlayerData[playerid][CSkin]]);
		ShowPlayerDialog(playerid, DIALOG_SKINS, DIALOG_STYLE_MSGBOX, "Clothes", "Use {FFFFFF}Next {A9C4E4}to select the char you want to use.\nWhen you are done press {FFFFFF}Done{A9C4E4}.", "Next", "Done");
	}
	return 1;
}
YCMD:factions(playerid, params[], help)
{
	SendClientMessage(playerid,COLOR_WHITE," The server has the following factions: ");
	SendClientMessage(playerid,COLOR_WHITE,"--------------------------------------------");
	SendClientMessage(playerid,COLOR_DBLUE,"1. Police Department");
	SendClientMessage(playerid,0x40863CFF,"2. Grove St. 125");
	SendClientMessage(playerid,0xD900D9FF,"3. Grape Street Watts");
	SendClientMessage(playerid,COLOR_LIGHTBLUE,"4. Varrio Nuevo Estrada");
	SendClientMessage(playerid,0x98DD17FF,"5. SA Government");
	SendClientMessage(playerid,COLOR_PURPLE,"6. News Reporter");
	SendClientMessage(playerid,COLOR_LIGHTRED,"7. Emergency Department");
	SendClientMessage(playerid,COLOR_WHITE,"---------------- 7 factions ----------------");
	return 1;
}
YCMD:carhelp(playerid,params[], help)
{
	new stringh[1000], titleh[32];
	titleh = "Help - Car";
	stringh = "{FFFFFF}/mycars {A9C4E4}- Shows general stats about your car.\n";
	strcat(stringh, "{FFFFFF}/lock {A9C4E4}- Lock/Unlock your car.\n");
	strcat(stringh, "{FFFFFF}/carcolor {A9C4E4}- Change your vehicle's color.\n");
	strcat(stringh, "{FFFFFF}/towcar {A9C4E4}- Respawns your car.\n");
	strcat(stringh, "{FFFFFF}/park {A9C4E4}- Despawn your car and save the position.\n");
	strcat(stringh, "{FFFFFF}/spawncar(/sc) {A9C4E4}- Spawn your car.\n");
	strcat(stringh, "{FFFFFF}/sellvehicle {A9C4E4}- Sell your vehicle to dealership.\n");
	strcat(stringh, "{FFFFFF}/givekey {A9C4E4}- Give acces to a player to acces your vehicle.\n");
	strcat(stringh, "{FFFFFF}/changelock {A9C4E4}- Remove player's acces to your vehicle.\n");
	strcat(stringh, "{FFFFFF}/savetuning {A9C4E4}- Save tuning from your vehicle.\n");
	strcat(stringh, "{FFFFFF}/removetuning {A9C4E4}- Removes tuning from your vehicle.\n");
	strcat(stringh, "{FFFFFF}/buyvehicle {A9C4E4}- Buy a vehicle from dealership.\n");
	ShowPlayerDialog(playerid,32721, DIALOG_STYLE_MSGBOX,titleh,stringh,"Close","");
	return 1;
}
YCMD:removetuning(playerid, params[], help)
{
	new string[128], idd, keyid;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't own a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/removetuning <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	
	new car = CarInfo[idd][Spawned];
	new cur_car = GetPlayerVehicleID(playerid);
	if(car != cur_car) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your vehicle!");
	
	new query[256];
	if(CarInfo[idd][mod0] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod0]);
	}
	if(CarInfo[idd][mod1] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod1]);
	}
	if(CarInfo[idd][mod2] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod2]);
	}
	if(CarInfo[idd][mod3] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod3]);
	}
	if(CarInfo[idd][mod4] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod4]);
	}
	if(CarInfo[idd][mod5] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod5]);
	}
	if(CarInfo[idd][mod6] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod6]);
	}
	if(CarInfo[idd][mod7] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod7]);
	}
	if(CarInfo[idd][mod8] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod8]);
	}
	if(CarInfo[idd][mod9] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod9]);
	}
	if(CarInfo[idd][mod10] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod10]);
	}
	if(CarInfo[idd][mod11] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod11]);
	}
	if(CarInfo[idd][mod12] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod12]);
	}
	if(CarInfo[idd][mod13] != 0)
	{
		RemoveVehicleComponent(car,CarInfo[idd][mod13]);
	}
	CarInfo[idd][mod0] = 0;
	CarInfo[idd][mod1] = 0;
	CarInfo[idd][mod2] = 0;
	CarInfo[idd][mod3] = 0;
	CarInfo[idd][mod4] = 0;
	CarInfo[idd][mod5] = 0;
	CarInfo[idd][mod6] = 0;
	CarInfo[idd][mod7] = 0;
	CarInfo[idd][mod8] = 0;
	CarInfo[idd][mod9] = 0;
	CarInfo[idd][mod10] = 0;
	CarInfo[idd][mod11] = 0;
	CarInfo[idd][mod12] = 0;
	CarInfo[idd][mod13] = 0;
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod0='%d' WHERE id=%d",CarInfo[idd][mod0],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod1='%d' WHERE id=%d",CarInfo[idd][mod1],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod2='%d' WHERE id=%d",CarInfo[idd][mod2],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod3='%d' WHERE id=%d",CarInfo[idd][mod3],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod4='%d' WHERE id=%d",CarInfo[idd][mod4],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod5='%d' WHERE id=%d",CarInfo[idd][mod5],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod6='%d' WHERE id=%d",CarInfo[idd][mod6],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod7='%d' WHERE id=%d",CarInfo[idd][mod7],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod8='%d' WHERE id=%d",CarInfo[idd][mod8],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod9='%d' WHERE id=%d",CarInfo[idd][mod9],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod10='%d' WHERE id=%d",CarInfo[idd][mod10],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod11='%d' WHERE id=%d",CarInfo[idd][mod11],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod12='%d' WHERE id=%d",CarInfo[idd][mod12],idd);
	mysql_tquery(SQL, query, "", "");
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod13='%d' WHERE id=%d",CarInfo[idd][mod13],idd);
	mysql_tquery(SQL, query, "", "");
	format(string, sizeof(string), "* %s removes his car's tuning.", PlayerData[playerid][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
YCMD:savetuning(playerid, params[], help)
{
	new string[128], keyid, idd;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't own a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/savetuning <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");
	
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	
	new car = CarInfo[idd][Spawned];
	new cur_car = GetPlayerVehicleID(playerid);
	if(car != cur_car) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your vehicle!");
	
	new component;
	new query[256];
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 0);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod0='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod0] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 1);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod1='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod1] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 2);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod2='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod2] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 3);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod3='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod3] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 4);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod4='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod4] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 5);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod5='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod5] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 6);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod6='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod6] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 7);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod7='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod7] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 8);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod8='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod8] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 9);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod9='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod9] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 10);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod10='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod10] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 11);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod11='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod11] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 12);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod12='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod12] = component;
	component = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), 13);
	mysql_format(SQL, query, sizeof(query), "UPDATE cars SET mod13='%d' WHERE id=%d",component,idd);
	mysql_tquery(SQL, query, "", "");
	CarInfo[idd][mod13] = component;
	format(string, sizeof(string), "* %s save his tuning.", PlayerData[playerid][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
YCMD:changelock(playerid, params[], help)
{
	new keyid, idd;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't own a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/changelock <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");
	new car = CarInfo[idd][Spawned];
	ResetKey(car);
	SendClientMessage(playerid, COLOR_WHITE, "You change your car's lock.");
	return 1;
}
YCMD:throwkey(playerid, params[], help)
{
	if(Key[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a key!");
	Key[playerid] = 0;
	KeyC[playerid] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "You throwed your key");
	return 1;
}
YCMD:givekey(playerid, params[], help)
{
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't own a vehicle!");
	new id, idd, keyid, string[128];
	if(sscanf(params, "iu", keyid, id)) return SendUsage(playerid,"/givekey <1 / 2 / 3 / 4 / 5> <Name/Playerid>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");   
	if(GetDistanceBetweenPlayers(playerid,id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");		
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You cannot sell car to yourself!");
	if(Key[id] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player already have a key!");
	format(string, sizeof(string), "* You give a copy of your keys to %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Owner %s gives you a copy of his keys.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_WHITE, string);
	Key[id] = CarInfo[idd][Spawned];
	KeyC[id] = idd;
	return 1;
}
YCMD:switchkey(playerid, params[], help)
{
	if(SwitchKey[playerid] == 1)
	{
		SwitchKey[playerid] = 2;
		SendClientMessage(playerid, COLOR_WHITE, "Now you control your rent car's key.");
		return 1;
	}
	if(SwitchKey[playerid] == 2)
	{
		SwitchKey[playerid] = 3;
		SendClientMessage(playerid, COLOR_WHITE, "Now you control your friend's car.");
		return 1;
	}
	if(SwitchKey[playerid] == 3)
	{
		SwitchKey[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Now you control your car.");
		return 1;
	}
	return 1;
}
stock GetClosestVehicle(playerid)
{
    new closestdist = 999999999, closestvehicle = -1;
    new Float:x[2],Float:y[2],Float:z[2],distance;
    for(new i; i < MAX_VEHICLES; i++)
    {
        GetVehiclePos(i,x[0],y[0],z[0]);
        //if(x[0] == 0.0 && y[0] == 0.0 && z[0] == 0.0) return -1;
        GetPlayerPos(playerid,x[1],y[1],z[1]);
        distance = floatround(GetDistanceBetweenPoints(x[0],y[0],z[0],x[1],y[1],z[1]));
        if(distance < closestdist) {
            closestdist = distance;
            closestvehicle = i;
        }
    }
    return closestvehicle;
}
YCMD:lock(playerid, params[], help)
{
	new string[128];
	if(SwitchKey[playerid] == 1)
	{
		new idd, car;
		new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
		if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't own a vehicle, type /switchkey!");
		car = GetClosestVehicle(playerid);
		idd = FindSpawnID(car);
		if(idd == 0 || CarInfo[idd][Userid] != PlayerData[playerid][ID]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your aren't near your car!");
		new engine,lights,alarm,doors,bonnet,boot,objective;
		if(CarInfo[idd][cLock] == 0)
		{
			CarInfo[idd][cLock] = 1;
			GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
			format(string,sizeof(string),"~w~%s ~r~Locked",vehName[CarInfo[idd][cModel]-400]);
			GameTextForPlayer(playerid, string, 5000, 6);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], idd);
			mysql_tquery(SQL, string, "", "");
		}
		else
		{
			CarInfo[idd][cLock] = 0;
			GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
			format(string,sizeof(string),"~w~%s ~g~Unlocked",vehName[CarInfo[idd][cModel]-400]);
			GameTextForPlayer(playerid, string, 5000, 6);
			mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], idd);
			mysql_tquery(SQL, string, "", "");
		}
	}
	else if(SwitchKey[playerid] == 2)
	{//Rent Car

	}
	else if(SwitchKey[playerid] == 3)
	{//Givekey
		if(Key[playerid] >= 1)
		{
			new car = Key[playerid];
			new idd = KeyC[playerid];
			if(!IsPlayerNearVehicle(playerid,car,2)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your aren't near your car!");
			new engine,lights,alarm,doors,bonnet,boot,objective;
			if(CarInfo[idd][cLock] == 0)
			{
				CarInfo[idd][cLock] = 1;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
				format(string,sizeof(string),"~w~%s ~r~Locked",vehName[CarInfo[idd][cModel]-400]);
				GameTextForPlayer(playerid, string, 5000, 6);
				mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], idd);
				mysql_tquery(SQL, string, "", "");
			}
			else
			{
				CarInfo[idd][cLock] = 0;
				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
				format(string,sizeof(string),"~w~%s ~g~Unlocked",vehName[CarInfo[idd][cModel]-400]);
				GameTextForPlayer(playerid, string, 5000, 6);
				mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], idd);
				mysql_tquery(SQL, string, "", "");
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't own a key from a vehicle, type /switchkey!");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please type /switchkey!");
	return 1;
}

YCMD:sellcarto(playerid, params[], help)
{
	new id,price,string[128], keyid, idd;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	new car = GetPlayerVehicleID(playerid);
	
	if(sscanf(params, "iui", keyid, id,price)) return SendUsage(playerid,"/sellcarto <1 / 2 / 3 / 4 / 5 > <Name/Playerid> <price>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] != car) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your vehicle!");
	if(CarInfo[idd][cSpecial] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Acces denined!");
	
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You cannot sell car to yourself!");
	if(FindCSlot(id) == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player have 5 vehicles!");
	if(PlayerData[id][Cash] < price) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player doesn't have enough money!");
	format(string, sizeof(string), "* You offerd %s to buy your car for $%s .", PlayerData[id][Name], Decimal(price));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Car Owner %s offered you to buy his/her car for $%s (type /accept car %d) to buy.", PlayerData[playerid][Name], Decimal(price), playerid);
	SendClientMessage(id, COLOR_WHITE, string);
	OwnableCarOffered[id] = playerid;
	OwnableCarOffer[playerid] = id;
	OwnableCarID[id] = idd;
	OwnableCarSlot[id] = keyid;
	OwnableCarPrice[id] = price;
	return 1;
}

YCMD:mycars(playerid, params[], help)
{
	new string[128];
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(PlayerData[playerid][CarKey1] != 0)
	{
		new idd = PlayerData[playerid][CarKey1];
		new locktext[6], spawntext[6];
		if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
		else {locktext = "No";}
		if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
		else {spawntext = "No";}
		format(string, sizeof(string), "Slot 1 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s]", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext);
		SendClientMessage(playerid, COLOR_GRAD4,string);
	}
	if(PlayerData[playerid][CarKey2] != 0)
	{
		new idd = PlayerData[playerid][CarKey2];
		new locktext[6], spawntext[6];
		if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
		else {locktext = "No";}
		if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
		else {spawntext = "No";}
		format(string, sizeof(string), "Slot 2 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s]", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext);
		SendClientMessage(playerid, COLOR_GRAD4,string);
	}
	if(PlayerData[playerid][CarKey3] != 0)
	{
		new idd = PlayerData[playerid][CarKey3];
		new locktext[6], spawntext[6];
		if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
		else {locktext = "No";}
		if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
		else {spawntext = "No";}
		format(string, sizeof(string), "Slot 3 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s]", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext);
		SendClientMessage(playerid, COLOR_GRAD4,string);
	}
	if(PlayerData[playerid][CarKey4] != 0)
	{
		new idd = PlayerData[playerid][CarKey4];
		new locktext[6], spawntext[6];
		if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
		else {locktext = "No";}
		if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
		else {spawntext = "No";}
		format(string, sizeof(string), "Slot 4 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s]", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext);
		SendClientMessage(playerid, COLOR_GRAD4,string);
	}
	if(PlayerData[playerid][CarKey5] != 0)
	{
		new idd = PlayerData[playerid][CarKey5];
		new locktext[6], spawntext[6];
		if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
		else {locktext = "No";}
		if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
		else {spawntext = "No";}
		format(string, sizeof(string), "Slot 5 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s]", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext);
		SendClientMessage(playerid, COLOR_GRAD4,string);
	}
	return 1;
}
YCMD:carcolor(playerid, params[], help)
{
	new string[128],color1,color2, idd, keyid;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	if(PlayerData[playerid][Cash] < 100) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't have $100!");
	new car = GetPlayerVehicleID(playerid);
	if(sscanf(params, "iii", keyid,color1,color2)) return SendUsage(playerid,"/carcolor <1 / 2 / 3 / 4 / 5> <color1> <color2>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] != car) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your vehicle!");
	
	CarInfo[idd][cColorOne] = color1;
	CarInfo[idd][cColorTwo] = color2;
	ChangeVehicleColor(car, color1, color2);
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne = %d, ColorTwo = %d WHERE ID=%d", color1,color2, idd);
	mysql_tquery(SQL, string, "", "");
	GivePlayerCash(playerid, -100);
	GameTextForPlayer(playerid, "~w~Paint Fee~n~~r~-$100", 5000, 1);
	SBizzInfo[5][sbTill] += 100;
	mysql_format(SQL, string,sizeof(string),"UPDATE sbizz SET Till = %d WHERE ID = %d",SBizzInfo[5][sbTill],5);
	mysql_tquery(SQL, string, "", "");
	return 1;
}
YCMD:sellvehicle(playerid, params[], help)
{
	new string[128], idd, keyid;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	new car = GetPlayerVehicleID(playerid);
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/sellvehicle <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	
	if(CarInfo[idd][Spawned] != car) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your vehicle!");
	if(CarInfo[idd][cSpecial] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Acces denined!");
	if(!PlayerToPoint(3.0,playerid,2131.7759,-1150.5256,24.1473)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near the dealership!");
	new value;
	value = floatround((CarInfo[idd][cValue] * 7) / 10);
	GivePlayerCash(playerid, value);
	format(string, sizeof(string), "You sold your %s for $%s. ",vehName[CarInfo[idd][cModel]-400],Decimal(value));
	SendClientMessage(playerid,COLOR_YELLOW2,string);
	DestroyVehicle(car);
	CarInfo[idd][cID] = -2;
	
	if(keyid == 1) mysql_format(SQL, string,sizeof(string),"DELETE FROM cars WHERE ID=%d",PlayerData[playerid][CarKey1]);
	if(keyid == 2) mysql_format(SQL, string,sizeof(string),"DELETE FROM cars WHERE ID=%d",PlayerData[playerid][CarKey2]);
	if(keyid == 3) mysql_format(SQL, string,sizeof(string),"DELETE FROM cars WHERE ID=%d",PlayerData[playerid][CarKey3]);
	if(keyid == 4) mysql_format(SQL, string,sizeof(string),"DELETE FROM cars WHERE ID=%d",PlayerData[playerid][CarKey4]);
	if(keyid == 5) mysql_format(SQL, string,sizeof(string),"DELETE FROM cars WHERE ID=%d",PlayerData[playerid][CarKey5]);
	mysql_tquery(SQL, string, "", "");
	
	if(keyid == 1) { PlayerData[playerid][CarKey1] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey1 = %d WHERE ID = %d",PlayerData[playerid][CarKey1],PlayerData[playerid][ID]); }
	if(keyid == 2) { PlayerData[playerid][CarKey2] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey2 = %d WHERE ID = %d",PlayerData[playerid][CarKey2],PlayerData[playerid][ID]); }
	if(keyid == 3) { PlayerData[playerid][CarKey3] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey3 = %d WHERE ID = %d",PlayerData[playerid][CarKey3],PlayerData[playerid][ID]); }
	if(keyid == 4) { PlayerData[playerid][CarKey4] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey4 = %d WHERE ID = %d",PlayerData[playerid][CarKey4],PlayerData[playerid][ID]); }
	if(keyid == 5) { PlayerData[playerid][CarKey5] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey5 = %d WHERE ID = %d",PlayerData[playerid][CarKey5],PlayerData[playerid][ID]); }
	mysql_tquery(SQL, string, "", "");
	
	return 1;
}
YCMD:spawncar(playerid, params[], help)
{
	new string[128], keyid, idd;
	if(SpawnedCars(playerid) >= 1 && PlayerData[playerid][Premium] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please park your car!");
	if(SpawnedCars(playerid) >= 2 && PlayerData[playerid][Premium] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please park one of your car!");
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/spawncar <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car is already spawned!");
	CarInfo[idd][Spawned] = CreateVehicle(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],CarInfo[idd][cColorOne],CarInfo[idd][cColorTwo],-1);

	SetTunning(idd);
	
	SetPlayerCheckpoint(playerid,CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],5.0);
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Spawned='%d' WHERE ID=%d", CarInfo[idd][Spawned], idd);
	mysql_tquery(SQL, string, "", "");
	return 1;
}
YCMD:findcar(playerid, params[], help)
{
	new idd, keyid;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/findcar <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");
	new Float:vehx, Float:vehy, Float:vehz;
 	GetVehiclePos(CarInfo[idd][Spawned], vehx, vehy, vehz);
 	SetPlayerCheckpoint(playerid, vehx, vehy, vehz, 3.0);
	return 1;
}
YCMD:park(playerid, params[], help)
{
	new string[128], idd, keyid;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	new car = GetPlayerVehicleID(playerid);
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/park <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] != car) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in that vehicle!");
	new Float:x, Float:y, Float:z, Float:a;
	GetVehiclePos(car, x, y, z);
	GetVehicleZAngle(car, a);
	CarInfo[idd][cLocationx] = x;
	CarInfo[idd][cLocationy] = y;
	CarInfo[idd][cLocationz] = z;
	CarInfo[idd][cAngle] = a;
	CarInfo[idd][Spawned] = 0;
	ResetKey(car);
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationx='%f' WHERE ID=%d", CarInfo[idd][cLocationx], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationy='%f' WHERE ID=%d", CarInfo[idd][cLocationy], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationz='%f' WHERE ID=%d", CarInfo[idd][cLocationz], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Angle='%f' WHERE ID=%d", CarInfo[idd][cAngle], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Spawned='%d' WHERE ID=%d", CarInfo[idd][Spawned], idd);
	mysql_tquery(SQL, string, "", "");
	DestroyVehicle(car);
	return 1;
}
YCMD:plate(playerid, params[], help)
{
	new string[128], plate[32], keyid, idd;
	if(!PlayerToPoint(7,playerid,36.1739,21.2692,973.3081)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in spawn building");
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if (sscanf(params, "is[14]", keyid, plate)) return SendUsage(playerid,"/plate <1 / 2 / 3 / 4 / 5> <vehicle plate>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");
	if(PlayerData[playerid][Cash] < 500) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't have $500!");
	if(IsVehicleOccupied(CarInfo[idd][Spawned])) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Vehicle is ocuppied!");

	
    SetVehicleNumberPlate(CarInfo[idd][Spawned], plate);
    
	GivePlayerCash(playerid, -500);
	SBizzInfo[5][sbTill] += 500;

    format(string, sizeof(string), "%s", plate);
	strmid(CarInfo[idd][cLicense], string, 0, strlen(string), 255);

    mysql_format(SQL, string, sizeof(string), "UPDATE cars SET License='%s' WHERE ID=%d", plate, idd);
	mysql_tquery(SQL, string, "", "");
	
	mysql_format(SQL, string,sizeof(string),"UPDATE sbizz SET Till = %d WHERE ID = %d",SBizzInfo[5][sbTill],5);
	mysql_tquery(SQL, string, "", "");
	
	format(string,sizeof(string),"{FFFF00}Plate: {FFFFFF}Your new plate is: %s.", plate);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
YCMD:towcar(playerid, params[], help)
{
	new string[128], keyid, idd;
	new valid = PlayerData[playerid][CarKey1] + PlayerData[playerid][CarKey2] + PlayerData[playerid][CarKey3] + PlayerData[playerid][CarKey4] + PlayerData[playerid][CarKey5];
	if(valid == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a vehicle!");
	if(sscanf(params, "i", keyid)) return SendUsage(playerid,"/towcar <1 / 2 / 3 / 4 / 5>");
	if(keyid > 5 || keyid < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid key number.");
	if(keyid == 1) idd = PlayerData[playerid][CarKey1];
	if(keyid == 2) idd = PlayerData[playerid][CarKey2];
	if(keyid == 3) idd = PlayerData[playerid][CarKey3];
	if(keyid == 4) idd = PlayerData[playerid][CarKey4];
	if(keyid == 5) idd = PlayerData[playerid][CarKey5];
	if(idd == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't won a vehicle on this slot!");
	if(CarInfo[idd][Spawned] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car isn't spawned!");
	if(PlayerData[playerid][Cash] < 500) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your don't have $500!");
	if(IsVehicleOccupied(CarInfo[idd][Spawned])) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Vehicle is ocuppied!");

	SetTunning(idd);
	SetVehicleToRespawn(CarInfo[idd][Spawned]);
	
	GivePlayerCash(playerid, -500);
	SBizzInfo[5][sbTill] += 500;
	
	mysql_format(SQL, string,sizeof(string),"UPDATE sbizz SET Till = %d WHERE ID = %d",SBizzInfo[5][sbTill],5);
	mysql_tquery(SQL, string, "", "");
	return 1;
}
/*

*/
function FindCSlot(playerid)
{
	if(PlayerData[playerid][CarKey1] == 0)
		return 1;
	if(PlayerData[playerid][CarKey2] == 0)
		return 2;
	if(PlayerData[playerid][CarKey3] == 0)
		return 3;
	if(PlayerData[playerid][CarKey4] == 0)
		return 4;
	if(PlayerData[playerid][CarKey5] == 0)
		return 5;
	return -1;
}

function SpawnedCars(playerid)
{
	new i = 0;
	if(PlayerData[playerid][CarKey1] > 0 && CarInfo[PlayerData[playerid][CarKey1]][Spawned] > 0) i += 1;
	if(PlayerData[playerid][CarKey2] > 0 && CarInfo[PlayerData[playerid][CarKey2]][Spawned] > 0) i += 1;
	if(PlayerData[playerid][CarKey3] > 0 && CarInfo[PlayerData[playerid][CarKey3]][Spawned] > 0) i += 1;
	if(PlayerData[playerid][CarKey4] > 0 && CarInfo[PlayerData[playerid][CarKey4]][Spawned] > 0) i += 1;
	if(PlayerData[playerid][CarKey5] > 0 && CarInfo[PlayerData[playerid][CarKey5]][Spawned] > 0) i += 1;
	return i;
}

YCMD:rg3(playerid, params[], help)
{
	new vehicle[15], modelid, string[128];
	if(PlayerData[playerid][Level] < 2) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You need to be level 2 or higher.");
	if(FindCSlot(playerid) == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have 5 vehicles, sell one first!");
	if(!PlayerToPoint(3.0,playerid,2119.6367,-1151.6306,24.0419)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near the dealership!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please exit the vehicle!");
	if(SpawnedCars(playerid) >= 1 && PlayerData[playerid][Premium] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please park your car!");
	if(SpawnedCars(playerid) >= 2 && PlayerData[playerid][Premium] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please park one of your car!");
	
	if(sscanf(params, "s[15]", vehicle)) return SendUsage(playerid,"/rg3 <vehicle name>");
	if(strcmp(vehicle,"bullet",true) == 0) modelid = 541;
	else if(strcmp(vehicle,"infernus",true) == 0) modelid = 411;
	else if(strcmp(vehicle,"super gt",true) == 0) modelid = 506;
	else if(strcmp(vehicle,"turismo",true) == 0) modelid = 451;
	else if(strcmp(vehicle,"sultan",true) == 0) modelid = 560;
	else if(strcmp(vehicle,"nrg",true) == 0) modelid = 522;
	else return SendClientMessage(playerid, COLOR_WHITE, "We have only: Bullet | Infernus | Super GT | Turismo | Sultan | NRG");
	
	new idd = FindEmptyID();
	if(idd == 0 || idd == pvehs)
	{
		pvehs += 1;
		idd = pvehs;
	}
	new key = FindCSlot(playerid);
	if(key == 1)
	{
		PlayerData[playerid][CarKey1] = idd;
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey1='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey1], PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	}
	if(key == 2)
	{
		PlayerData[playerid][CarKey2] = idd;
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey2='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey2], PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	}
	if(key == 3)
	{
		PlayerData[playerid][CarKey3] = idd;
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey3='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey3], PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	}
	if(key == 4)
	{
		PlayerData[playerid][CarKey4] = idd;
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey4='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey4], PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	}
	if(key == 5)
	{
		PlayerData[playerid][CarKey5] = idd;
		mysql_format(SQL, string, sizeof(string), "UPDATE users SET CarKey5='%d' WHERE `ID`='%d' LIMIT 1", PlayerData[playerid][CarKey5], PlayerData[playerid][ID]);
		mysql_tquery(SQL, string, "", "");
	}
	
	CarInfo[idd][Userid] = PlayerData[playerid][ID];
	CarInfo[idd][cID] = idd;
	CarInfo[idd][cModel] = modelid;
	CarInfo[idd][cLocationx] = 2148.5664;	CarInfo[idd][cLocationy] = -1157.5551;	CarInfo[idd][cLocationz] = 23.5491;
	CarInfo[idd][cAngle] = 270.3397;
	CarInfo[idd][cColorOne] = 1;	CarInfo[idd][cColorOne] = 1;
	strmid(CarInfo[idd][cOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
	CarInfo[idd][cValue] = 0;
	CarInfo[idd][cSpecial] = 1;
	strmid(CarInfo[idd][cLicense], "NewCar", 0, 6, 255);
	CarInfo[idd][cAlarm] = 0;	CarInfo[idd][cLock] = 0;
	CarInfo[idd][mod0] = 0;		CarInfo[idd][mod1] = 0;		CarInfo[idd][mod2] = 0;		CarInfo[idd][mod3] = 0;
	CarInfo[idd][mod4] = 0;		CarInfo[idd][mod5] = 0;		CarInfo[idd][mod6] = 0;		CarInfo[idd][mod7] = 0;
	CarInfo[idd][mod8] = 0;		CarInfo[idd][mod9] = 0;		CarInfo[idd][mod10] = 0;	CarInfo[idd][mod11] = 0;
	CarInfo[idd][mod12] = 0;	CarInfo[idd][mod13] = 0;	CarInfo[idd][paintjob] = 0;	CarInfo[idd][KM] = 0;

	mysql_format(SQL, string, sizeof(string),"INSERT INTO cars (ID, Model) VALUES (%d, %d)",  idd, CarInfo[idd][cModel]);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationx='%f' WHERE ID=%d", CarInfo[idd][cLocationx], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationy='%f' WHERE ID=%d", CarInfo[idd][cLocationy], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Locationz='%f' WHERE ID=%d", CarInfo[idd][cLocationz], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Angle='%f' WHERE ID=%d", CarInfo[idd][cAngle], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorOne='%d' WHERE ID=%d", CarInfo[idd][cColorOne], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET ColorTwo='%d' WHERE ID=%d", CarInfo[idd][cColorTwo], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Owner='%s' WHERE ID=%d", CarInfo[idd][cOwner], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Value='%d' WHERE ID=%d", CarInfo[idd][cValue], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET License='%s' WHERE ID=%d", CarInfo[idd][cLicense], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Alarm='%d' WHERE ID=%d", CarInfo[idd][cAlarm], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Lockk='%d' WHERE ID=%d", CarInfo[idd][cLock], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Userid='%d' WHERE ID=%d", PlayerData[playerid][ID], idd);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Special='1' WHERE ID=%d", idd);
	mysql_tquery(SQL, string, "", "");

	CarInfo[idd][Spawned] = CreateVehicle(CarInfo[idd][cModel],CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],CarInfo[idd][cAngle],1,1,-1);
	SetVehicleNumberPlate(idd,CarInfo[idd][cLicense]);

	mysql_format(SQL, string, sizeof(string), "UPDATE cars SET Spawned='%d' WHERE ID=%d", CarInfo[idd][Spawned], idd);
	mysql_tquery(SQL, string, "", "");
	
	format(string, sizeof(string), "Congratultions. You bought a %s for $0. You can find your car in the near park. ",vehName[modelid-400]);
	SendClientMessage(playerid,COLOR_YELLOW2,string);

	SetPlayerCheckpoint(playerid,CarInfo[idd][cLocationx],CarInfo[idd][cLocationy],CarInfo[idd][cLocationz],5.0);
	return 1;
}
YCMD:buyvehicle(playerid,params[], help)
{
	new string[128];
	if(PlayerData[playerid][Level] < 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You need to be level 3 or higher.");
	if(PlayerData[playerid][WantedLevel] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please surrender, and then come back!");
	if(FindCSlot(playerid) == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have 5 vehicles, sell one first!");
	if(!PlayerToPoint(3.0,playerid,2131.7759,-1150.5256,24.1473)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near the dealership!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please exit the vehicle!");
	if(SpawnedCars(playerid) >= 1 && PlayerData[playerid][Premium] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please park your car!");
	if(SpawnedCars(playerid) >= 2 && PlayerData[playerid][Premium] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please park one of your car!");
	
	TogglePlayerControllable(playerid, 0);
	SetPlayerVirtualWorld(playerid,playerid+1);
	SetPlayerPos(playerid,2116.8875,-1117.0388,25.2993);
	SetPlayerCameraPos(playerid,2120.9109,-1120.2133,25.3292);
	SetPlayerCameraLookAt(playerid,2124.9263,-1130.8911,25.2097);
	DealerID[playerid] = 1;
	VehicleDealer[playerid] = CreateVehicle(DSModels[DealerID[playerid]][dModel],2124.9263,-1130.8911,25.2097,DSAngle[playerid],1,1,-1);
	SetVehicleVirtualWorld(VehicleDealer[playerid],playerid+1);
	
	SelectTextDraw(playerid, 0xFF0000FF);
	PlayerTextDrawShow(playerid,DSBox);
	PlayerTextDrawShow(playerid,DSTest);
	PlayerTextDrawShow(playerid,DSInfo);
	PlayerTextDrawShow(playerid,DSBuy);
	PlayerTextDrawShow(playerid,DSCancel);
	PlayerTextDrawShow(playerid,DSPrev);
	PlayerTextDrawShow(playerid,DSNext);

    PlayerTextDrawSetPreviewModel(playerid, DSModel, DSModels[DealerID[playerid]][dModel]);
	PlayerTextDrawSetPreviewRot(playerid, DSModel, 0.0, 0.0, DSAngle[playerid], 1.0);
	PlayerTextDrawShow(playerid,DSModel);
	
	format(string,sizeof(string),"Name: ~y~%s",vehName[DSModels[DealerID[playerid]][dModel]-400]);
	PlayerTextDrawSetString(playerid,DSName,string);
	PlayerTextDrawShow(playerid,DSName);

	format(string,sizeof(string),"Price: ~y~$%s",Decimal(DSModels[DealerID[playerid]][dPrice]));
	PlayerTextDrawSetString(playerid,DSPrice,string);
	PlayerTextDrawShow(playerid,DSPrice);

    format(string,sizeof(string),"Stock: ~y~%d",DSModels[DealerID[playerid]][dStock]);
	PlayerTextDrawSetString(playerid,DSStock,string);
	PlayerTextDrawShow(playerid,DSStock);
	
	InDealer[playerid] = 1;

	return 1;
}

YCMD:members(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader], MemberString[1024], on = 0, TitleString[32], string[128], dutyt[25];
	if(faction == 0) return SendClientMessage(playerid, COLOR_WHITE, NoFaction);
	foreach(Player, i)
	{
		new factioni = PlayerData[i][Member] + PlayerData[i][Leader];
		if(factioni == faction)
		{
			if(PlayerData[i][OnDuty] == 1)
				dutyt = "[DUTY]";
			format(string, sizeof(string), "%s %s(%d) - %d FW \n", dutyt, PlayerData[i][Name], i, PlayerData[i][FacWarns]);
			strcat(MemberString, string, sizeof(MemberString));
			on += 1;
		}
	}
	format(TitleString, sizeof(TitleString), "%d members online", on);
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_LIST, TitleString, MemberString, "Close", "Cancel");
	return 1;
}

YCMD:enter(playerid, params[], help)
{
	new string[128], Query[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	for(new i = 1; i <= houses; i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			if(PlayerData[playerid][HKey] == i || HouseInfo[i][hLock] == 0)
			{
				SetPlayerInterior(playerid,HouseInfo[i][hInt]);
				SetPlayerVirtualWorld(playerid,i);
				SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
				GameTextForPlayer(playerid, "~w~Welcome home", 5000, 1);
				PlayerData[playerid][InHouse] = i;
			}
			else
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
			}
		}
	}
	for(new i = 1; i <= bizzs; i++)
	{
		if(PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			if(faction != 1 && (i == 1))
			{
			    return 1;
			}
			if(PlayerData[playerid][Bizkey] == i || PlayerData[playerid][Cash] >= BizzInfo[i][bEntranceCost])
			{
				if(PlayerData[playerid][Bizkey] != i)
				{
					if(BizzInfo[i][bLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
					if(BizzInfo[i][bProducts] == 0) return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					GivePlayerCash(playerid,-BizzInfo[i][bEntranceCost]);
					
					format(string, sizeof(string), "~r~-$%d~n~~w~type /exit~n~to get out", BizzInfo[i][bEntranceCost]);
					GameTextForPlayer(playerid, string, 5000, 3);
					
					if(i != 1)
					{
						BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
						BizzInfo[i][bProducts]--;
						
						mysql_format(SQL, Query,128,"UPDATE `bizz` SET `Till`='%d',`EntranceCost`='%d',`Products`='%d' WHERE `ID`='%d'",BizzInfo[i][bTill],BizzInfo[i][bEntranceCost],BizzInfo[i][bProducts],BizzInfo[i][bID]);
						mysql_tquery(SQL, Query, "", "");
					}
					else
					{
						SafeBox[5][sbMoney] += BizzInfo[i][bEntranceCost];
						
						mysql_format(SQL, Query,128,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='5'",SafeBox[5][sbMoney]);
						mysql_tquery(SQL, Query, "", "");
					}
				}
				SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
				SetPlayerVirtualWorld(playerid,BizzInfo[i][bVW]);
				SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
				PlayerData[playerid][InBizz] = i;
			}
			else
			{
				GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 1);
			}
		}
	}
	if (PlayerToPoint(4.0, playerid,1412.0304,-1700.1549,13.5395))
	{//enter cladire-spawn
		SetPlayerPos(playerid,16.0883,33.4171,973.3144);
		SetPlayerFacingAngle(playerid, 270.7579);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezeT", 3000, 0, "d", playerid);
	}
	else if (PlayerToPoint(2.0, playerid,-1.3946,19.1643,973.3081))
	{//sport room
		SetPlayerPos(playerid,-1.3711,22.2146,973.4081);
	}
	else if (PlayerToPoint(2.0, playerid,22.1204,27.4664,973.3081))
	{//main room
		SetPlayerPos(playerid,22.1380,29.9197,973.3081);
	}
	else if (PlayerToPoint(2.0, playerid,22.2507,20.9277,973.3081))
	{//rest room
		SetPlayerPos(playerid,22.2184,18.6323,973.3081);
	}
	else if (PlayerToPoint(2.0, playerid,2486.5198,-1645.2394,14.0772) && faction == 2)
	{//HQ Grove St. 125
		PlayerData[playerid][InHQ] = 2;
		SetPlayerPos(playerid,942.171997,-16.542755,1000.929687);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 2);
	}
	else if (PlayerToPoint(2.0, playerid,2000.0482,-1114.3588,27.1250) && faction == 3)
	{//Grape Street Watts
		PlayerData[playerid][InHQ] = 3;
		SetPlayerPos(playerid,964.106994,-53.205497,1001.124572);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 3);
	}
	else if (PlayerToPoint(2.0, playerid,1899.4996,-2005.1289,13.5469) && faction == 4)
	{//Varrio Nuevo Estrada
		PlayerData[playerid][InHQ] = 4;
		SetPlayerPos(playerid,1710.433715,-1669.379272,20.225049);
		SetPlayerInterior(playerid,18);
		SetPlayerVirtualWorld(playerid, 4);
	}
	else if (PlayerToPoint(2.0, playerid,1653.7765,-1655.5151,22.5156) && faction == 5)
	{//SA GOV
		PlayerData[playerid][InHQ] = 5;
		SetPlayerPos(playerid,1494.3252,1304.9429,1093.2891);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 5);
	}
	else if (PlayerToPoint(2.0, playerid,755.3737,-1362.3281,13.5131) && faction == 6)
	{//SAN Network
		PlayerData[playerid][InHQ] = 6;
		SetPlayerPos(playerid,1494.3252,1304.9429,1093.2891);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 6);
	}
	else if (PlayerToPoint(2.0, playerid,1172.4932,-1323.3479,15.4030) && faction == 7)
	{//Emergency Dept.
		PlayerData[playerid][InHQ] = 7;
		SetPlayerPos(playerid,1494.3252,1304.9429,1093.2891);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 7);
	}
	else if (PlayerToPoint(2.0, playerid,1555.2115,-1675.6229,16.1953))
	{//LS - enter - section
		SetPlayerPos(playerid,1118.5378,328.2394,583.7659);
		SetPlayerFacingAngle(playerid, 90.0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezeT", 3000, 0, "d", playerid);
	}
	else if (PlayerToPoint(2.0, playerid,1117.6843,326.2397,583.7659))
	{//section - enter - PD control
	
	}
	else if (PlayerToPoint(2.0, playerid,1127.5112,328.8745,583.7659))
	{//section - enter - jail
	
	}
	return 1;
}

YCMD:ram(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	for(new i = 1; i <= houses; i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			SetPlayerInterior(playerid,HouseInfo[i][hInt]);
			SetPlayerVirtualWorld(playerid,i);
			SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			PlayerData[playerid][InHouse] = i;
		}
	}
	for(new i = 1; i <= bizzs; i++)
	{
		if(PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			if(BizzInfo[i][bLocked] == 1)
			{
				SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
				SetPlayerVirtualWorld(playerid,BizzInfo[i][bVW]);
				SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
				PlayerData[playerid][InBizz] = i;
			}
		}
	}
	if (PlayerToPoint(2.0, playerid,2486.5198,-1645.2394,14.0772))
	{//HQ Grove St. 125
		PlayerData[playerid][InHQ] = 2;
		SetPlayerPos(playerid,942.171997,-16.542755,1000.929687);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 2);
	}
	else if (PlayerToPoint(2.0, playerid,2000.0482,-1114.3588,27.1250))
	{//Grape Street Watts
		PlayerData[playerid][InHQ] = 3;
		SetPlayerPos(playerid,964.106994,-53.205497,1001.124572);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 3);
	}
	else if (PlayerToPoint(2.0, playerid,1899.4996,-2005.1289,13.5469))
	{//Varrio Nuevo Estrada
		PlayerData[playerid][InHQ] = 4;
		SetPlayerPos(playerid,1710.433715,-1669.379272,20.225049);
		SetPlayerInterior(playerid,18);
		SetPlayerVirtualWorld(playerid, 4);
	}
	else if (PlayerToPoint(2.0, playerid,1653.7765,-1655.5151,22.5156))
	{//SA GOV
		PlayerData[playerid][InHQ] = 5;
		SetPlayerPos(playerid,1494.3252,1304.9429,1093.2891);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 5);
	}
	else if (PlayerToPoint(2.0, playerid,755.3737,-1362.3281,13.5131))
	{//SAN Network
		PlayerData[playerid][InHQ] = 6;
		SetPlayerPos(playerid,1494.3252,1304.9429,1093.2891);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 6);
	}
	else if (PlayerToPoint(2.0, playerid,1172.4932,-1323.3479,15.4030))
	{//Emergency Dept.
		PlayerData[playerid][InHQ] = 7;
		SetPlayerPos(playerid,1494.3252,1304.9429,1093.2891);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid, 7);
	}
	return 1;
}

YCMD:exit(playerid, params[], help)
{
    if(PlayerData[playerid][InHouse] > 0)
	{
		new i = PlayerData[playerid][InHouse];
		SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerData[playerid][InHouse] = -1;
	}
	if(PlayerData[playerid][InBizz] > 0)
	{
		new i = PlayerData[playerid][InBizz];
		PlayerData[playerid][InBizz] = -1;
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
	}
	else if (PlayerToPoint(2.0, playerid,-1.3711,22.2146,973.4081))
	{//sport room
		SetPlayerPos(playerid,-1.3946,19.1643,973.3081);
	}
	else if (PlayerToPoint(2.0, playerid,22.1380,29.9197,973.3081))
	{//main room
		SetPlayerPos(playerid,22.1204,27.4664,973.3081);
	}
	else if (PlayerToPoint(2.0, playerid,22.2184,18.6323,973.3081))
	{//rest room
		SetPlayerPos(playerid,22.2507,20.9277,973.3081);
	}
	else if (PlayerToPoint(2.0, playerid,38.1737,33.4262,973.3081))
	{//exit spawn room
		SetPlayerPos(playerid,1412.0304,-1700.1549,13.5395);
	}
	else if (PlayerToPoint(2.0, playerid,-15.9546,32.5763,973.3081))
	{//exit spawn room
		SetPlayerPos(playerid,1412.0304,-1700.1549,13.5395);
	}
	else if (PlayerToPoint(2.0, playerid,942.171997,-16.542755,1000.929687))
	{//HQ Grove St. 125
		PlayerData[playerid][InHQ] = -1;
		SetPlayerPos(playerid,2486.5198,-1645.2394,14.0772);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
	}
	else if (PlayerToPoint(2.0, playerid,964.106994,-53.205497,1001.124572))
	{//Grape Street Watts
		PlayerData[playerid][InHQ] = -1;
		SetPlayerPos(playerid,2000.0482,-1114.3588,27.1250);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
	}
	else if (PlayerToPoint(2.0, playerid,1710.433715,-1669.379272,20.225049))
	{//Varrio Nuevo Estrada
		PlayerData[playerid][InHQ] = -1;
		SetPlayerPos(playerid,1899.4996,-2005.1289,13.5469);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
	}
	else if (PlayerToPoint(2.0, playerid,1494.3252,1304.9429,1093.2891) && PlayerData[playerid][InHQ] == 5)
	{//SA GOV
		PlayerData[playerid][InHQ] = -1;
		SetPlayerPos(playerid,1653.7765,-1655.5151,22.5156);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
	}
	else if (PlayerToPoint(2.0, playerid,1494.3252,1304.9429,1093.2891) && PlayerData[playerid][InHQ] == 6)
	{//SAN Network
		PlayerData[playerid][InHQ] = -1;
		SetPlayerPos(playerid,755.3737,-1362.3281,13.5131);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
	}
	else if (PlayerToPoint(2.0, playerid,1494.3252,1304.9429,1093.2891) && PlayerData[playerid][InHQ] == 7)
	{//Emergency Dept.
		PlayerData[playerid][InHQ] = -1;
		SetPlayerPos(playerid,1172.4932,-1323.3479,15.4030);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
	}
	else if (PlayerToPoint(2.0, playerid,1119.1720,330.5911,583.7659))
	{//section - exit - LS
		SetPlayerPos(playerid,1552.3688,-1675.5404,16.1953);
		SetPlayerFacingAngle(playerid, 90.0);
	}
	return 1;
}

YCMD:netstats(playerid, params[], help)
{
	gNetStatsPlayerId = playerid;
	NetStatsDisplay();
	gNetStatsTimerId = SetTimer("NetStatsDisplay", 3000, true); // this will refresh the display every 3 seconds
	return 1;
}

function NetStatsDisplay()
{
	new netstats_str[2048+1];
	GetNetworkStats(netstats_str, 2048);
	ShowPlayerDialog(gNetStatsPlayerId, ADMIN_NETSTATS_DIALOGID, DIALOG_STYLE_MSGBOX, "Server NetStats", netstats_str, "Ok", "");
}

YCMD:stats(playerid, params[], help)
{
    ShowStats(playerid,playerid);
	return 1;
}

YCMD:gethere(playerid, params[], help)
{
	new id,string[256];
	new Float:plocx,Float:plocy,Float:plocz;
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/gethere <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetPlayerInterior(id,GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid));
	if (GetPlayerState(id) == 2)
	{
		new tmpcar = GetPlayerVehicleID(id);
		SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
		LinkVehicleToInterior(tmpcar,GetPlayerInterior(playerid));
	}
	else
	{
		SetPlayerPos(id,plocx,plocy+2, plocz);
	}
	SendClientMessage(id, COLOR_GRAD1, "You have been teleported");
	format(string, sizeof(string), "You have teleported %s (%d) to your position.",PlayerData[id][Name], id);
	SendClientMessage(playerid, COLOR_YELLOW2, string); 
	return 1;
}
CMD:dsstock(playerid, params[])
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		new model, number, str[512];
		if(sscanf(params, "ii", model, number)) return SendUsage(playerid,"/dsstock <model> <number>");
		{
			new id;
			for(new i = 1; i <= dsvehs; i++)
			{
				if(DSModels[i][dModel] == model)
				{
					id = i;
					break;
				}
			}
			DSModels[id][dStock] = number;
			mysql_format(SQL, str,512,"UPDATE `dsveh` SET `Stock`='%d' WHERE `Model`='%d'",number,model);
			mysql_tquery(SQL, str, "", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:dsprice(playerid, params[])
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		new model, number, str[512];
		if(sscanf(params, "ii", model, number)) return SendUsage(playerid,"/dsprice <model> <number>");
		{
			new id;
			for(new i = 1; i <= dsvehs; i++)
			{
				if(DSModels[i][dModel] == model)
				{
					id = i;
					break;
				}
			}
			DSModels[id][dPrice] = number;
			mysql_format(SQL, str,512,"UPDATE `dsveh` SET `Price`='%d' WHERE `Model`='%d'",number,model);
			mysql_tquery(SQL, str, "", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:dsdoors(playerid, params[])
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		new model, number, str[512];
		if(sscanf(params, "ii", model, number)) return SendUsage(playerid,"/dsdoors <model> <number>");
		{
			new id;
			for(new i = 1; i <= dsvehs; i++)
			{
				if(DSModels[i][dModel] == model)
				{
					id = i;
					break;
				}
			}
			DSModels[id][dDoors] = number;
			mysql_format(SQL, str,512,"UPDATE `dsveh` SET `Doors`='%d' WHERE `Model`='%d'",number,model);
			mysql_tquery(SQL, str, "", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:dstype(playerid, params[])
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		new model, type[20], str[512];
		if(sscanf(params, "is[20]", model, type)) return SendUsage(playerid,"/dstype <model> <name>");
		{
			new id;
			for(new i = 1; i <= dsvehs; i++)
			{
				if(DSModels[i][dModel] == model)
				{
					id = i;
					break;
				}
			}
			strmid(DSModels[id][dType], type, 0, strlen(type), 255);
			mysql_format(SQL,str,512,"UPDATE `dsveh` SET `Type`='%s' WHERE `Model`='%d'",type,model);
			mysql_tquery(SQL,str, "", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:dsspeed(playerid, params[])
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		new model, number, str[512];
		if(sscanf(params, "ii", model, number)) return SendUsage(playerid,"/dsspeed <model> <number>");
		{
			new id;
			for(new i = 1; i <= dsvehs; i++)
			{
				if(DSModels[i][dModel] == model)
				{
					id = i;
					break;
				}
			}
			DSModels[id][dMaxSpeed] = number;
			mysql_format(SQL, str,512,"UPDATE `dsveh` SET `MaxSpeed`='%d' WHERE `Model`='%d'",number,model);
			mysql_tquery(SQL, str, "", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
CMD:dsstats(playerid, params[])
{
	if(PlayerData[playerid][Admin] >= 6)
	{
		new model, string[128];
		if(sscanf(params, "i", model)) return SendUsage(playerid,"/dsstats <model>");
		{
			new id;
			for(new i = 1; i <= dsvehs; i++)
			{
				if(DSModels[i][dModel] == model)
				{
					id = i;
					break;
				}
			}
			format(string,sizeof(string),"Model: {A9C4E4}%d",model);
			SendClientMessage(playerid,COLOR_WHITE,string);
			format(string,sizeof(string),"Price: {A9C4E4}%d",DSModels[id][dPrice]);
			SendClientMessage(playerid,COLOR_WHITE,string);
			format(string,sizeof(string),"Stock: {A9C4E4}%d",DSModels[id][dStock]);
			SendClientMessage(playerid,COLOR_WHITE,string);
			format(string,sizeof(string),"Doors: {A9C4E4}%d",DSModels[id][dDoors]);
			SendClientMessage(playerid,COLOR_WHITE,string);
			format(string,sizeof(string),"Type: {A9C4E4}%s",DSModels[id][dType]);
			SendClientMessage(playerid,COLOR_WHITE,string);
			format(string,sizeof(string),"MaxSpeed: {A9C4E4}%d",DSModels[id][dMaxSpeed]);
			SendClientMessage(playerid,COLOR_WHITE,string);
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	return 1;
}
YCMD:sethelper(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, level,string[128];
	if(sscanf(params, "ui", id, level)) return SendUsage(playerid,"/sethelper <Name/Playerid> <level>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(level > 1 || level < 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid admin level.");
	
	if(level == 1)
	{
		format(string, sizeof(string), "You have been promoted to helper by %s", PlayerData[playerid][Name]);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have promoted %s to helper.", PlayerData[id][Name]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "AdmCmd: %s has promoted %s to helper.", PlayerData[playerid][Name], PlayerData[id][Name]);
		ABroadCast(COLOR_LIGHTBLUE, string, 1);
	}
	else
	{
	    format(string, sizeof(string), "You have been removed from helpers by %s", PlayerData[playerid][Name]);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You removed %s from helpers.", PlayerData[id][Name]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "AdmCmd: %s has removed %s from helpers.", PlayerData[playerid][Name], PlayerData[id][Name]);
		ABroadCast(COLOR_LIGHTBLUE, string, 1);
	}
	
	PlayerData[id][Helper] = level;

	mysql_format(SQL,string, sizeof(string),"UPDATE `users` SET `Helper`='%d' WHERE `id`='%d'",PlayerData[id][Helper],PlayerData[id][ID]);
	mysql_tquery(SQL, string, "", "");
	return 1;
}

YCMD:setadmin(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, level,string[128];
	if(sscanf(params, "ui", id, level)) return SendUsage(playerid,"/setadmin <Name/Playerid> <level>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(level > 6 || level < 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid admin level.");
	format(string, sizeof(string), "You have been promoted to a level %d admin by %s", level, PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "You have promoted %s to a level %d admin.", PlayerData[id][Name],level);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmCmd: %s has promoted %s to a level %d admin.", PlayerData[playerid][Name], PlayerData[id][Name],level);
	ABroadCast(COLOR_LIGHTBLUE, string, 1);
	if(PlayerData[id][Admin] == 0)
	{
		SendClientMessage(id, COLOR_YELLOW, "PM from AdmBot: Don't forgot to request the Security Password");
		SendClientMessage(id, COLOR_YELLOW, "PM from AdmBot: Type /a and ask for it!");
		format(string, sizeof(string), "INSERT INTO `admins`(name,alevel,online) VALUES ('%s','%d','1')",PlayerData[id][Name],level);
		mysql_tquery(SQL, string, "", "");
	}
	PlayerData[id][Admin] = level;

	mysql_format(SQL,string, sizeof(string),"UPDATE `users` SET `Admin`='%d' WHERE `id`='%d'",PlayerData[id][Admin],PlayerData[id][ID]);
	mysql_tquery(SQL, string, "", "");
	mysql_format(SQL,string, sizeof(string),"UPDATE `admins` SET `alevel`='%d' WHERE `id`='%d'",PlayerData[id][Admin],PlayerData[id][ID]);
	mysql_tquery(SQL, string, "", "");
	if(level == 0)
	{
		format(string, sizeof(string), "DELETE FROM `admins` WHERE `name`='%s'",PlayerData[id][Name]);
		mysql_tquery(SQL, string, "", "");
	}
	return 1;
}

YCMD:gmx(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128];
	format(string, sizeof(string), "AdmCmd: %s has restarted server.", PlayerData[playerid][Name]);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	GameModeInitExitFunc();
	return 1;
}

YCMD:vnumber(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new number[25],str[512];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a vehcile.");
	if(sscanf(params, "s[25]", number)) return SendUsage(playerid,"/vnumber <number>");
	new carid = GetPlayerVehicleID(playerid);
	SetVehicleNumberPlate(carid,number);
	//SetVehicleToRespawn(carid);
	strmid(StaticVeh[carid][vLicense], number, 0, strlen(number), 255);
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `License`='%s' WHERE `ID`='%d'",number,carid);
	mysql_tquery(SQL,str, "", "");
	return 1;
}

YCMD:speedlimit(playerid, params[], help)
{
	new string[128], speed;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are not driving a vehicle.");
	if(sscanf(params, "i", speed)) return SendUsage(playerid,"/speedlimit <speed>");
	if(speed == 0)
	{
		PlayerData[playerid][Speedlimit] = 0;
		format(string, sizeof(string), "*You have turned your speed limit {F81414}off{FFFFFF}.", speed);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(speed > 170 || speed < 100) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: Speed limit must be between 170 and 100 km/h!");
	{
		PlayerData[playerid][Speedlimit] = speed - 25;
		format(string, sizeof(string), "*You have set your speed limit to {F81414}%d {FFFFFF}KM/H.", speed);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

YCMD:admins(playerid, params[], help)
{//ADFF5C - verde | FF6347 - rosu
	new string[128],count=0;
	format(string, sizeof(string), "{ADFF5C}|____ Admins online: ____|");
	SendClientMessage(playerid, COLOR_WHITE, string);
	for(new j=1;j<=6;j++)
    {
        foreach(Player,i)
		{
			if(PlayerData[i][Admin] == j)
            {
                format(string, 256, "{FF6347}%s {FFFFFF}(%d) - Admin Level %d",PlayerData[i][Name],i,PlayerData[i][Admin]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				count++;
			}
		}
	}
	format(string, sizeof(string), "{ADFF5C}* There are %d admins online", count);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:helpers(playerid, params[], help)
{//ADFF5C - verde | FF6347 - rosu
	new string[128],count=0;
	format(string, sizeof(string), "{ADFF5C}|____ Helpers online: ____|");
	SendClientMessage(playerid, COLOR_WHITE, string);
 	foreach(Player,i)
	{
		if(PlayerData[i][Helper] == 1)
        {
        	format(string, 256, "{FF6347}%s {FFFFFF}(%d) - Helper",PlayerData[i][Name],i);
			SendClientMessage(playerid, COLOR_WHITE, string);
			count++;
		}
	}
	format(string, sizeof(string), "{ADFF5C}* There are %d helpers online", count);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:eject(playerid, params[], help)
{
	new pstate,string[128],sendername[25],giveplayer[25];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You need to be in a Vehicle to use this!");
	pstate = GetPlayerState(playerid);
	if(pstate != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can only eject people as the driver!");
	new id;
	new test;
	test = GetPlayerVehicleID(playerid);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/eject <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't eject yourself!");
	if(IsPlayerInVehicle(id,test))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(id, giveplayer, sizeof(giveplayer));
		format(string, sizeof(string), "* You have thrown %s out of the car!", giveplayer);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You have been thrown out the car by %s !", sendername);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		RemovePlayerFromVehicle(id);
	}
	return 1;
}

YCMD:jobs(playerid, params[], help)
{
    ShowPlayerDialog(playerid, DIALOG_JOBS, DIALOG_STYLE_LIST, "Job List", "1. Pizzaboy\n2. Street Sweeper\n3. Trucker\n4. Farmer\n5. Bus Driver\n6. Garbageman\n7. Arms Dealer\n8. Drugs Dealer", "Select", "Cancel");
	return 1;
}

YCMD:help(playerid, params[], help)
{
	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Help List", "Server\nAccount\nGeneral\nChat\nBank\nJob\nFaction\nOthers", "Select", "Cancel");
	return 1;
}

YCMD:engine(playerid, params[], help)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are not driving a vehicle.");
	new string[128];			
	new vehid = GetPlayerVehicleID(playerid);
	if(IsABike(vehid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't turn on engine on a bike!");
	if(Gas[vehid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This vehicle doesn't have fuel.");
	new e,l,a,d,b,bo,o;
	GetVehicleParamsEx(vehid,e,l,a,d,b,bo,o);
	new name[25];
	GetPlayerName(playerid, name, sizeof(name));
	if(e == 0)
	{
		SetVehicleParamsEx(vehid,1,l,a,d,b,bo,o);
		format(string, sizeof(string), "* %s starts the engine of the %s.", name,vehName[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
	    SetVehicleParamsEx(vehid,0,l,a,d,b,bo,o);
		format(string, sizeof(string), "* %s stops the engine of the %s.", name,vehName[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

YCMD:vcreate(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new model,color1,color2,str[512];
	new lights,alarm,doors,bonnet,boot,objective;
	if(sscanf(params, "iii", model,color1,color2)) return SendUsage(playerid,"/vcreate <model> <color1> <color2>");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
	new carid = CreateVehicle(model, X,Y,Z, 0.0, color1, color2, -1);
	SetVehicleNumberPlate(carid,"NewCar");
	SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective);
	StaticVeh[carid][vID] = carid;
	StaticVeh[carid][vModel] = model;
	StaticVeh[carid][vLocationx] = X; StaticVeh[carid][vLocationy] = Y; StaticVeh[carid][vLocationz] = Z;
	StaticVeh[carid][vAngle] = 0;
	StaticVeh[carid][vColorOne] = color1; StaticVeh[carid][vColorTwo] = color2; StaticVeh[carid][vRespawnDelay] = -1;
	StaticVeh[carid][vSpecial] = 0; StaticVeh[carid][vFaction] = 0; StaticVeh[carid][vJob] = 0;
	strmid(StaticVeh[carid][vLicense], "NewCar", 0, strlen("NewCar"), 255);
	mysql_format(SQL,str,512,"INSERT INTO staticveh (ID, Model) VALUES (%d,%d)",carid,model);
	mysql_tquery(SQL,str, "", "");
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Locationx`='%f',`Locationy`='%f',`Locationz`='%f',`Angle`='0' WHERE `ID`='%d'",X,Y,Z,carid);
	mysql_tquery(SQL,str, "", "");
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `ColorOne`='%d',`ColorTwo`='%d',`RespawnDelay`='-1' WHERE `ID`='%d'",color1,color2,carid);
	mysql_tquery(SQL,str, "", "");
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Special`='0',`Faction`='0',`Job`='0',`Rank`='0' WHERE `ID`='%d'",carid);
	mysql_tquery(SQL,str, "", "");
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `License`='NewCar' WHERE `ID`='%d'",carid);
	mysql_tquery(SQL,str, "", "");
	return 1;
}

YCMD:vedit(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new str[512],name[20],value;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a vehicle.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(sscanf(params, "s[20]i", name, value))		
	{
		SendUsage(playerid,"/vedit <name> <value>");
		SendUsage(playerid,"Avaiable names: Model, ColorOne, ColorTwo, Faction, Job, Rank, Special.");
	}
	else
	{
		if( strcmp ( name, "model" , true ) == 0 )
		{
			StaticVeh[tmpcar][vModel] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Model`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
			DestroyVehicle(tmpcar);
			CreateVehicle(StaticVeh[tmpcar][vModel],StaticVeh[tmpcar][vLocationx],StaticVeh[tmpcar][vLocationy],StaticVeh[tmpcar][vLocationz]+1.0,StaticVeh[tmpcar][vAngle],StaticVeh[tmpcar][vColorOne],StaticVeh[tmpcar][vColorTwo],StaticVeh[tmpcar][vRespawnDelay]);
			SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][vLicense]);
		}
		if( strcmp ( name, "colorone" , true ) == 0 )
		{
			StaticVeh[tmpcar][vColorOne] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `ColorOne`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
			DestroyVehicle(tmpcar);
			CreateVehicle(StaticVeh[tmpcar][vModel],StaticVeh[tmpcar][vLocationx],StaticVeh[tmpcar][vLocationy],StaticVeh[tmpcar][vLocationz]+1.0,StaticVeh[tmpcar][vAngle],StaticVeh[tmpcar][vColorOne],StaticVeh[tmpcar][vColorTwo],StaticVeh[tmpcar][vRespawnDelay]);
			SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][vLicense]);
		}
		if( strcmp ( name, "colortwo" , true ) == 0 )
		{
			StaticVeh[tmpcar][vColorTwo] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `ColorTwo`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
			DestroyVehicle(tmpcar);
			CreateVehicle(StaticVeh[tmpcar][vModel],StaticVeh[tmpcar][vLocationx],StaticVeh[tmpcar][vLocationy],StaticVeh[tmpcar][vLocationz]+1.0,StaticVeh[tmpcar][vAngle],StaticVeh[tmpcar][vColorOne],StaticVeh[tmpcar][vColorTwo],StaticVeh[tmpcar][vRespawnDelay]);
			SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][vLicense]);
		}
		if( strcmp ( name, "faction" , true ) == 0 )
		{
			StaticVeh[tmpcar][vFaction] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Faction`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
		}
		if( strcmp ( name, "job" , true ) == 0 )
		{
			StaticVeh[tmpcar][vJob] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Job`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
		}
		if( strcmp ( name, "rank" , true ) == 0 )
		{
			StaticVeh[tmpcar][vRank] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Rank`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
		}
		if( strcmp ( name, "special" , true ) == 0 )
		{
			StaticVeh[tmpcar][vSpecial] = value;
			mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Special`='%d' WHERE `ID`='%d'",value,tmpcar);
			mysql_tquery(SQL,str, "", "");
		}
	}
	return 1;
}

YCMD:vstats(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a vehicle.");
	new tmpcar = GetPlayerVehicleID(playerid);
	format(string,sizeof(string),"Vehicle ID: {A9C4E4}%d",tmpcar);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Model: {A9C4E4}%d",StaticVeh[tmpcar][vModel]);
	SendClientMessage(playerid, COLOR_WHITE,string);		
	format(string,sizeof(string),"Position: {A9C4E4}%f %f %f",StaticVeh[tmpcar][vLocationx],StaticVeh[tmpcar][vLocationy],StaticVeh[tmpcar][vLocationz]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Angle: {A9C4E4}%f",StaticVeh[tmpcar][vAngle]);
	SendClientMessage(playerid, COLOR_WHITE,string);		
	format(string,sizeof(string),"Color One: {A9C4E4}%d {FFFFFF}| Two: {A9C4E4}%d",StaticVeh[tmpcar][vColorOne],StaticVeh[tmpcar][vColorTwo]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Respawn Delay: {A9C4E4}%d",StaticVeh[tmpcar][vRespawnDelay]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Faction: {A9C4E4}%d {FFFFFF}| Job: {A9C4E4}%d {FFFFFF}| Rank: {A9C4E4}%d",StaticVeh[tmpcar][vFaction],StaticVeh[tmpcar][vJob],StaticVeh[tmpcar][vRank]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Speical: {A9C4E4}%d",StaticVeh[tmpcar][vSpecial]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string,sizeof(string),"Numberplate: {A9C4E4}%s",StaticVeh[tmpcar][vLicense]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	return 1;
}

YCMD:vpark2(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid, Float:x, Float:y, Float:z, Float:angle, str[512];
	if(sscanf(params, "iffff", carid,x,y,z,angle)) return SendUsage(playerid,"/vpark2 <car id> <x> <y> <z> <angle>");
	StaticVeh[carid][vLocationx] = x;
	StaticVeh[carid][vLocationy] = y;
	StaticVeh[carid][vLocationz] = z;
	StaticVeh[carid][vAngle] = angle;
	DestroyVehicle(carid);
	CreateVehicle(StaticVeh[carid][vModel],StaticVeh[carid][vLocationx],StaticVeh[carid][vLocationy],StaticVeh[carid][vLocationz]+1.0,StaticVeh[carid][vAngle],StaticVeh[carid][vColorOne],StaticVeh[carid][vColorTwo],StaticVeh[carid][vRespawnDelay]);
	SetVehicleNumberPlate(carid,StaticVeh[carid][vLicense]);
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Locationx`='%f',`Locationy`='%f',`Locationz`='%f',`Angle`='%f' WHERE `ID`='%d'",x,y,z,angle,carid);
	mysql_tquery(SQL,str, "", "");
	return 1;
}

YCMD:vparkk(playerid, params[], help)
{
	new str[512];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a vehicle.");
	new tmpcar = GetPlayerVehicleID(playerid);
	new Float:x,Float:y,Float:z,Float:a;
	GetVehiclePos(tmpcar, x, y, z);
	GetVehicleZAngle(tmpcar, a);
	StaticVeh[tmpcar][vLocationx] = x;
	StaticVeh[tmpcar][vLocationy] = y;
	StaticVeh[tmpcar][vLocationz] = z;
	StaticVeh[tmpcar][vAngle] = a;
	DestroyVehicle(tmpcar);
	CreateVehicle(StaticVeh[tmpcar][vModel],StaticVeh[tmpcar][vLocationx],StaticVeh[tmpcar][vLocationy],StaticVeh[tmpcar][vLocationz]+1.0,StaticVeh[tmpcar][vAngle],StaticVeh[tmpcar][vColorOne],StaticVeh[tmpcar][vColorTwo],StaticVeh[tmpcar][vRespawnDelay]);
	SetVehicleNumberPlate(tmpcar,StaticVeh[tmpcar][vLicense]);
	mysql_format(SQL,str,512,"UPDATE `staticveh` SET `Locationx`='%f',`Locationy`='%f',`Locationz`='%f',`Angle`='%f' WHERE `ID`='%d'",x,y,z,a,tmpcar);
	mysql_tquery(SQL,str, "", "");
	return 1;
}

YCMD:activate(playerid, params[], help)
{
    if((PlayerData[playerid][Admin] + PlayerData[playerid][Helper]) == 0) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
   	new id, string[256], str[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/activate <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Activated] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player's account is already activated.");

	format(string, sizeof(string), "You activated %s(%d)'s account.", PlayerData[id][Name], id);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	format(string, sizeof(string), "%s activated your account (+$2000).", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_YELLOW2, string);
	
	format(string, sizeof(string), "AdmCmd: %s activated %s's account.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	
	PlayerData[id][Activated] = 1;
	GivePlayerCash(id, 2000);
	mysql_format(SQL, str,128,"UPDATE `users` SET `Activated`='1' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	return 1;
}

YCMD:goto(playerid, params[], help)
{
	if((PlayerData[playerid][Admin] + PlayerData[playerid][Helper]) == 0) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, string[256], giveplayer[25];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/goto <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	GetPlayerName(id, giveplayer, sizeof(giveplayer));
	GetPlayerPos(playerid, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(id, x, y, z);
	new tmpcar = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) == 2)
	{
		SetVehiclePos(tmpcar, x, y+4, z);
	}
	else
	{
		SetPlayerPos(playerid,x,y+2, z);
	}
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
	SetPlayerInterior(playerid, GetPlayerInterior(id));
	format(string, sizeof(string), "You have been teleported to %s (%d).",giveplayer, id);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	format(string, sizeof(string), "AdmCmd: %s teleported to %s.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:goback(playerid, params[], help)
{
	if((PlayerData[playerid][Admin] + PlayerData[playerid][Helper]) == 0) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
	}
	else
	{
		SetPlayerPos(playerid, TeleportDest[playerid][4],TeleportDest[playerid][5],TeleportDest[playerid][6]);
	}
	SendClientMessage(playerid, COLOR_YELLOW2, "You have been teleported back.");
	return 1;
}

YCMD:slap(playerid,params[], help)
{
    if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, string[256];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/slap <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(id, x, y, z);
	SetPlayerPos(id, x, y, z+3);
	format(string, sizeof(string), "AdmCmd: %s was slapped by %s.", PlayerData[id][Name], PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:slapcar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, string[256];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/slapcar <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(IsPlayerInAnyVehicle(id))
	{
		new Float:vx, Float:vy, Float:vz;
		GetVehiclePos(GetPlayerVehicleID(id), vx, vy, vz);
		SetVehiclePos(GetPlayerVehicleID(id), vx, vy, vz+5);
	}
	format(string, sizeof(string), "AdmCmd: %s's car was slapped by %s.", PlayerData[id][Name], PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:cucu(playerid, params[], help)
{
    new id,reason[128];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, reason)) return SendUsage(playerid,"/banex <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	BanA(id,PlayerData[playerid][Name],reason,0,0,1);
	return 1;
}
YCMD:banex(playerid, params[], help)
{
	new id,reason[128];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, reason)) return SendUsage(playerid,"/banex <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Admin] >= 1)
	{
		reason = "/banex admin";
		BanA(playerid,PlayerData[id][Name],reason,0,0,0);
		return 1;
	}
	BanA(id,PlayerData[playerid][Name],reason,0,0,1);		
	return 1;
}

YCMD:bano(playerid, params[], help)
{
    new vname[25],time,reason[128], query[128];
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "s[25]is[128]", vname, time, reason)) return SendUsage(playerid,"/bano <Name/Playerid> <days> <reason>");
	if(GetPlayerIdFromName(vname) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player is online.");
	mysql_format(SQL, query, 128, "SELECT `username`,`Admin`,`Banned` FROM `users` WHERE LOWER(username) = LOWER('%s') LIMIT 1",vname);
	mysql_tquery(SQL, query, "BanOff", "sdds", vname,playerid,time,reason);
	return 1;
}

function RefferalName(playerid)
{
	new refname[25], string[128];
	cache_get_field_content(0, "username", refname, SQL, 129);
	if(cache_num_rows() == 0)
	{
		ShowPlayerDialog(playerid, DIALOG_REFFERAL + 1, DIALOG_STYLE_INPUT, "Account Refferal", "Invalid refferal ID\nPlease enter below the refferal ID", "OK", "Back");
		return 1;
	}
	format(string, sizeof(string), "Are you sure that %s brought you here?", refname);
	ShowPlayerDialog(playerid, DIALOG_REFFERAL + 2, DIALOG_STYLE_MSGBOX, "Account Refferal", string, "Yes", "No");
	return 1;
}
function BanOff(vname[], playerid, time, reason[])
{
	new admin, bannedo, string[1024];
	if(cache_num_rows() == 0) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: [MYSQL]Player doesn't exist.");
	admin = cache_get_field_content_int(0, "Admin");
	bannedo = cache_get_field_content_int(0, "Banned");
 	if(bannedo >= 1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: [MYSQL]Player is already banned.");
 	if(admin >= 1)
 	{
 	    new reasonn[25];
 	    reasonn = "/banoffline admin";
		time = 0;
		BanA(playerid,"AdmBot",reasonn,time,0,0);
		return 1;
 	}
	if(time == 0)
	{//Permanent
		new str[128];
		new hour,minute,second,year, month,day;
		gettime(hour,minute,second);
		getdate(year, month, day);
		mysql_format(SQL,str,128,"UPDATE `users` SET `Banned`='2' WHERE `username`='%s' LIMIT 1",vname);
		mysql_tquery(SQL,str, "", "");
		mysql_format(SQL,string, sizeof(string), "INSERT INTO `bans`(Player,Admin,BannedDate,reason,time)VALUES('%s','%s','%02d/%02d/%04d %02d:%02d:%02d','%s','%d')",vname,PlayerData[playerid][Name],day,month,year,hour,minute,second,reason,time);
		mysql_tquery(SQL,string, "", "");
		format(string, sizeof(string), "(offline) AdmCmd: %s was banned by %s, reason: %s", vname, PlayerData[playerid][Name], reason);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		return 1;
	}
	if(time >= 1)
	{//Temporar
	    new length = time;
		new str[128];
		new hour,minute,second,year, month,day;
		gettime(hour,minute,second);
		getdate(year, month, day);
		mysql_format(SQL,str,128,"UPDATE `users` SET `Banned`='1' WHERE `username`='%s'",PlayerData[playerid][Name]);
		mysql_tquery(SQL,str, "", "");
		new monthh;
		new dayy;
		new yearr;
		if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
		{
			if(day+length>31)
			{
				monthh = month + 1;
				dayy = length+day-31;
			}
			else
			{
			    dayy = day + length;
			    monthh = month;
			}
			if(monthh > 12)
			{
				yearr = year + 1;
				monthh = monthh % 12;
			}
			else
			{
				yearr =year;
			}
		}
		else if(month == 4 || month == 6 || month == 9 || month == 11)
		{
			if(day+length>30)
			{
				monthh = month + 1;
				dayy = length+day-30;
			}
			else
			{
				dayy = day + length;
				monthh = month;
			}
			if(monthh > 12)
			{
				yearr =year + 1;
				monthh = monthh % 12;
			}
			else
			{
				yearr =year;
			}
		}
		else
		{
			if(day+length>28 && year / 4 != 0)
				{
				monthh = month + 1;
				dayy = length+day-28;
			}
			else if(day+length>29 && year / 4 == 0)
			{
				monthh = month + 1;
				dayy = length+day-29;
			}
			else
			{
				dayy = day + length;
				monthh = month;
			}
			yearr = year;
		}
		mysql_format(SQL,string, sizeof(string), "INSERT INTO `bans`(Player,Admin,BannedDate,reason,time,UD,UM,UY,UH,UMi)VALUES('%s','%s','%02d/%02d/%04d %02d:%02d:%02d','%s','%d','%d','%d','%d','%d','%d')",vname,PlayerData[playerid][Name],day,month,year,hour,minute,second,reason,length,dayy,monthh,yearr,hour,minute);
		mysql_tquery(SQL,string, "", "");
		format(string, sizeof(string), "(offline) AdmCmd: %s was banned by %s for %d days, reason: %s", vname, PlayerData[playerid][Name], length, reason);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		return 1;
	}
	ServerInfo[banned]++;
	mysql_format(SQL,string, sizeof(string),"UPDATE `infos` SET `banned`='%d' WHERE ID = 1",ServerInfo[banned]);
	mysql_tquery(SQL,string, "", "");
	return 1;
}

YCMD:ban(playerid, params[],help)
{
	new id,time,reason[128];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "uis[128]", id, time, reason)) return SendUsage(playerid,"/ban <Name/Playerid> <days> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Admin] >= 1)
	{
		reason = "/ban admin";
		time = 0;
		BanA(playerid,PlayerData[id][Name],reason,time,0,0);
		return 1;
	}
	if(time==0)
	{
		BanA(id,PlayerData[playerid][Name],reason,time,0,0);
	}
	else
	{
		BanA(id,PlayerData[playerid][Name],reason,time,1,0);
	}		
	return 1;
}

YCMD:kick(playerid, params[], help)
{
	new id, reason[128], string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, reason)) return SendUsage(playerid,"/kick <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Admin] >= 1)
	{
		reason = "/kick admin";
		new time = 0;
		BanA(playerid,PlayerData[id][Name],reason,time,0,0);
		return 1;
	}
	KickLog(playerid,id,reason);
	
	format(string, sizeof(string), "AdmCmd: %s was kicked by %s, reason: %s", PlayerData[id][Name], PlayerData[playerid][Name], reason);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	KickEx(id);
	return 1;
}


YCMD:showturf(playerid, params[], help)
{
	new id;
	if(sscanf(params, "i", id)) return SendUsage(playerid,"/showturf <id>");
	
	GangZoneShowForPlayer(playerid, Turfs[id], 0xFD7E00DD);
	return 1;
}

YCMD:reloadturfs(playerid, params[], help)
{
	new query[128];
	for(new i = 1; i <= 5; i++)
	{
		GangZoneHideForPlayer(playerid, Turfs[i]);
		GangZoneDestroy(Turfs[i]);
	}
	
	mysql_format(SQL, query, sizeof(query), "SELECT * FROM `turfs`");
	mysql_tquery(SQL, query, "LoadTurfs", "");
	return 1;
}

YCMD:mypos(playerid, params[], help)
{
	new Float:rx, Float:ry, Float:rz;
	GetPlayerPos(playerid, rx, ry, rz);
	new string[128];
	format(string,sizeof(string),"%f %f %f",rx,ry,rz);
	SendClientMessage(playerid, -1, string);
	return 1;
}

YCMD:aimtest( playerid, params[], help)
{
   	new string[128], Float:PPos[3], Float: Angle;
	if (PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id = PlayerData[playerid][Spectate];
	if(id == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You'ren't spectating somebody.");

	if(GetPlayerTargetPlayer(id) == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't aiming at anyone.");
    GetPlayerPos(GetPlayerTargetPlayer(id), PPos[ 0 ], PPos[ 1 ], PPos[ 2 ] );
	GetPlayerFacingAngle(id, Angle);
    
    if ( Angle >= 0 && Angle <= 89 ) {
   		SetPlayerPos( GetPlayerTargetPlayer(id), PPos[ 0 ], PPos[ 1 ] - 10, PPos[ 2 ] );
    }
    else if ( Angle >= 90 && Angle <= 179 ) {
   		SetPlayerPos( GetPlayerTargetPlayer(id), PPos[ 0 ] + 10, PPos[ 1 ], PPos[ 2 ] );
 	}
  	else if ( Angle >= 180 && Angle <= 269 ) {
		SetPlayerPos( GetPlayerTargetPlayer(id), PPos[ 0 ], PPos[ 1 ] + 10, PPos[ 2 ] );
  	}
	else if ( Angle >= 270 && Angle <= 360 ) {
		SetPlayerPos( GetPlayerTargetPlayer(id), PPos[ 0 ] - 10, PPos[ 1 ], PPos[ 2 ] );
  	}
		    
	GetPlayerPos(GetPlayerTargetPlayer(id), PPos[0], PPos[1], PPos[2]);
    format(string, sizeof(string), "AdmCmd: %s made an aimtest on %s.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

new NoReloading[MAX_PLAYERS];
new CurrentWeapon[MAX_PLAYERS];
new CurrentAmmo[MAX_PLAYERS];

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new string[128];
    if(IsWeaponWithAmmo(weaponid))
    {
    	new count = 0;
    	if(weaponid != CurrentWeapon[playerid]) CurrentWeapon[playerid] = weaponid, CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid), count++;
    	if(GetPlayerWeaponAmmo(playerid,weaponid) > CurrentAmmo[playerid] || GetPlayerWeaponAmmo(playerid,weaponid) < CurrentAmmo[playerid])
    	{
      		CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid);
      		NoReloading[playerid] = 0;
     		count++;
    	}
    	if(GetPlayerWeaponAmmo(playerid,weaponid) != 0 && GetPlayerWeaponAmmo(playerid,weaponid) == CurrentAmmo[playerid] && count == 0)
    	{
      		NoReloading[playerid]++;
  			if(NoReloading[playerid] >= 5)
      		{
	  			NoReloading[playerid] = 0;
			    CurrentWeapon[playerid] = 0;
			    CurrentAmmo[playerid] = 0;
   				format(string, sizeof(string), "Warning: %s(%d) could use no-reload cheats.", PlayerData[playerid][Name], playerid);
				ABroadCast(RED,string,1);
      			return 0;
      		}
    	}
    }
    return 1;
}

stock IsWeaponWithAmmo(weaponid)//JR_Junior
{
  switch(weaponid)
  {
    case 16..18, 22..39, 41..42: return 1;
    default: return 0;
  }
  return 0;

}

stock GetPlayerWeaponAmmo(playerid,weaponid)//I dont't know the creator
{
  new wd[2][13];
  for(new i; i<13; i++) GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
  for(new i; i<13; i++)
  {
  if(weaponid == wd[0][i]) return wd[1][i];
  }
  return 0;
}

function HideDamageTD(playerid)
{
	PlayerTextDrawHide(playerid, GiveDamage);
    PlayerTextDrawHide(playerid, TakeDamage);
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
    if(damagedid != INVALID_PLAYER_ID)
	{
		PlayerPlaySound(playerid,17802,0.0,0.0,0.0);
		if(PlayerData[playerid][SpectateP] != -1) PlayerPlaySound(PlayerData[playerid][SpectateP],17802,0.0,0.0,0.0);
		
		new s[128];
		format(s, 128, "+ %.0f HP to %s(%d) using %s", amount, PlayerData[damagedid][Name], damagedid, GetWeaponNameEx(weaponid));
		PlayerTextDrawSetString(playerid, GiveDamage, s);
		PlayerTextDrawShow(playerid, GiveDamage);
		SetTimerEx("HideDamageTD", 2000, false, "i", playerid);
	
		format(s, 128, "- %.0f HP from %s(%d) using %s", amount, PlayerData[playerid][Name], playerid, GetWeaponNameEx(weaponid));
		PlayerTextDrawSetString(damagedid, TakeDamage, s);
		PlayerTextDrawShow(damagedid, TakeDamage);
		SetTimerEx("HideDamageTD", 2000, false, "i", damagedid);
		
		SetPlayerChatBubble(damagedid, s, 0xE81010FF, 100.0, 2000);
	}
    return 1;
}

/*public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	new string[128];
    if(GetPlayerTargetPlayer(playerid) == INVALID_PLAYER_ID)
	{
	    if (weaponid > 21 && weaponid < 39)
		{
			format(string, 256, "Warning: %s(%d) could use aim cheats.", PlayerData[playerid][Name]);
			ABroadCast(RED,string,1);
		}
	}
    return 1;
}*/
/*YCMD:joytest ( playerid , params [], help)
{
	new string[128], id;
	if (PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/joytest <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
 	JoypadTest[id] = 10;
 	JoypadDetection[id] = 0;
  	format(string, sizeof(string), "AdmCmd: %s made an joytest on %s.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1 ;
}*/

YCMD:ah(playerid, params[], help)
{
	if (PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if (PlayerData[playerid][Admin] >= 1)
	{
		SendClientMessage(playerid, COLOR_GREEN,"____________________________________________________________________________");
		SendClientMessage(playerid, COLOR_GRAD1, "*1* ADMIN *** /goto /goback /slap /slapcar /kick /ban /banex /check /o /pm /a /mute /weapons /muted /getip /teleport /alicenses /aimtest");
		SendClientMessage(playerid, COLOR_GRAD1, "*1* ADMIN *** /cc /warn /up /dn /respawncar /undercovered /weatherall /setjob /recon /fly /lt /rt /(un)freeze /tognewbie /joytest");
	}
	if (PlayerData[playerid][Admin] >= 2)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "*2* ADMIN *** /jail /gethere /radaron /disarm /skydive /showfamily /cnn /setint /setvw");
	}
	if (PlayerData[playerid][Admin] >= 3)
	{
		SendClientMessage(playerid, COLOR_GRAD3,"*3* ADMIN *** /gotocar /getcar /entercar /fuelcars /respawn /setcarint");
		SendClientMessage(playerid, COLOR_GRAD3,"*3* ADMIN *** /noscar /flipcar /hidracar /colorcar /repaircar");
	}
	if (PlayerData[playerid][Admin] >= 4)
	{ 
		SendClientMessage(playerid, COLOR_GRAD4,"*4* ADMIN *** /mole /sbiz /biz /houseo /house /tod /setskin");
	    SendClientMessage(playerid, COLOR_GRAD4,"*4* ADMIN *** /setstat /sethp /setarmor /disarmrange /healall");
        SendClientMessage(playerid, COLOR_GRAD4,"*4* ADMIN *** /atakelicense(/atl) /agivelicense(/agl)");
	}
	if (PlayerData[playerid][Admin] >= 5)
	{
		SendClientMessage(playerid, COLOR_GRAD5,"*5* ADMIN *** /unbanip /unwarn /unlockcar /recons /exp /givegunrange"); 
		SendClientMessage(playerid, COLOR_GRAD5,"*5* ADMIN *** /uninvite- /agivedrugs(/agd) /agivemats(/agm) /givegun"); 
		SendClientMessage(playerid, COLOR_GRAD5,"*5* ADMIN *** /asellhouse- /asellbiz /asellsbiz /asellcar- /destroycar");
	}
	if (PlayerData[playerid][Admin] >= 6)
	{
		SendClientMessage(playerid, COLOR_GRAD6,"*6* ADMIN *** /setadmin(off) /givexpall /givelevelall /rac"); 
		SendClientMessage(playerid, COLOR_GRAD6,"*6* ADMIN *** /aoffuninvite /givemoney /aspark /givemoneyall"); 
		SendClientMessage(playerid, COLOR_GRAD6,"*6* ADMIN *** /houseenter /bizenter /sbizenter /gotoxyz /setleader /safeboxedit"); 
		SendClientMessage(playerid, COLOR_GRAD6,"*6* ADMIN *** /musicforall /stopmusicforall /musichere /unban /server /safeboxs ");
		SendClientMessage(playerid, COLOR_GRAD6,"*6* ADMIN *** /vstats /vpark /vedit /vnumber");
		SendClientMessage(playerid, COLOR_GRAD6,"*6* ADMIN *** /dsstats /dsstock /dsprice /dsdoors /dstype /dsspeed");
	}
	return 1;
}
	
YCMD:open(playerid, params[], help)
{
	new string[128];
	for(new i = 1; i <= houses; i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
		{
			if(PlayerData[playerid][HKey] == i)
			{
				if(HouseInfo[i][hLock] == 1)
				{
					HouseInfo[i][hLock] = 0;
					GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, string, sizeof(string), "UPDATE houses SET Lockk='%d' WHERE id=%d", HouseInfo[i][hLock], i);
					mysql_tquery(SQL, string, "", "");
					return 1;
				}
				if(HouseInfo[i][hLock] == 0)
				{
					HouseInfo[i][hLock] = 1;
					GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, string, sizeof(string), "UPDATE houses SET Lockk='%d' WHERE id=%d", HouseInfo[i][hLock], i);
					mysql_tquery(SQL, string, "", "");
					return 1;
				}
			}
			else return GameTextForPlayer(playerid, "~r~You don't have the key", 5000, 6);
		}
	}
	for(new i = 0; i < bizzs; i++)
	{
		if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
		{
			if(PlayerData[playerid][Bizkey] == i)
			{
				if(BizzInfo[i][bLocked] == 1)
				{
					BizzInfo[i][bLocked] = 0;
					GameTextForPlayer(playerid, "~w~Bussiness ~g~Open", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Locked='%d' WHERE id=%d", BizzInfo[i][bLocked], i+1);
					mysql_tquery(SQL, string, "", "");
					return 1;
				}
				if(BizzInfo[i][bLocked] == 0)
				{
					BizzInfo[i][bLocked] = 1;
					GameTextForPlayer(playerid, "~w~Bussiness ~r~Closed", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Locked='%d' WHERE id=%d", BizzInfo[i][bLocked], i+1);
					mysql_tquery(SQL, string, "", "");
					return 1;
				}
			}
			else return GameTextForPlayer(playerid, "~r~You don't have the key", 5000, 6);
		}
	}
	for(new i = 0; i < sbizzs; i++)
	{
		if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
		{
			if(PlayerData[playerid][Bizkey] == i+100)
			{
				if(SBizzInfo[i][sbLocked] == 1)
				{
					SBizzInfo[i][sbLocked] = 0;
					GameTextForPlayer(playerid, "~w~Bussiness ~g~Open", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, string, sizeof(string), "UPDATE sbizz SET Locked='%d' WHERE id=%d", SBizzInfo[i][sbLocked], i+1);
					mysql_tquery(SQL, string, "", "");
					return 1;
				}
				if(SBizzInfo[i][sbLocked] == 0)
				{
					SBizzInfo[i][sbLocked] = 1;
					GameTextForPlayer(playerid, "~w~Bussiness ~r~Closed", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					mysql_format(SQL, string, sizeof(string), "UPDATE sbizz SET Locked='%d' WHERE id=%d", SBizzInfo[i][sbLocked], i+1);
					mysql_tquery(SQL, string, "", "");
					return 1;
				}
			}
			else return GameTextForPlayer(playerid, "~r~You don't have the key", 5000, 6);
		}
	}
	return 1;
}

YCMD:househelp(playerid, params[], help)
{
	new titleh[64], stringh[2048];
	
	titleh = "House Commands";
	stringh = "{FFFFFF}/open {A9C4E4}- You open/close your house doors.\n";
	strcat(stringh, "{FFFFFF}/heal {A9C4E4}- You heal yourself.\n");
	//strcat(stringh, "{FFFFFF}/houseupgrade {A9C4E4}- To upgrade your house features.\n");
	strcat(stringh, "{FFFFFF}/setrentable {A9C4E4}- To set if the house is rentable or not.\n");
	strcat(stringh, "{FFFFFF}/setrent {A9C4E4}- To set the price of the rent.\n");
	strcat(stringh, "{FFFFFF}/housewithdraw {A9C4E4}- To withdraw things from your house safebox.\n");
	strcat(stringh, "{FFFFFF}/housedeposit {A9C4E4}- To deposit things into your house safebox.\n");
	strcat(stringh, "{FFFFFF}/sellhouse {A9C4E4}- To sell your house to another player.\n");
	strcat(stringh, "{FFFFFF}/sleep {A9C4E4}- To take a nap.\n");
	strcat(stringh, "{FFFFFF}/tenants {A9C4E4}- To see all your renters.\n");
	strcat(stringh, "{FFFFFF}/evict {A9C4E4}- To evict an renter.\n");
	strcat(stringh, "{FFFFFF}/evictall {A9C4E4}- To evict all the renters.\n");
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX,titleh,stringh,"Close","");
	return 1;
}

YCMD:sellhouse(playerid, params[], help)
{
	new id,price,string[128];
	if(PlayerData[playerid][HKey] == -1 || strcmp(PlayerData[playerid][Name], HouseInfo[PlayerData[playerid][HKey]][hOwner], true) != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house.");
	if(sscanf(params, "ui", id,price)) return SendUsage(playerid,"/sellhouse <Name/Playerid> <price>");
	
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You cannot sell house to yourself!");
	
	if(PlayerData[id][HKey] != -1 && strcmp(PlayerData[id][Name], HouseInfo[PlayerData[id][HKey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player already own a house.");	
	if(PlayerData[id][Cash] < price) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player doesn't have enough money!");
	
	format(string, sizeof(string), "* You offerd %s to buy your house for $%s .", PlayerData[id][Name], Decimal(price));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Owner %s offered you to buy his/her house for $%s (type /accept house %d) to buy.", PlayerData[playerid][Name], Decimal(price), playerid);
	SendClientMessage(id, COLOR_WHITE, string);
	
	OwnableHouseOffered[id] = playerid;
	OwnableHouseOffer[playerid] = id;
	OwnableHouseID[id] = PlayerData[playerid][HKey];
	OwnableHousePrice[id] = price;
	return 1;
}

YCMD:evict(playerid, params[], help)
{
	new id, string[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/evict <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[playerid][HKey] == -1 || strcmp(PlayerData[playerid][Name], HouseInfo[PlayerData[playerid][HKey]][hOwner], true) != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house.");
	if(PlayerData[playerid][HKey] != PlayerData[id][HKey]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't rent a room in your house.");
	
	PlayerData[id][HKey] = -1;
	mysql_format(SQL, string,128,"UPDATE `users` SET `HouseKey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][HKey],PlayerData[id][ID]);
	mysql_tquery(SQL, string, "", "");
	
	format(string, sizeof(string), "You evicted %s (%d).", PlayerData[id][Name], id);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:evictall(playerid, params[], help)
{
	new string[128], tenants = 0;
	if(PlayerData[playerid][HKey] == -1 || strcmp(PlayerData[playerid][Name], HouseInfo[PlayerData[playerid][HKey]][hOwner], true) != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house.");
	foreach(Player, i)
	{
		if(i != playerid)
		{
			if(PlayerData[playerid][HKey] == PlayerData[i][HKey])
			{
				PlayerData[i][HKey] = -1;
				mysql_format(SQL, string,128,"UPDATE `users` SET `HouseKey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[i][HKey],PlayerData[i][ID]);
				mysql_tquery(SQL, string, "", "");
				
				tenants += 1;
			}
		}
	}
	format(string, sizeof(string), "You evicted %d renters.", tenants);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:tenants(playerid, params[], help)
{
	new string[128], tenants = 0;
	if(PlayerData[playerid][HKey] == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You won't own/rent a house.");
	foreach(Player, i)
	{
		if(PlayerData[playerid][HKey] == PlayerData[i][HKey])
		{
			format(string, sizeof(string), "%s (%d)",PlayerData[i][Name],i);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			tenants += 1;
		}
	}
	format(string, sizeof(string), "There are %d tenants online.", tenants);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:rentroom(playerid, params[], help)
{
	new str[128];
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 1; h <= houses; h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
		{
			if(PlayerData[playerid][HKey] != -1 && strcmp(PlayerData[playerid][Name], HouseInfo[PlayerData[playerid][HKey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already own a house, type /sellhouse if you want to rent this one.");
			if(PlayerData[playerid][Cash] > HouseInfo[h][hRent])
			{
				PlayerData[playerid][HKey] = h;
				GivePlayerCash(playerid,-HouseInfo[h][hRent]);
				mysql_format(SQL, str,128,"UPDATE `users` SET `HouseKey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][HKey],PlayerData[playerid][ID]);
				mysql_tquery(SQL, str, "", "");
				
				HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
				mysql_format(SQL, str,128,"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'", HouseInfo[h][hTakings], h);
				mysql_tquery(SQL, str, "", "");
			
				SetPlayerInterior(playerid,HouseInfo[h][hInt]);
				SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
				GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit", 5000, 3);

				PlayerData[playerid][InHouse] = h;
				SendClientMessage(playerid, COLOR_WHITE, "Congratulations, You can enter and exit here anytime.");
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have the cash for that");
		}
	}
	return 1;
}

YCMD:housedeposit(playerid, params[], help)
{
	new name[25], amount;
	new bouse = PlayerData[playerid][HKey];
	if (bouse == -1 || strcmp(PlayerData[playerid][Name], HouseInfo[bouse][hOwner], true) != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house!");
	
	if(sscanf(params, "s[25]i", name, amount))
	{
		SendUsage(playerid,"/housedeposit <name> <amount>");
		SendUsage(playerid,"Avaiable names: money, drugs, mats.");
	}
	else
	{
		new str[512], string[128], money, drugs, mats;
		if(PlayerData[playerid][InHouse] != bouse) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your house.");
		if( strcmp ( name, "money" , true ) == 0 )
		{
			money = PlayerData[playerid][Cash];
			if(amount > money) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			
			HouseInfo[bouse][hTakings] += amount;
			GivePlayerCash(playerid, -amount);
			
			mysql_format(SQL, str,512,"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hTakings], bouse);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put $%s money in your house.",Decimal(amount));
			SendClientMessage(playerid, COLOR_YELLOW2, string);
		}
		if( strcmp ( name, "drugs" , true ) == 0 )
		{
			drugs = PlayerData[playerid][Drugs];
			if(amount > drugs) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs.");
			
			HouseInfo[bouse][hDrugs] += amount;
			PlayerData[playerid][Drugs] -= amount;
			
			mysql_format(SQL, str,512,"UPDATE `houses` SET `Drugs`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hDrugs], bouse);
			mysql_tquery(SQL, str, "", "");
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put %d drugs in your house.",amount);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
		}
		if( strcmp ( name, "mats" , true ) == 0 )
		{
			mats = PlayerData[playerid][Materials];
			if(amount > mats) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough mats.");
			
			HouseInfo[bouse][hMaterials] += amount;
			PlayerData[playerid][Materials] -= amount;
			
			mysql_format(SQL, str,512,"UPDATE `houses` SET `Materials`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hMaterials], bouse);
			mysql_tquery(SQL, str, "", "");
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Materials],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put %d materials in in your house.",amount);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
		}
	}
	return 1;
}

YCMD:housewithdraw(playerid, params[], help)
{
	new name[25], amount;
	new bouse = PlayerData[playerid][HKey];
	if (bouse == -1 || strcmp(PlayerData[playerid][Name], HouseInfo[bouse][hOwner], true) != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house!");
	
	if(sscanf(params, "s[25]i", name, amount))
	{
		SendUsage(playerid,"/housewithdraw <name> <amount>");
		SendUsage(playerid,"Avaiable names: money, drugs, mats.");
	}
	else
	{
		new str[512], string[128], money, drugs, mats;
		if(PlayerData[playerid][InHouse] != bouse) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in your house.");
		if( strcmp ( name, "money" , true ) == 0 )
		{
			money = HouseInfo[bouse][hTakings];
			if(amount > money) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			
			HouseInfo[bouse][hTakings] -= amount;
			GivePlayerCash(playerid, amount);
			
			mysql_format(SQL, str,512,"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hTakings], bouse);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put $%s money in your house.",Decimal(amount));
			SendClientMessage(playerid, COLOR_YELLOW2, string);
		}
		if( strcmp ( name, "drugs" , true ) == 0 )
		{
			drugs = HouseInfo[bouse][hDrugs];
			if(amount > drugs) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs.");
			
			HouseInfo[bouse][hDrugs] -= amount;
			PlayerData[playerid][Drugs] += amount;
			
			mysql_format(SQL, str,512,"UPDATE `houses` SET `Drugs`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hDrugs], bouse);
			mysql_tquery(SQL, str, "", "");
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put %d drugs in your house.",amount);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
		}
		if( strcmp ( name, "mats" , true ) == 0 )
		{
			mats = HouseInfo[bouse][hMaterials];
			if(amount > mats) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough mats.");
			
			HouseInfo[bouse][hMaterials] -= amount;
			PlayerData[playerid][Materials] += amount;
			
			mysql_format(SQL, str,512,"UPDATE `houses` SET `Materials`='%d' WHERE `ID`='%d'", HouseInfo[bouse][hMaterials], bouse);
			mysql_tquery(SQL, str, "", "");
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Materials],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put %d materials in in your house.",amount);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
		}
	}
	return 1;
}

YCMD:setrent(playerid, params[], help)
{
	new price, string[128];
	new bouse = PlayerData[playerid][HKey];
	if(sscanf(params, "i", price)) return SendUsage(playerid,"/setrent <price>");
	if (bouse != -1 && strcmp(PlayerData[playerid][Name], HouseInfo[bouse][hOwner], true) == 0)
	{
		if(price < 1 || price > 750) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Rent price can't be over $750 or under $1!");
		
		HouseInfo[bouse][hRent] = price;
		format(string, sizeof(string), "House rent set to %d.", HouseInfo[bouse][hRent]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		mysql_format(SQL, string, sizeof(string), "UPDATE houses SET Rent='%d' WHERE id=%d", HouseInfo[bouse][hRentabil], bouse);
		mysql_tquery(SQL, string, "", "");
		
		OnPropTextdrawUpdate(1, bouse);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house!");
	return 1;
}

YCMD:setrentable(playerid, params[], help)
{
	new statee, string[128];
	new bouse = PlayerData[playerid][HKey];
	if(sscanf(params, "i", statee)) return SendUsage(playerid,"/setrentable <0 - NO / 1 - YES>");
	if (bouse != -1 && strcmp(PlayerData[playerid][Name], HouseInfo[bouse][hOwner], true) == 0)
	{
		if(statee != 0 && statee != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Inalid state!");
		
		HouseInfo[bouse][hRentabil] = statee;
		format(string, sizeof(string), "House rentable set to %d.", HouseInfo[bouse][hRentabil]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		mysql_format(SQL, string, sizeof(string), "UPDATE houses SET Rentabil='%d' WHERE id=%d", HouseInfo[bouse][hRentabil], bouse);
		mysql_tquery(SQL, string, "", "");
		
		OnPropTextdrawUpdate(1, bouse);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't won a house!");
	return 1;
}

YCMD:leaderhelp(playerid, params[], help)
{
	new stringh[800], titleh[32];
	new leader = PlayerData[playerid][Leader];
	titleh = "Leader Commands";
	if(leader > 0)
	{
		stringh = "{FFFFFF}/members {A9C4E4}- Shows all your faction members.\n";
		strcat(stringh, "{FFFFFF}/invite {A9C4E4}- Invite a player in your faction.\n");
		strcat(stringh, "{FFFFFF}/uninvite {A9C4E4}- Remove a player from your faction.\n");
		strcat(stringh, "{FFFFFF}/fwarn {A9C4E4}- Give +1 FW to a player.\n");
		strcat(stringh, "{FFFFFF}/funwarn {A9C4E4}- Remove -1 FW from a player.\n");
		strcat(stringh, "{FFFFFF}/fvrespawn {A9C4E4}- Respawn all your faction vehicles.\n");
		strcat(stringh, "{FFFFFF}/fvspawn {A9C4E4}- Spawn a faction vehicle.\n");
		strcat(stringh, "{FFFFFF}/fwithdraw {A9C4E4}- Withdraw things from safebox.\n");
		strcat(stringh, "{FFFFFF}/fstats {A9C4E4}- Show your faction's safebox stats.\n");
	}
	else
	{
		stringh = "{FFFFFF}Error: {A9C4E4}Only leaders can use this command.\n";
	}
	ShowPlayerDialog(playerid,DIALOG_UNUSED, DIALOG_STYLE_MSGBOX,titleh,stringh,"Close","");
	return 1;
}


/*YCMD:debug(playerid, params[], help)
{
	new string[128],car;
	if(sscanf(params, "i", car)) return 1;
	{
		format(string,sizeof(string),"%d",FindSpawnID(car));
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
}*/

YCMD:debug(playerid, params[], help)
{
	new id;
	if(sscanf(params, "i", id)) return 1;
	{
		PlayerPlaySound(playerid, id, 0.0, 0.0, 0.0);
		return 1;
	}
}

YCMD:aspark(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:x,Float:y,Float:z;
	new Float:a;
	new carid;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in any vehicle!");
	new car = GetPlayerVehicleID(playerid);
	carid = FindSpawnID(car);
	GetVehiclePos(car, x, y, z);
	GetVehicleZAngle(car, a);
	CarInfo[carid][cLocationx] = x;
	CarInfo[carid][cLocationy] = y;
	CarInfo[carid][cLocationz] = z;
	CarInfo[carid][cAngle] = a;
 	DestroyVehicle(car);
  	CarInfo[carid][Spawned] = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],-1);
	
	SetTunning(carid);
	
    new str[128];
	mysql_format(SQL, str,128,"UPDATE cars SET Locationx= %f , Locationy= %f , Locationz= %f , Angle= %f WHERE  ID= %d",CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz],CarInfo[carid][cAngle],CarInfo[carid][cID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}
YCMD:check(playerid, params[], help)
{
	new id;
	if((PlayerData[playerid][Admin] + PlayerData[playerid][Helper]) == 0) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/check <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	ShowStats(playerid,id);
	return 1;
}

YCMD:o(playerid, params[], help)
{
	new message[128], string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/o <message>");
	format(string, sizeof(string), "(( %s: %s ))", PlayerData[playerid][Name], message);
	SendClientMessageToAll(COLOR_OOC, string);
	return 1;
}

YCMD:pm(playerid, params[], help)
{
	new id,message[128], string[256];
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, message)) return SendUsage(playerid,"/pm <Name/Playerid> <message>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(FindIP(message) || Findhtml(message))
	{
 		format(string, 256, "Warning: %s(%d) type on /pm: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,6);
	}
	format(string, sizeof(string), "PM from %s: %s", PlayerData[playerid][Name], message);
	SendClientMessage(id, COLOR_YELLOW, string);
	format(string, sizeof(string), "PM sent to %s : %s", PlayerData[id][Name], message);
	SendClientMessage(playerid,  COLOR_YELLOW, string);
	return 1;
}

YCMD:hc(playerid, params[], help)
{
	if((PlayerData[playerid][Admin] + PlayerData[playerid][Helper]) == 0) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new message[128], string[256];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/hc <message>");
	if(PlayerData[playerid][Helper] == 1 && PlayerData[playerid][Admin] == 0)
	{
		format(string, sizeof(string), "Helper %s: %s", PlayerData[playerid][Name], message);
		SendHelperMessage(COLOR_ADMCHAT, string);
	}
	else
	{
	    format(string, sizeof(string), "Admin %s: %s", PlayerData[playerid][Name], message);
		SendHelperMessage(COLOR_ADMCHAT, string);
	}
	return 1;
}

YCMD:a(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new message[128], string[256];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/a <message>");
	format(string, sizeof(string), "%d %s: %s", PlayerData[playerid][Admin], PlayerData[playerid][Name], message);
	SendAdminMessage(COLOR_ADMCHAT, string);
	return 1;
}

YCMD:mute(playerid, params[], help)
{
	new id,time,string[256], str[128];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ui", id, time)) return SendUsage(playerid,"/mute <Name/Playerid> <time(minutes)>");
	if(time < 0 || time > 200) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Mute time must be between 0 and 200 minutes!"); 
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Muted] == 0)
	{
		PlayerData[id][Muted] = 1;
		PlayerData[id][MutedTime] = time*60;
		format(string, sizeof(string), "%s was silenced by Admin %s for %d minutes.",PlayerData[id][Name], PlayerData[playerid][Name],time);
		ABroadCast(COLOR_BRED,string,1);
		format(string, sizeof(string), "Admin %s silenced you for %d minutes.",PlayerData[playerid][Name],time);
		SendClientMessage(id,COLOR_BRED, string);
		mysql_format(SQL, str,128,"UPDATE `users` SET `Muted`='1' ,`MutedTime`='%d' WHERE `id` = '%d' LIMIT 1",PlayerData[id][MutedTime],PlayerData[id][ID]);
		mysql_tquery(SQL, str, "", "");
	}
	else
	{
		PlayerData[id][Muted] = 0;
		PlayerData[id][MutedTime] = 0;
		format(string, sizeof(string), "%s was unsilenced by Admin %s.",PlayerData[id][Name], PlayerData[playerid][Name]);
		ABroadCast(COLOR_RED,string,1);
		format(string, sizeof(string), "Admin %s unsilenced you.",PlayerData[playerid][Name]);
		SendClientMessage(id,COLOR_BRED, string);
		mysql_format(SQL, str,128,"UPDATE `users` SET `Muted`='0' ,`MutedTime`='0' WHERE `id` = '%d' LIMIT 1",PlayerData[id][ID]);
		mysql_tquery(SQL, str, "", "");
	}
	return 1;
}

YCMD:mutetime(playerid, params[], help)
{
	if(help) SendHelp(playerid,"This command is used to show you, when you be able to speak again.");
	new string[256];
	if (PlayerData[playerid][MutedTime] == 0) return 1;
	new time = PlayerData[playerid][MutedTime]/60+1;
	format(string, sizeof(string), "Your Mute time will expire in %d minutes (%d seconds).", time, PlayerData[playerid][MutedTime]);
	SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
	return 1;
}

YCMD:weapons(playerid,params[], help)
{
	new string[256],id,sweapon,sammo;
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/weapons <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	SendClientMessage(playerid, COLOR_GREEN,"___________________________________________________");
	format(string,sizeof(string),"*** %s's weapons (Level: %d) ***",PlayerData[id][Name],PlayerData[id][Level]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	for (new i=0; i<12; i++)
	{
		GetPlayerWeaponData(id, i, sweapon, sammo);
		if(sweapon != 0)
		{
			new wtext[25];
			if(sweapon == 46){ wtext = "Parachute"; }
			else if(sweapon == 1){ wtext = "Brass Knuckles"; }
			else if(sweapon == 2){ wtext = "Golfclub"; }
			else if(sweapon == 3){ wtext = "Nightstick"; }
			else if(sweapon == 5){ wtext = "Naseballbat"; }
			else if(sweapon == 6){ wtext = "Shovel"; }
			else if(sweapon == 7){ wtext = "Poolcue"; }
			else if(sweapon == 10){ wtext = "Purple Dildo"; }
			else if(sweapon == 11){ wtext = "White Dildo"; }
			else if(sweapon == 12){ wtext = "Longwhite Dildo"; }
			else if(sweapon == 13){ wtext = "White Dildo II"; }
			else if(sweapon == 14){ wtext = "Flowers"; }
			else if(sweapon == 15){ wtext = "Cane"; }
			else if(sweapon == 23){ wtext = "SD Pistol"; }
			else if(sweapon == 24){ wtext = "Desert Eagle"; }
			else if(sweapon == 29){ wtext = "MP5"; }
			else if(sweapon == 25){ wtext = "Shotgun"; }
			else if(sweapon == 30){ wtext = "AK47"; }
			else if(sweapon == 31){ wtext = "M4"; }
			else if(sweapon == 33){ wtext = "Rifle"; }
			else if(sweapon == 4){ wtext = "Knife"; }
			else if(sweapon == 34){ wtext = "Sniper Rifle"; }
			else if(sweapon == 41){ wtext = "Spray"; }
			else if(sweapon == 42){ wtext = "Instinctor";}
			else if(sweapon == 43){ wtext = "Foto Camera"; }
			else { wtext = "Unknown weapon - cheats"; }
			format(string, sizeof(string), "{B4B5B7}Slot {FFFFFF}%d{B4B5B7}: {FFFFCC}%s {B4B5B7}({FFFFFF}%d {B4B5B7}ammo)", i, wtext, sammo);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	SendClientMessage(playerid, COLOR_GREEN,"___________________________________________________");
	return 1;
}

YCMD:muted(playerid, params[], help)
{
	new string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new count = 0;
	SendClientMessage(playerid, COLOR_YELLOW2, "* List of muted players:");
	foreach(Player, i)
	{
	    if(PlayerData[i][MutedTime] > 0)
	    {
			format(string, sizeof(string), "[%d]%s - Mute time left: [%d]", i,PlayerData[i][Name],PlayerData[i][MutedTime]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			count++;
		}
	}
	if(count == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"* Currently no muted players online.");
	return 1;
}

YCMD:getip(playerid, params[], help)
{
	new id,playersip[256],string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/getip <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	GetPlayerIp(id,playersip,sizeof(playersip));
	format(string, sizeof(string), "Player: %s (%d) IP: %s",PlayerData[id][Name],id,playersip);
	SendClientMessage(playerid,COLOR_GRAD2,string);
	return 1;
}

YCMD:teleport(playerid, params[], help)
{
	if (PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	ShowPlayerDialog(playerid, DIALOG_ATELEPORT, DIALOG_STYLE_LIST, "Teleport List", "Important Places\nHQ's\nOthers", "Teleport!", "Cancel");
	return 1;
}

YCMD:showlicenses(playerid, params[], help)
{
	new id;
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/showlicenses <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new text1[15], text2[15], text3[15], text4[15], text5[15], text6[15], string[128];
	if(PlayerData[playerid][CarLic] == 0) format(text1,sizeof(text1),"Not Passed");
		else format(text1,sizeof(text1),"Passed (%d)",PlayerData[playerid][CarLic]);
	if(PlayerData[playerid][FlyLic] == 0) format(text2,sizeof(text2),"Not Passed");
		else format(text2,sizeof(text2),"Passed (%d)",PlayerData[playerid][FlyLic]);
	if(PlayerData[playerid][BoatLic] == 0) format(text3,sizeof(text3),"Not Passed");
		else format(text3,sizeof(text3),"Passed (%d)",PlayerData[playerid][BoatLic]);
	if(PlayerData[playerid][FishLic] == 0) format(text4,sizeof(text4),"Not Passed");
		else format(text4,sizeof(text4),"Passed (%d)",PlayerData[playerid][FishLic]);
	if(PlayerData[playerid][GunLic] == 0) format(text5,sizeof(text5),"Not Passed");
		else format(text5,sizeof(text5),"Passed (%d)",PlayerData[playerid][GunLic]);
	if(PlayerData[playerid][MatsLic] == 0) format(text6,sizeof(text6),"Not Passed");
		else format(text6,sizeof(text6),"Passed (%d)",PlayerData[playerid][MatsLic]);

	format(string, sizeof(string), "|__________________ %s's licenses __________________|", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_WHITE, string);
	format(string, sizeof(string), "** Drivers License: %s.", text1);
	SendClientMessage(id, COLOR_GREY, string);
	format(string, sizeof(string), "** Flying License: %s.", text2);
	SendClientMessage(id, COLOR_GREY, string);
	format(string, sizeof(string), "** Sailing License: %s.", text3);
	SendClientMessage(id, COLOR_GREY, string);
	format(string, sizeof(string), "** Fishing License: %s.", text4);
	SendClientMessage(id, COLOR_GREY, string);
	format(string, sizeof(string), "** Weapon License: %s.", text5);
	SendClientMessage(id, COLOR_GREY, string);
	format(string, sizeof(string), "** Materials License: %s.", text6);
	SendClientMessage(id, COLOR_GREY, string);
	SendClientMessage(id, COLOR_WHITE, "|______________________________________________|");
	
	format(string, sizeof(string), "* %s takes out the licenses, and hands it to %s.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

YCMD:alicenses(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/alicenses <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new text1[15], text2[15], text3[15], text4[15], text5[15], text6[15], string[128];
	if(PlayerData[id][CarLic] == 0) format(text1,sizeof(text1),"Not Passed");
		else format(text1,sizeof(text1),"Passed (%d)",PlayerData[id][CarLic]);
	if(PlayerData[id][FlyLic] == 0) format(text2,sizeof(text2),"Not Passed");
		else format(text2,sizeof(text2),"Passed (%d)",PlayerData[id][FlyLic]);
	if(PlayerData[id][BoatLic] == 0) format(text3,sizeof(text3),"Not Passed");
		else format(text3,sizeof(text3),"Passed (%d)",PlayerData[id][BoatLic]);
	if(PlayerData[id][FishLic] == 0) format(text4,sizeof(text4),"Not Passed");
		else format(text4,sizeof(text4),"Passed (%d)",PlayerData[id][FishLic]);
	if(PlayerData[id][GunLic] == 0) format(text5,sizeof(text5),"Not Passed");
		else format(text5,sizeof(text5),"Passed (%d)",PlayerData[id][GunLic]);
	if(PlayerData[id][MatsLic] == 0) format(text6,sizeof(text6),"Not Passed");
		else format(text6,sizeof(text6),"Passed (%d)",PlayerData[id][MatsLic]);

	format(string, sizeof(string), "|__________________ %s's licenses __________________|", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "** Drivers License: %s.", text1);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Flying License: %s.", text2);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Sailing License: %s.", text3);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Fishing License: %s.", text4);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Weapon License: %s.", text5);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Materials License: %s.", text6);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
	
	return 1;
}

YCMD:cc(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	foreach(Player, i)
	{
		if(PlayerData[i][Admin] < 1)
		{
			for( new j = 0; j <= 500; j++)
			{
				SendClientMessage(i, COLOR_WHITE, "");
			}
		}
	}
	format(string, sizeof(string), "%s has clear chat.", PlayerData[playerid][Name]);
	ABroadCast(COLOR_RED,string,1);
	return 1;
}

YCMD:acc(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	foreach(Player, i)
	{
		if(PlayerData[i][Admin] > 0)
		{
			for( new j = 0; j <= 500; j++)
			{
				SendClientMessage(i, COLOR_WHITE, "");
			}
		}
	}
	format(string, sizeof(string), "%s has clear Admin-chat.", PlayerData[playerid][Name]);
	ABroadCast(COLOR_RED,string,1);
	return 1;
}

YCMD:up(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPos(playerid, slx, sly, slz+2); 
	return 1;
}

YCMD:dn(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPos(playerid, slx, sly, slz-2);
	return 1;
}

YCMD:lt(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPos(playerid, slx, sly+2, slz);
	return 1;
}

YCMD:rt(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPos(playerid, slx, sly-2, slz);
	return 1;
}

YCMD:fly(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:px, Float:py, Float:pz, Float:pa;
	GetPlayerFacingAngle(playerid,pa);
	if(pa >= 0.0 && pa <= 22.5) //n1
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px, py+30, pz+5);
	}
	if(pa >= 332.5 && pa < 0.0) //n2
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px, py+30, pz+5);
	}
	if(pa >= 22.5 && pa <= 67.5) //nw
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px-15, py+15, pz+5);
	}
	if(pa >= 67.5 && pa <= 112.5) //w
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px-30, py, pz+5);
	}
	if(pa >= 112.5 && pa <= 157.5) //sw
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px-15, py-15, pz+5);
	}
	if(pa >= 157.5 && pa <= 202.5) //s
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px, py-30, pz+5);
	}
	if(pa >= 202.5 && pa <= 247.5)//se
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px+15, py-15, pz+5);
	}
	if(pa >= 247.5 && pa <= 292.5)//e
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px+30, py, pz+5);
	}
	if(pa >= 292.5 && pa <= 332.5)//e
	{
		GetPlayerPos(playerid, px, py, pz);
		SetPlayerPos(playerid, px+15, py+15, pz+5);
	}
	return 1;
}

YCMD:warn(playerid, params[], help)
{
	new id, reason[128], string[256], sendername[25];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, reason)) return SendUsage(playerid,"/warn <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Admin] >= 1)
	{
		reason = "/warn admin";
		new time = 0;
		BanA(playerid,PlayerData[id][Name],reason,time,0,0);
		return 1;
	}
	format(string, sizeof(string), "You warned %s, reason: %s", PlayerData[id][Name], reason);
	SendClientMessage(playerid,COLOR_BRED,string);
	format(string, sizeof(string), "Admin %s warned you, reason: %s", PlayerData[playerid][Name], reason);
	SendClientMessage(id,COLOR_BRED,string);
	WarnLog(playerid,id,reason);
	format(string, sizeof(string), "AdmCmd: %s has been warned by %s, reason: %s", PlayerData[id][Name], PlayerData[playerid][Name], reason);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	PlayerData[id][Warns] += 1;
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `Warns`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[id][Warns],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	if(PlayerData[id][Warns] >= 3)
	{
		new time=3;
		sendername="AdmBot";
		reason="had 3 warnings";
		BanA(id,sendername,reason,time,1,0);
		PlayerData[id][Warns] = 0;
		mysql_format(SQL, str,128,"UPDATE `users` SET `Warns`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[id][Warns],PlayerData[id][ID]);
		mysql_tquery(SQL, str, "", "");
	}
	return 1;
}

YCMD:respawncar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[256];
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/respawncar <carid>");
	SetVehicleToRespawn(carid);
	format(string, sizeof(string), "You have respawn car %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:undercovered(playerid, params[], help)
{
	new string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	SendClientMessage(playerid, COLOR_GRAD1, "Undercovered hitmans:");
	foreach(Player, i)
	{
	    if(PlayerData[i][Disguise] >= 1)
	    {
			format(string, 256, "Name: %s (%d)", PlayerData[i][Name], i);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
	}
	return 1;
}

YCMD:weatherall(playerid, params[], help)
{
	new weatherid;
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "i", weatherid)) return SendUsage(playerid,"/weatherall <weatherid>");
	if(weatherid < 0||weatherid > 45) { SendClientMessage(playerid, COLOR_GREY, "Weather ID can't be below 0 or above 45 !"); return 1; }
	SetWeather(weatherid);
	SendClientMessage(playerid, COLOR_GREY, "Weather Set to everyone !");
	return 1;
}

YCMD:setjob(playerid, params[], help)
{
	new jobid,id,string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ui", id, jobid)) return SendUsage(playerid,"/setjob <Name/Playerid> <jobid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	PlayerData[id][Job] = jobid;
	format(string, 256, "%s has set %s job to ID %d.", PlayerData[playerid][Name],PlayerData[id][Name],jobid);
	ABroadCast(COLOR_GRAD1,string,1);
	SendClientMessage(playerid, COLOR_GRAD1, "   Job has been set successfuly !");
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `Job`='%d' WHERE `id` = '%d' LIMIT 1",PlayerData[id][Job],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:recon(playerid, params[], help)
{
	new id,string[512];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(!strcmp(params, "off", true))
	{
		if(!PlayerData[playerid][WatchingTV]) return SendClientMessage(playerid, COLOR_GREY, "You aren't spectating anybody.");
		PlayerData[playerid][WatchingTV] = 0;//
		PlayerData[PlayerData[playerid][Spectate]][SpectateP] = -1;
		PlayerData[playerid][Spectate] = -2;
		GameTextForPlayer(playerid, "~w~                Recon~n~~r~                Off", 5000, 6);
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		return 1;
	}
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/recon <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[playerid][Spectate] >= 0) PlayerData[PlayerData[playerid][Spectate]][SpectateP] = -1;
	PlayerData[playerid][Spectate] = id;
	PlayerData[id][SpectateP] = playerid;
	new intt, vww;
	new Float:health;
	GetPlayerHealth(id, health);
	new cash =  PlayerData[id][Cash];
	new level = PlayerData[id][Level];
	format(string, sizeof(string), "Recon: %s (%d) [Level: %d | Money: $%s | Health: %.0f]",PlayerData[id][Name],id,level,Decimal(cash),health);
	SendClientMessage(playerid, 0x5CAD5CAA, string);
	PlayerData[playerid][WatchingTV] = 1;
	TogglePlayerSpectating(playerid, 1);
	intt = GetPlayerInterior(id);
	vww = GetPlayerVirtualWorld(id);
	SetPlayerInterior(playerid,intt);
	SetPlayerVirtualWorld(playerid,vww);
	if(IsPlayerInAnyVehicle(id)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id), 1);
	else PlayerSpectatePlayer(playerid, id, 1);
	return 1;
}

YCMD:freeze(playerid, params[], help)
{
	new id,string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/freeze <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	TogglePlayerControllable(id, 0);
	format(string, sizeof(string), "AdmCmd: %s was frozen by %s",PlayerData[id][Name],PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:unfreeze(playerid, params[], help)
{
	new id,string[256];
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/unfreeze <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	TogglePlayerControllable(id, 1);
	format(string, sizeof(string), "AdmCmd: %s was unfrozen by %s",PlayerData[id][Name] ,PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:tognewbie(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 1) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128];
	if(nonewbie == 0)
	{
		nonewbie = 1;
		format(string, sizeof(string), "** Newbie chat has been disabled by %s!", PlayerData[playerid][Name]);
		foreach(Player, i)
		{
			if(PlayerData[i][Level] <= 5 || PlayerData[i][Admin] >= 1)
			{
				SendClientMessage(i, COLOR_NICERED, string);
			}
		}
	}
	else if(nonewbie == 1)
	{
		nonewbie = 0;
		format(string, sizeof(string), "** Newbie chat has been enabled by %s!", PlayerData[playerid][Name]);
		foreach(Player, i)
		{
			if(PlayerData[i][Level] <= 5 || PlayerData[i][Admin] >= 1)
			{
				SendClientMessage(i, COLOR_NICERED, string);
			}
		}
	}
	return 1;
}

/*

*/
YCMD:n(playerid, params[], help)
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/n <message>");
	if(FindIP(message) || Findhtml(message))
	{
	    format(string, 256, "Warning: %s(%d) type on /n: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	if(nonewbie == 1) return SendClientMessage(playerid, COLOR_WHITE, "The newbie chat is currently disabled.");
	if(PlayerData[playerid][nTime] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You must wait 15 seconds until your next message!");
	if(PlayerData[playerid][Muted] == 1) return SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
	if(PlayerData[playerid][Level] <= 7 || PlayerData[playerid][Admin] >= 1 || PlayerData[playerid][Helper] >= 1)
	{
	    if(PlayerData[playerid][Level] <= 7 && PlayerData[playerid][Admin] < 1 && PlayerData[playerid][Helper] < 1)
	    {
			format(string, sizeof(string), "*Player %s(%d): %s",PlayerData[playerid][Name],playerid, message);
			foreach(Player, i)
			{
				if(PlayerData[i][Level] <= 7 || PlayerData[i][Admin] >= 1 || PlayerData[i][Helper] >= 1)
				{
					SendCustomPlayerMessage(i, 0x62B382AA, string);
					PlayerData[playerid][nTime] = 1;
					SetTimerEx("NTime", 15 * 1000, 0, "%d", playerid);
				}
			}
		}
		else if(PlayerData[playerid][Admin] >= 1)
		{
		    format(string, sizeof(string), "*Admin %s: %s", PlayerData[playerid][Name], message);
			foreach(Player, i)
			{
				if(PlayerData[i][Level] <= 7 || PlayerData[i][Admin] >= 1 || PlayerData[i][Helper] >= 1)
				{
				    SendCustomPlayerMessage(i, 0x62B382AA, string);
				}
			}
		}
		else if(PlayerData[playerid][Helper] >= 1)
		{
		    format(string, sizeof(string), "*Helper %s: %s", PlayerData[playerid][Name], message);
			foreach(Player, i)
			{
				if(PlayerData[i][Level] <= 7 || PlayerData[i][Admin] >= 1 || PlayerData[i][Helper] >= 1)
				{
				    SendCustomPlayerMessage(i, 0x62B382AA, string);
				}
			}
		}
		return 1;
	}
	return 1;
}

YCMD:time(playerid, params[], help)
{
	new mtext[20],string[256];
	new year, month,day;
	getdate(year, month, day);
	if(month == 1) { mtext = "January"; }
	else if(month == 2) { mtext = "February"; }
	else if(month == 3) { mtext = "March"; }
	else if(month == 4) { mtext = "April"; }
	else if(month == 5) { mtext = "May"; }
	else if(month == 6) { mtext = "June"; }
	else if(month == 7) { mtext = "July"; }
	else if(month == 8) { mtext = "August"; }
	else if(month == 9) { mtext = "September"; }
	else if(month == 10) { mtext = "October"; }
	else if(month == 11) { mtext = "November"; }
	else if(month == 12) { mtext = "December"; }
	new hour,minuite,second;
	gettime(hour,minuite,second);
	if(PlayerData[playerid][JailTime] > 0 && PlayerData[playerid][Jailed] == 1)
	{
		format(string, sizeof(string), "~y~%02d %s~n~~g~|~w~%02d:%02d:%02d~g~|~n~~w~Jail Time Left: %02d sec", day, mtext, hour, minuite, second, PlayerData[playerid][JailTime]-10);
	}
	else
	{
		format(string, sizeof(string), "~y~%02d %s~n~~g~|~w~%02d:%02d:%02d~g~|", day, mtext, hour, minuite, second);
	}
	GameTextForPlayer(playerid, string, 5000, 1);
	format(string, sizeof(string), "* %s raises his/her hand and looks down at her watch.", PlayerData[playerid][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	return 1;
}

YCMD:jail(playerid, params[], help)
{
	new id, time, string[256];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ui", id, time)) return SendUsage(playerid,"/jail <Name/Playerid> <time(minutes)>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	format(string, sizeof(string), "* You Jailed %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "* You were Jailed by Admin %s.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTRED, string);
	
	ResetPlayerWeapons(id);
	
	PlayerData[id][Jailed] = 1;
	PlayerData[id][JailTime] = time * 60;
	
	PutPlayerInJail(id);
	
	format(string, sizeof(string), "You are jailed for %d minutes.", time);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
		
	new str[128];
	mysql_format(SQL,str,128,"UPDATE `users` SET `JailTime`='%d',`Jailed`='1' WHERE `id`='%d'",PlayerData[id][JailTime],PlayerData[id][ID]);
	mysql_tquery(SQL,str,"","");
	return 1;
}

YCMD:radaron(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	foreach(Player, i)
    {
		if(PlayerData[i][RadarUse] > 0)
		{
			format(string, sizeof(string), "** Officer %s | Limit: %d kmph **", PlayerData[i][Name], PlayerData[i][RadarUse]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

YCMD:disarm(playerid, params[], help)
{
	new id,string[256];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/disarm <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	ResetPlayerWeapons(id);
	format(string, sizeof(string), "AdmCmd: %s was disarmed by %s.", PlayerData[id][Name], PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:skydive(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new Float:rx, Float:ry, Float:rz;
	GetPlayerPos(playerid, rx, ry, rz);
	GivePlayerWeapon(playerid, 46, 0);
	SetPlayerPos(playerid,rx, ry, rz+1500);
	SendClientMessage(playerid, COLOR_WHITE, "GO!! GO!! GO!!");
	return 1;
}

YCMD:showfamily(playerid, params[], help)
{
	new family,string[128];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "i", family)) return SendUsage(playerid,"/showfamily <faction>");
	if(family > 16 || family < 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Faction number must be between 0 (0 = OFF) and 16.");
	PlayerData[playerid][SC] = family;
	format(string,sizeof(string),"Now you can see chat of faction %d",family);
	SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	return 1;
}

YCMD:cnn(playerid, params[], help)
{
	new message[128], string[256];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/cnn <message>");
	format(string, sizeof(string), "~b~%s: ~w~%s",PlayerData[playerid][Name],message);
	foreach(Player, i)
	{
		GameTextForPlayer(i, string, 5000, 6);
	}
	return 1;
}

YCMD:setint(playerid, params[], help)
{
	new id,intid,string[256];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ui", id, intid)) return SendUsage(playerid,"/setint <Name/Playerid> <interiorid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	SetPlayerInterior(id,intid);
	format(string, sizeof(string), "%s's interior has been set to %d by %s.", PlayerData[id][Name], intid, PlayerData[playerid][Name]);
	ABroadCast(COLOR_1GREEN,string,1);
	return 1;
}

YCMD:setvw(playerid, params[], help)
{
	new id,intid,string[256];
	if(PlayerData[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ui", id, intid)) return SendUsage(playerid,"/setvw <Name/Playerid> <interiorid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	SetPlayerVirtualWorld(id, intid);
	format(string, sizeof(string), "%s's virtual world has been set to %d by %s.", PlayerData[id][Name], intid, PlayerData[playerid][Name]);
	ABroadCast(COLOR_1GREEN,string,1);
	return 1;
}

YCMD:gotocar(playerid, params[], help)
{
	new string[256],carid;
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/gotocar <carid>");
	new Float:cwx2,Float:cwy2,Float:cwz2;
	GetVehiclePos(carid, cwx2, cwy2, cwz2);
	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
	}
	else
	{
		SetPlayerPos(playerid, cwx2, cwy2, cwz2);
	}
	format(string, sizeof(string), "You have been teleported to car: %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:getcar(playerid, params[], help)
{
	new string[256],carid;
	new Float:plocx,Float:plocy,Float:plocz;
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/getcar <carid>");
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehiclePos(carid,plocx,plocy+4, plocz);
	format(string, sizeof(string), "You have been teleported car %d to your position.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:entercar(playerid,params[], help)
{
	new seatid, carid;
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ii", carid, seatid)) return SendUsage(playerid,"/entercar <carid> <seatid>");
	if(seatid==0)
	{
		PutPlayerInVehicle(playerid, carid, 0); 
		SendClientMessage(playerid, COLOR_YELLOW2, "You have been teleported in car as Driver!"); 
		return 1; 
	}
	if(seatid==1)
	{
		PutPlayerInVehicle(playerid, carid, 1); 
		SendClientMessage(playerid, COLOR_YELLOW2, "You have been teleported in car as Passager!"); 
		return 1; 
	}
	return 1;
}

YCMD:fuelcars(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	for(new c=0; c < MAX_VEHICLES; c++)
	{
		Gas[c] = GasMax;
	}
	SendClientMessage(playerid, COLOR_YELLOW2, "All cars filled with Fuel ! ");
	return 1;
}

YCMD:respawn(playerid,params[], help)
{
	new id,string[256];
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/respawn <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	SpawnPlayer(id);
	format(string, sizeof(string), "* You have respawned player %s", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	format(string, sizeof(string), "* You have been respawned by Admin %s", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTRED, string);
	return 1;
}

YCMD:setcarint(playerid, params[], help)
{
	new string[256],carid,cint;
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "ii", carid,cint)) return SendUsage(playerid,"/setcarint <carid> <interior>");
	LinkVehicleToInterior(carid,cint);
	format(string, sizeof(string), "You have linked car %d to interior %d.",carid,cint);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:noscar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[256];
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/noscar <carid>");
	AddVehicleComponent(carid, 1010);
	format(string, sizeof(string), "You have put nos at car %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:hidracar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[256];
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/hidracar <carid>");
	AddVehicleComponent(carid, 1087);
	format(string, sizeof(string), "You have put hydraulics at car %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:flipcar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[256];
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/flipcar <carid>");
	new Float:angle;
	GetVehicleZAngle(carid, angle);
	SetVehicleZAngle(carid, angle);
	format(string, sizeof(string), "You have flip car %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
}

YCMD:speedcar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[256],speed;
	if(sscanf(params, "ii", carid,speed)) return SendUsage(playerid,"/speedcar <carid> <speed>");
	SetVehicleSpeed(carid,speed);
	format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has set speed %d at car %d !",PlayerData[playerid][Name],speed,carid);
    ABroadCast(COLOR_WHITE,string,6);
	format(string, sizeof(string), "You have speed %d at car %d.",speed,carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:repaircar(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[256];
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/repaircar <carid>");
	SetVehicleHealth(carid, 1000.0);
	RepairVehicle(carid);
	format(string, sizeof(string), "You have repair car %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:colorcar(playerid,params[], help)
{
	new carid,color1,color2;
	if(PlayerData[playerid][Admin] < 3) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "iii", carid,color1,color2)) return SendUsage(playerid,"/colorcar <carid> <color1> <color2>");
	ChangeVehicleColor(carid, color1, color2);
	SendClientMessage(playerid, COLOR_YELLOW2, "You've change car colors.");
	return 1;
}

YCMD:mole(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new message[256],string[256];
	if(sscanf(params, "s[256]", message)) return SendUsage(playerid,"/mole <message>");
	format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)",message);
	SendClientMessageToAll(COLOR_YELLOW,string);
	return 1;
}

YCMD:sbiz(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new sbiz;
	if(sscanf(params, "i", sbiz)) return SendUsage(playerid,"/sbiz <number>");
	SetPlayerInterior(playerid,SBizzInfo[sbiz][sbInterior]);
	SetPlayerPos(playerid,SBizzInfo[sbiz][sbEntranceX],SBizzInfo[sbiz][sbEntranceY],SBizzInfo[sbiz][sbEntranceZ]);
	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	return 1;
}

YCMD:buy(playerid, params[], help)
{//
	if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in 24/7");
	ShowPlayerDialog(playerid,DIALOG_BUY,DIALOG_STYLE_LIST,"24/7 Menu","1. Cell Phone ($50)\n2. Dice ($10)\n3. Gas Can ($50)\n4. Camera ($30)","Buy","Close");
	return 1;
}

YCMD:dice(playerid, params[], help)
{
    new string[128];
	new dice = random(6)+1;
	if (Dice[playerid] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a dice.");

	format(string, sizeof(string), "* %s throws a dice that lands on %d", PlayerData[playerid][Name],dice);
	ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
	return 1;
}

YCMD:fill(playerid, params[], help)
{
	new string[128], liters, str[128];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a vehicle.");
	new vehid = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(PecoInfo); i++)
	{
        if(PlayerToPoint(20, playerid, PecoInfo[i][peExitX], PecoInfo[i][peExitY], PecoInfo[i][peExitZ]))
		{
            if(PecoInfo[i][peLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
			if(PecoInfo[i][peProducts] == 0) return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
			if(sscanf(params, "i", liters)) return SendUsage(playerid,"/fill <amount of fuel (1 - 99)>");
		    if(liters < 1 || liters > 99) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid number!");
			if(Gas[vehid] + liters > 100) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't fill more than 100 percent!");
			new e,l,a,d,b,bo,o;
			GetVehicleParamsEx(vehid,e,l,a,d,b,bo,o);
			if(e == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please turn off your engine!");
			new FillPrice = PecoInfo[i][peEntranceCost] * liters;
			if(PlayerData[playerid][Cash] < FillPrice)
			{
			    format(string, sizeof(string), "{FFFFCC}Error: You need $%d to fill %d liters ($%d / L).", FillPrice, liters, PecoInfo[i][peEntranceCost]);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    return 1;
			}
			GivePlayerCash(playerid, -FillPrice);
			Gas[vehid] += float(liters);
			
			PecoInfo[i][peTill] += FillPrice;
			PecoInfo[i][peProducts] -= liters;
			
			mysql_format(SQL, str, 128,"UPDATE `pecos` SET `Till`='%d',`Products`='%d' WHERE `ID`='%d'",PecoInfo[i][peTill], PecoInfo[i][peProducts], PecoInfo[i][peID]);
			mysql_tquery(SQL, str, "", "");
		}
	}
	return 1;
}

YCMD:fillcar(playerid, params[], help)
{
	new query[128];
    if(PlayerData[playerid][Fuel] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You have no fuel left in your gas can!");
   	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not in a vehicle.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(Gas[tmpcar] > 90) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your car still got enough fuel to drive with.");

	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*You filled your car with 10 percent fuel from your gas can.");
	Gas[tmpcar] += 10;
	
	PlayerData[playerid][Fuel] -= 10;

	mysql_format(SQL, query, 128,"UPDATE `users` SET `Fuel`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Fuel],PlayerData[playerid][ID]);
	mysql_tquery(SQL, query, "", "");
	
	return 1;
}
/*
if(strcmp(cmd, "/fillcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerData[playerid][pFuel] > 0)
		    {
		        if(Gas[LastCar[playerid]] < 81)
		        {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "   You filled your car with 20 percent Fuel from your Gas Can.");
			        Gas[LastCar[playerid]] += 20;
			        PlayerData[playerid][pFuel] = 0;
			        Update(playerid, pFuelx);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Your Car still got enough Fuel to drive with !");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You have no Fuel left in your Gas Can !");
		    }
		}
		return 1;
	}
*/
YCMD:biz(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new biz;
	if(sscanf(params, "i", biz)) return SendUsage(playerid,"/biz <number>");
	SetPlayerInterior(playerid,BizzInfo[biz][bInterior]);
	SetPlayerPos(playerid,BizzInfo[biz][bExitX],BizzInfo[biz][bExitY],BizzInfo[biz][bExitZ]);
	PlayerData[playerid][InBizz] = biz;
	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	return 1;
}

YCMD:house(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new hid;
	if(sscanf(params, "i", hid)) return SendUsage(playerid,"/house <house number>");
	SetPlayerInterior(playerid,HouseInfo[hid][hInt]);
	SetPlayerPos(playerid,HouseInfo[hid][hExitx],HouseInfo[hid][hExity],HouseInfo[hid][hExitz]);
	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	PlayerData[playerid][InHouse] = hid;
	return 1;
}

YCMD:houseo(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new hid;
	if(sscanf(params, "i", hid)) return SendUsage(playerid,"/houseo <house number>");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid,HouseInfo[hid][hEntrancex],HouseInfo[hid][hEntrancey],HouseInfo[hid][hEntrancez]);
	GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
	return 1;
}

YCMD:tod(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new hour,string[256];
	if(sscanf(params, "i", hour)) return SendUsage(playerid,"/tod <hour>");
	SetWorldTime(hour);
	format(string, sizeof(string), "Time set to %d Hours.", hour);
	SendClientMessageToAll(COLOR_GRAD1, string);
	return 1;
}

YCMD:setskin(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, string[256],skin,str[128];
	if(sscanf(params, "ui", id,skin)) return SendUsage(playerid,"/setskin <Name/Playerid> <skin id>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(skin > 300 || skin < 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid skin id.");
	format(string, sizeof(string), "You set %s's skin to %d.", PlayerData[id][Name], skin);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	PlayerData[id][Char] = skin;
	mysql_format(SQL, str,128,"UPDATE `users` SET `Chara`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[id][Char],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	SetPlayerSkin(id, skin);
	return 1;
}

YCMD:sethp(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, string[256], health;
	if(sscanf(params, "ui", id,health)) return SendUsage(playerid,"/sethp <Name/Playerid> <health>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	SetPlayerHealth(id, health);
	format(string, sizeof(string), "AdmCmd: %s's health was set to %d by %s.", PlayerData[id][Name], health, PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:setarmor(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, string[256], health;
	if(sscanf(params, "ui", id,health)) return SendUsage(playerid,"/setarmor <Name/Playerid> <armor>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	SetPlayerArmour(id, health);
	format(string, sizeof(string), "AdmCmd: %s's armor was set to %d to %s.", PlayerData[id][Name], health, PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	return 1;
}

YCMD:healall(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new range,string[256];
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(sscanf(params, "i", range)) return SendUsage(playerid,"/healall <range>");
	format(string, sizeof(string), "AdmCmd: %s has healed everyone (range: %d)", PlayerData[playerid][Name],range);
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(GetDistanceBetweenPlayers(playerid, i) < range)
			{
				SetPlayerHealth(i,100.0);
				SendClientMessage(i,COLOR_LIGHTRED,string);
			}
		}
	}	
	return 1;
}

YCMD:disarmrange(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new range,string[256];
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(sscanf(params, "i", range)) return SendUsage(playerid,"/disarmrange <range>");
	format(string, sizeof(string), "AdmCmd: %s has disarmed all players (range: %d)", PlayerData[playerid][Name],range);
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(GetDistanceBetweenPlayers(playerid, i) < range)
			{
				ResetPlayerWeapons(i);
				SendClientMessage(i,COLOR_LIGHTRED,string);
			}
		}
	}	
	return 1;
}

YCMD:agivelicense(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new x_nr[32],str[128],string[256],id;
	if(sscanf(params, "s[32]u",x_nr,id)) 		
	{
		SendUsage(playerid,"/agl <license name> <Name/Playerid>");
		SendUsage(playerid,"Available names: Driving, Pilots, Sailing, Fishing, Weapon, Materials");
	}
	else
	{
    	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		if(strcmp(x_nr,"driving",true) == 0)
		{
		    format(string, sizeof(string), "* %s has recieved driving license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has gave you driving license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][CarLic] = 300;
			mysql_format(SQL, str, 128, "UPDATE `users` SET `CarLic`='300' WHERE `id`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"pilots",true) == 0)
		{
		    format(string, sizeof(string), "* %s has recieved flying license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has gave you flying license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][FlyLic] = 300;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `FlyLic`='300' WHERE `id`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"sailing",true) == 0)
		{
		    format(string, sizeof(string), "* %s has recieved sailing license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has gave you sailing license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][BoatLic] = 300;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `BoatLic`='300' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"fishing",true) == 0)
		{
		    format(string, sizeof(string), "* %s has recieved fishing license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has gave you fishing license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][FishLic] = 300;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `FishLic`='300' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"weapon",true) == 0)
		{
		    format(string, sizeof(string), "* %s has recieved weapon license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has gave you weapon license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][GunLic] = 300;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `GunLic`='300' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"materials",true) == 0)
		{
			format(string, sizeof(string), "* %s has recieved materials license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has gave you materials license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][MatsLic] = 300;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `MatsLic`='300' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
	}
	return 1;
}

YCMD:atakelicense(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 4) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new x_nr[32],str[128],string[256],id;
	if(sscanf(params, "s[32]u",x_nr,id)) 		
	{
		SendUsage(playerid,"/atl <license name> <Name/Playerid>");
		SendUsage(playerid,"Available names: Driving, Pilots, Sailing, Fishing, Weapon, Materials");
	}
	else
	{
    	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		if(strcmp(x_nr,"driving",true) == 0)
		{
		    format(string, sizeof(string), "*You have taken away %s's driving license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has taken away your driving license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][CarLic] = 0;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `CarLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"pilots",true) == 0)
		{
		    format(string, sizeof(string), "*You have taken away %s's flying license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has taken away your flying license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][FlyLic] = 0;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `FlyLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"sailing",true) == 0)
		{
		    format(string, sizeof(string), "*You have taken away %s's sailing license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has taken away your sailing license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][BoatLic] = 0;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `BoatLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"fishing",true) == 0)
		{
		    format(string, sizeof(string), "*You have taken away %s's fishing license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has taken away your fishing license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][FishLic] = 0;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `FishLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"weapon",true) == 0)
		{
		    format(string, sizeof(string), "*You have taken away %s's weapon license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has taken away your weapon license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][GunLic] = 0;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `GunLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else if(strcmp(x_nr,"materials",true) == 0)
		{
		    format(string, sizeof(string), "*You have taken away %s's materials license.",PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "AdmCmd: Admin %s has taken away your materials license.",PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTRED, string);
			PlayerData[id][MatsLic] = 0;
			mysql_format(SQL, str, 128,"UPDATE `users` SET `MatsLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
	}
	return 1;
}

YCMD:unbanip(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new ip[16],string[128],str[128];
	if(sscanf(params, "s[16]", ip)) return SendUsage(playerid,"/unbanip <player ip>");
	format(string,sizeof(string),"unbanip %s",ip);
	SendRconCommand(string);
	SendRconCommand("reloadbans");
	format(string, sizeof(string), "IP %s has been unbanned from samp.ban",ip);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	mysql_format(SQL, str, 128,"UPDATE `bans` SET `ip`='0' WHERE `ip`='%s' LIMIT 1",ip);
	mysql_tquery(SQL, str, "", "");
	format(string, sizeof(string), "IP %s has been unbanned from MySQL",ip);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	return 1;
}

YCMD:unwarn(playerid, params[], help)
{
	new id, reason[128], string[256];
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[128]", id, reason)) return SendUsage(playerid,"/unwarn <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	format(string, sizeof(string), "You unwarned %s, reason: %s", PlayerData[id][Name], reason);
	SendClientMessage(playerid,COLOR_BRED,string);
	format(string, sizeof(string), "Admin %s unwarned you, reason: %s", PlayerData[playerid][Name], reason);
	SendClientMessage(playerid,COLOR_BRED,string);
	UnWarnLog(playerid,id,string);
	format(string, sizeof(string), "AdmCmd: %s has been unwarned by %s, reason: %s", PlayerData[id][Name], PlayerData[playerid][Name], reason);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	PlayerData[id][Warns] -= 1;
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `Warns`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Warns],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:unlockcar(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid,string[128],engine,lights,alarm,doors,bonnet,boot,objective;
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/unlockcar <carid>");
	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(doors == 1)
	{
		format(string, sizeof(string), "Car %d has been unlocked.",carid);
		SendClientMessage(playerid, COLOR_YELLOW2, string);
		SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
	}
	else
	{
		format(string, sizeof(string), "Car %d has been locked.",carid);
		SendClientMessage(playerid, COLOR_YELLOW2, string);
		SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
	}
	return 1;
}

YCMD:recons(playerid, params[], help)
{
	new string[256];
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new count = 0;
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Recons:");
	foreach(Player, i)
	{
	    if(PlayerData[i][WatchingTV] == 1)
	    {
	        format(string, sizeof(string), " - %s(%d) on %s(%d)",PlayerData[i][Name],i,PlayerData[PlayerData[i][Spectate]][Name],PlayerData[i][Spectate]);
			SendClientMessage(playerid,COLOR_WHITE,string);
			count++;
		}
	}
	if(count == 0)
	{
		SendClientMessage(playerid,COLOR_LIGHTRED,"* There are no active admins.");
	}
	return 1;
}

YCMD:exp(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/exp <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new Float:X,Float:Y,Float:Z;
	if(IsPlayerInAnyVehicle(id))
	{
		GetVehiclePos(GetPlayerVehicleID(id),X,Y,Z);
		CreateExplosion(X,Y,Z,10,0);
		SetPlayerHealth(id, 0);
		SetVehicleHealth(GetPlayerVehicleID(id),0);
	}
	else
	{
		GetPlayerPos(id,X,Y,Z);
		CreateExplosion(X,Y,Z,10,0);
		SetPlayerHealth(id, 0);
	}
	return 1;
}

YCMD:givegunrange(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new gun,ammo,string[128],range;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(sscanf(params, "iii", gun,ammo,range)) return SendUsage(playerid,"/givegunrange <weapon> <ammo> <range>");
	if(gun < 1 || gun > 46) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid weapon id.");
	if(ammo < 1 || ammo > 10000) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid number of ammo.");
	format(string, sizeof(string), "AdmCmd: %s has given gun id %d with %d ammo to all players (range: %d)", PlayerData[playerid][Name],gun,ammo,range);
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInRangeOfPoint(i,range*1000,x,y,z))
			{
				SendClientMessage(i,COLOR_LIGHTRED,string);
				GivePlayerWeapon(i, gun, ammo);
			}
		}
	}
  	return 1;
}

YCMD:uninvite(playerid, params[], help)
{
	if (PlayerData[playerid][Leader] < 1 && PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't a leader or your admin level is too low.");
	new id, fp,string[256], str[256], reason[25];
	if(sscanf(params, "uis[25]", id, fp, reason)) return SendUsage(playerid,"/uninvite <Name/Playerid> <FPunish(1=YES/0=NO)> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");      
	if (PlayerData[id][Member] == 0 || ((PlayerData[id][Member] != PlayerData[playerid][Leader]) && (PlayerData[playerid][Admin] < 5))) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't in your faction.");
	if(fp==0){ PlayerData[id][FPunish] = 0;	FactionLog(playerid,id,PlayerData[playerid][Leader],"Left the faction",reason);}
	if(fp==1){ PlayerData[id][FPunish] = 30; FactionLog(playerid,id,PlayerData[playerid][Leader],"Was kicked out (with FP)",reason);}
	format(string, sizeof(string), "{00B8E6}Leader %s kicked you from your faction. You are now a civillian.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_WHITE, string);
	format(string, sizeof(string), "{00B8E6}Reason: %s", reason);
	SendClientMessage(id, COLOR_WHITE, string);
	
	PlayerData[id][Member] = 0;
	PlayerData[id][Rank] = 0;
	PlayerData[id][Char] = 47;
	PlayerData[id][FacWarns] = 0;
	PlayerData[id][OnDuty] = 0;
	PlayerData[id][SpawnChange] = 0;
	
	SetPlayerSkin(id,PlayerData[id][Char]);
	SetPlayerFColor(id);
	SpawnPlayer(id);
	format(string, sizeof(string), "You kicked out %s from your faction.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Reason: %s", reason);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	ResetPlayerWeapons(id);
	mysql_format(SQL,str,256,"UPDATE `users` SET `Member`='0',`Rank`='0',`Chara`='47',`FPunish`='%d',`FacWarns`='0',`SpawnChange`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][FPunish],PlayerData[id][ID]);
	mysql_tquery(SQL,str, "", "");
	
	if(PlayerData[playerid][Leader] >= 2 && PlayerData[playerid][Leader] <= 4)
	{
		for(new idt = 1; idt <= turfss; idt++)
		{
			GangZoneHideForPlayer(playerid, Turfs[idt]);
		}
		PlayerData[playerid][OnDuty] = 0;
	}
	return 1;
}

YCMD:safeboxstats(playerid, params[], help)
{
	new string[144];
    if(PlayerData[playerid][Leader] == 0) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
    new i = PlayerData[playerid][Leader];
    format(string, sizeof(string), "ID: {FFFFFF}%d{A9C4E4} | Money: {FFFFFF}$%s{A9C4E4} | Drugs: {FFFFFF}%d{A9C4E4} | Materials: {FFFFFF}%d{A9C4E4}", SafeBox[i][sbID], Decimal(SafeBox[i][sbMoney]), SafeBox[i][sbDrugs], SafeBox[i][sbMats]);
	SendClientMessage(playerid,COLOR_WHITE,string);
	return 1;
}

YCMD:buygun(playerid, params[], help)
{
	if(PlayerData[playerid][Cash] < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You dont have enough money with you!");
	if(PlayerData[playerid][GunLic] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You dont have the weapons license!");
	if(PlayerData[playerid][InBizz] != 23) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You arent in the Gun Shop!");
	new gun, gunid[16], gunstring1[256], gunstring2[256], gunstring3[256], gunstring4[256], infostring[256], guncharge, ammocharge, ammo, string[128];
	new location = PlayerData[playerid][InBizz];
	if(sscanf(params, "s[25]i", gunid, ammo))
	{
		SendUsage(playerid,"/buygun <gun name> <ammo>");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE,"=> Guns & Ammo <=");
		SendClientMessage(playerid, COLOR_GRAD2,string);
		format(gunstring1, 256, "Weapons: parachute ($%d) baseballbat ($%d) shovel ($%d)",
		BizzInfo[location][bGunPrice]*500/100,BizzInfo[location][bGunPrice]*200/100,BizzInfo[location][bGunPrice]*300/100);
		SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
		format(gunstring2, 256, "Weapons: purpledildo ($%d) whitedildo ($%d) longwhitedildo ($%d) whitedildo2 ($%d) flowers ($%d) cane",
		BizzInfo[location][bGunPrice]*400/100,BizzInfo[location][bGunPrice]*780/100,BizzInfo[location][bGunPrice]*560/100,BizzInfo[location][bGunPrice]*530/100,BizzInfo[location][bGunPrice]*200/100,BizzInfo[location][bGunPrice]*600);
		SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
		format(gunstring3, 256, "Weapons: sdpistol ($%d) deagle ($%d) mp5 ($%d)",
		BizzInfo[location][bGunPrice]*500/100,BizzInfo[location][bGunPrice]*1000/100,BizzInfo[location][bGunPrice]*3000/100,BizzInfo[location][bGunPrice]*2000/100,BizzInfo[location][bGunPrice]*3000/100,BizzInfo[location][bGunPrice]*2500);
		SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
		format(gunstring4, 256, "Weapons: shotgun ($%d) ak47 ($%d) m4 ($%d) rifle ($%d)",
		BizzInfo[location][bGunPrice]*3000/100,BizzInfo[location][bGunPrice]*6000/100,BizzInfo[location][bGunPrice]*4000/100,BizzInfo[location][bGunPrice]*5000/100,BizzInfo[location][bGunPrice]*5000/100,BizzInfo[location][bGunPrice]*1000);
		SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
	else
	{
	    if(ammo < 1 || ammo > 999) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Ammo ammount not lower then 1 or higher then 999!");
	    if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
		{
			gun = 46;
			guncharge = BizzInfo[location][bGunPrice]*500;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "baseballbat", true, strlen(gunid)) == 0)
		{
			gun = 5; guncharge = BizzInfo[location][bGunPrice]*700/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "shovel", true, strlen(gunid)) == 0)
		{
			gun = 6; guncharge = BizzInfo[location][bGunPrice]*300/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "purpledildo", true, strlen(gunid)) == 0)
		{
			gun = 10; guncharge = BizzInfo[location][bGunPrice]*400/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "whitedildo", true, strlen(gunid)) == 0)
		{
			gun = 11; guncharge = BizzInfo[location][bGunPrice]*780/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "longwhitedildo", true, strlen(gunid)) == 0)
		{
			gun = 12; guncharge = BizzInfo[location][bGunPrice]*560/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "whitedildo2", true, strlen(gunid)) == 0)
		{
			gun = 13; guncharge = BizzInfo[location][bGunPrice]*530/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "flowers", true, strlen(gunid)) == 0)
		{
			gun = 14; guncharge = BizzInfo[location][bGunPrice]*200/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
		{
			gun = 15; guncharge = BizzInfo[location][bGunPrice]*600/100; ammocharge = 0;
		}
		else if (strcmp(gunid, "sdpistol", true, strlen(gunid)) == 0)
		{
			gun = 23; guncharge = BizzInfo[location][bGunPrice]*500/100; ammocharge = BizzInfo[location][bGunPrice]*25/100*ammo;
		}
		else if (strcmp(gunid, "deagle", true, strlen(gunid)) == 0)
		{
			gun = 24; guncharge = BizzInfo[location][bGunPrice]*3000/100; ammocharge = BizzInfo[location][bGunPrice]*25/100*ammo;
		}
		else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
		{
			gun = 29; guncharge = BizzInfo[location][bGunPrice]*2500/100; ammocharge = BizzInfo[location][bGunPrice]*25/100*ammo;
		}
		else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
		{
			gun = 25; guncharge = BizzInfo[location][bGunPrice]*3000/100; ammocharge = BizzInfo[location][bGunPrice]*40/100*ammo;
		}
		else if (strcmp(gunid, "ak47", true, strlen(gunid)) == 0)
		{
			gun = 30; guncharge = BizzInfo[location][bGunPrice]*5000/100; ammocharge = BizzInfo[location][bGunPrice]*40/100*ammo;
		}
		else if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
		{
			gun = 31; guncharge = BizzInfo[location][bGunPrice]*5000/100; ammocharge = BizzInfo[location][bGunPrice]*40/100*ammo;
		}
		else if (strcmp(gunid, "rifle", true, strlen(gunid)) == 0)
		{
			gun = 33; guncharge = BizzInfo[location][bGunPrice]*1000/100; ammocharge = BizzInfo[location][bGunPrice]*50/100*ammo;
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid weapon name.");
		if(PlayerData[playerid][Cash] < (guncharge+ammocharge)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Can't afford that!");
		new payout = guncharge + ammocharge;
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,payout);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);

		GivePlayerCash(playerid, - payout);
		
		SafeBox[5][sbMoney] += payout;
		mysql_format(SQL, string,128,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[5][sbMoney],5);
		mysql_tquery(SQL, string, "", "");
		
		GivePlayerWeapon(playerid, gun, ammo);
	}
	return 1;
}
YCMD:fdeposit(playerid, params[], help)
{
	new name[25], amount;
	new leader = PlayerData[playerid][Leader];
    new member = PlayerData[playerid][Member];
	if((leader+member)==0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not a member / leader of a faction.");
	if(sscanf(params, "s[25]i", name, amount))
	{
		SendUsage(playerid,"/fdeposit <name> <amount>");
		SendUsage(playerid,"Avaiable names: money, drugs, mats.");
	}
	else
	{
		new str[512], string[128], money, drugs, mats;
		new box = leader+member;
		if(PlayerData[playerid][InHQ] == -1 && box != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near a safebox.");
		if(box == 1 && PlayerData[playerid][InBizz] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near a safebox.");
		if( strcmp ( name, "money" , true ) == 0 )
		{
			money = PlayerData[playerid][Cash];
			if(amount > money) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			SafeBox[box][sbMoney] += amount;
			GivePlayerCash(playerid, -amount);
			
			mysql_format(SQL, str,512,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[box][sbMoney],box);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put $%s money in safebox %d.",Decimal(amount),box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
            format(string, sizeof(string), "deposit %s money.",Decimal(amount));
			SafeboxLog(box,playerid,string);
		}
		if( strcmp ( name, "drugs" , true ) == 0 )
		{
			drugs = PlayerData[playerid][Drugs];
			if(amount > drugs) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs.");
			SafeBox[box][sbDrugs] += amount;
			PlayerData[playerid][Drugs] -= amount;
			
			format(str,512,"UPDATE `safeboxs` SET `Drugs`='%d' WHERE `ID`='%d'",SafeBox[box][sbDrugs],box);
			mysql_tquery(SQL, str, "", "");
			mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put %d drugs in safebox %d.",amount,box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "deposit %d drugs.",amount);
			SafeboxLog(box,playerid,string);
		}
		if( strcmp ( name, "mats" , true ) == 0 )
		{
			mats = PlayerData[playerid][Materials];
			if(amount > mats) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough mats.");
			SafeBox[box][sbMats] += amount;
			PlayerData[playerid][Materials] -= amount;
			
			format(str,512,"UPDATE `safeboxs` SET `Mats`='%d' WHERE `ID`='%d'",SafeBox[box][sbMats],box);
			mysql_tquery(SQL, str, "", "");
			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Materials],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "You put %d materials in safebox %d.",amount,box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "deposit %d materials.",amount);
			SafeboxLog(box,playerid,string);
		}
	}
	return 1;
}

YCMD:fwithdraw(playerid, params[], help)
{
	new name[25], amount;
	new leader = PlayerData[playerid][Leader];
    new member = PlayerData[playerid][Member];
	if((leader+member)==0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not a member / leader of a faction.");
	if(sscanf(params, "s[25]i", name, amount))
	{
		SendUsage(playerid,"/fwithdraw <name> <amount>");
		SendUsage(playerid,"Avaiable names: money, drugs, mats.");
	}
	else
	{
		new str[512], string[128], money, drugs, mats;
		new box = leader+member;
		if(PlayerData[playerid][InHQ] == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near a safebox.");
		if(box == 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Acces Denied!");
		if( strcmp ( name, "money" , true ) == 0 )
		{
			money = SafeBox[box][sbMoney];
			if(leader == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Acces denined.");
			if(amount > money) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			SafeBox[box][sbMoney] -= amount;
			GivePlayerCash(playerid, amount);
			mysql_format(SQL, str,512,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[box][sbMoney],box);
			mysql_tquery(SQL, str, "", "");
			format(string, sizeof(string), "You withdraw $%s money in safebox %d.",Decimal(amount),box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);			
			format(string, sizeof(string), "withdraw %d money.",amount);
			SafeboxLog(box,playerid,string);
		}
		if( strcmp ( name, "drugs" , true ) == 0 )
		{
			drugs = SafeBox[box][sbDrugs];
			if(amount > drugs) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough drugs.");
			SafeBox[box][sbDrugs] -= amount;
			PlayerData[playerid][Drugs] += amount;
			mysql_format(SQL, str,512,"UPDATE `safeboxs` SET `Drugs`='%d' WHERE `ID`='%d'",SafeBox[box][sbDrugs],box);
			mysql_tquery(SQL, str, "", "");
			mysql_format(SQL, str,512,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			format(string, sizeof(string), "You withdraw %d drugs in safebox %d.",amount,box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "withdraw %d drugs.",amount);
			SafeboxLog(box,playerid,string);
		}
		if( strcmp ( name, "mats" , true ) == 0 )
		{
			mats = SafeBox[box][sbMats];
			if(amount > mats) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough mats.");
			SafeBox[box][sbMats] -= amount;
			PlayerData[playerid][Materials] += amount;
			mysql_format(SQL, str,512,"UPDATE `safeboxs` SET `Mats`='%d' WHERE `ID`='%d'",SafeBox[box][sbMats],box);
			mysql_tquery(SQL, str, "", "");
			mysql_format(SQL, str,512,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Materials],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			format(string, sizeof(string), "You withdraw %d materials in safebox %d.",amount,box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "withdraw %d materials.",amount);
			SafeboxLog(box,playerid,string);
		}
	}
	return 1;
}

YCMD:fwarn(playerid, params[], help)
{
	if(PlayerData[playerid][Leader] == 0) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
	new id, string[256], reason[25], str[128];
	if(sscanf(params, "us[25]", id, reason)) return SendUsage(playerid,"/fwarn <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new member = PlayerData[id][Member];
	new leader = PlayerData[playerid][Leader];
	if(member != leader) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Member isn't in your faction.");
	format(string, sizeof(string), "{00B8E6}Leader %s gave you a faction warn, reason: %s.", PlayerData[playerid][Name], reason);
	SendClientMessage(id, COLOR_WHITE, string);
	format(string, sizeof(string), "{00B8E6}You gave %s a faction warn, reason: %s.", PlayerData[id][Name], reason);
	SendClientMessage(playerid, COLOR_WHITE, string);
	
	PlayerData[id][FacWarns] += 1;
	mysql_format(SQL,str,128,"UPDATE `users` SET `FacWarns`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][FacWarns],PlayerData[id][ID]);
	mysql_tquery(SQL,str, "", "");
	
	FactionLog(playerid,id,leader,"Received FactionWarn",reason);
	
	if(PlayerData[id][FacWarns] >= 3)
	{
		format(string, sizeof(string), "* You have been auto-kicked from faction because of 3 faction warns.");
		SendClientMessage(id, COLOR_LIGHTBLUE2, string);
		
		PlayerData[id][Member] = 0;
		PlayerData[id][Rank] = 0;
		PlayerData[id][FacWarns] = 0;
		PlayerData[id][Char] = 47;
		PlayerData[id][FPunish] = 10;
		
		SetPlayerSkin(id,PlayerData[id][Char]);
		SpawnPlayer(id);
		ResetPlayerWeapons(id);
		mysql_format(SQL,str,128,"UPDATE `users` SET `Member`='0',`Rank`='0',`Chara`='47',`FPunish`='10',`FacWarns`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
		mysql_tquery(SQL,str, "", "");
		FactionLog(playerid,id,leader,"Was kicked out (3 warns)","None");
	}
	
	
	return 1;
}

YCMD:funwarn(playerid, params[], help)
{
	if(PlayerData[playerid][Leader] == 0) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
	new id, string[256], reason[25], str[128];
	if(sscanf(params, "us[25]", id, reason)) return SendUsage(playerid,"/funwarn <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new member = PlayerData[id][Member];
	new leader = PlayerData[playerid][Leader];
	if(member != leader) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Member isn't in your faction.");
	if(PlayerData[id][FacWarns] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Member has 0 faction warnings.");
	
	format(string, sizeof(string), "{00B8E6}Leader %s remove you a faction warn, reason: %s.", PlayerData[playerid][Name], reason);
	SendClientMessage(id, COLOR_WHITE, string);
	format(string, sizeof(string), "{00B8E6}You remove %s a faction warn, reason: %s.", PlayerData[id][Name], reason);
	SendClientMessage(playerid, COLOR_WHITE, string);
	PlayerData[id][FacWarns] -= 1;
	
	mysql_format(SQL,str,128,"UPDATE `users` SET `FacWarns`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][FacWarns],PlayerData[id][ID]);
	mysql_tquery(SQL,str, "", "");
	
	FactionLog(playerid,id,leader,"Received a FW clear",reason);
	return 1;
}

YCMD:lc(playerid, params[], help)
{
	if(PlayerData[playerid][Leader] == 0 && PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
    new message[128], string[256],shortname[20];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/lc <message>");
	new leader = PlayerData[playerid][Leader];
	if(leader > 0 && PlayerData[playerid][Admin] < 6)
	{
		switch(leader)
		{
			case 1: shortname = "LSPD";
			case 2: shortname = "GRV";
			case 3: shortname = "GSW";
			case 4: shortname = "VNE";
			case 5: shortname = "SA GOV";
			case 6: shortname = "SA NET";
			case 7: shortname = "LSES";
		}
		format(string, sizeof(string), "%s Leader %s: %s", shortname, PlayerData[playerid][Name], message);
		SendLeaderMessage(COLOR_ADMCHAT, string);
	}
	else
	{
	    format(string, sizeof(string), "[L] Admin %s: %s", PlayerData[playerid][Name], message);
		SendLeaderMessage(COLOR_ADMCHAT, string);
	}
	return 1;
}
YCMD:fvrespawn(playerid, params[], help)
{
	new bool:unwanted[MAXVEHICLES];
	if(PlayerData[playerid][Leader] == 0) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
	new sendername[25], string[256];
	new leader = PlayerData[playerid][Leader];
	if(SafeBox[leader][sbMoney] < 1000) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must have $1000 in your safebox.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	foreach(Player, i)
    {
       	if(IsPlayerInAnyVehicle(i))
		{
			unwanted[GetPlayerVehicleID(i)] = true;
		}
   	}
	for(new j = 1; j <= vehss; j++)
	{
		if(StaticVeh[j][vFaction] == leader)
		{
			if(!unwanted[j])
			{
				SetVehicleToRespawn(j);
			}
		}
	}
	SafeBox[leader][sbMoney] -= 1000;
	new str[512];
	mysql_format(SQL, str,512,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[leader][sbMoney],leader);
	mysql_tquery(SQL, str, "", "");
		
	format(string, sizeof(string), "withdraw 1000 money (fvrespawn).");
	SafeboxLog(leader,playerid,string);
	
	format(string, sizeof(string), "{00B8E6}%s has respawned his faction's cars (-$1000).",sendername);
	SendRadioMessage(leader, COLOR_WHITE, string);
	return 1;
}

YCMD:giverank(playerid, params[], help)
{
    if(PlayerData[playerid][Leader] == 0) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
	new id, rank, string[128], str[128];
	if(sscanf(params, "ui", id, rank)) return SendUsage(playerid,"/giverank <Name/Playerid> <Rank>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new member = PlayerData[id][Member];
	new leader = PlayerData[playerid][Leader];
	if(member != leader) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Member isn't in your faction.");
	if((rank > 6) || (rank < 1)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Rank must be between 1 and 6.");
	PlayerData[id][Rank] = rank;
	format(string, sizeof(string), "*Leader %s promoted you to rank %d.", PlayerData[playerid][Name], rank);
	SendClientMessage(id, 0x00B8E600, string);
	format(string, sizeof(string), "*You promoted %s to rank %d.", PlayerData[id][Name],rank);
	SendClientMessage(playerid, 0x00B8E600, string);
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Rank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Rank],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");

	format(string,sizeof(string),"Got rank %d", rank);
	FactionLog(playerid,id,leader,string,"None");
	return 1;
}

YCMD:invite(playerid, params[],help)
{
	new str[128];
	if(PlayerData[playerid][Leader] == 0) return SendClientMessage(playerid, COLOR_WHITE, LeaderOnly);
	new faction = PlayerData[playerid][Leader];
	new id, string[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/invite <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerData[id][Member] > 0 || PlayerData[id][Leader] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player is already in a faction.");
	if(PlayerData[id][FPunish] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player has FP.");
	PlayerData[id][Member] = PlayerData[playerid][Leader];
	PlayerData[id][Rank] = 1;
	format(string, sizeof(string), "{00B8E6}Leader %s invited you in %s.", PlayerData[playerid][Name], FactionName(faction));
	SendClientMessage(id, COLOR_WHITE, string);
	format(string, sizeof(string), "{00B8E6}You invited %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	
	new rand = random(sizeof(InviteSpawns));
	SetPlayerPos(id, InviteSpawns[rand][0], InviteSpawns[rand][1], InviteSpawns[rand][2]);
	SetPlayerFacingAngle(id, InviteSpawns[rand][3]);
	SetPlayerCameraPos(id,InviteSpawns[rand][0] + 3, InviteSpawns[rand][1], InviteSpawns[rand][2]);
	SetPlayerCameraLookAt(id,InviteSpawns[rand][0], InviteSpawns[rand][1], InviteSpawns[rand][2]);
	SetPlayerInterior(id,0);
	TogglePlayerControllable(id, 0);
	
	PlayerData[id][CSkin] = 0;
	PlayerData[id][Char] = factionskins[faction][PlayerData[playerid][CSkin]];
	SetPlayerSkin(id,factionskins[faction][PlayerData[playerid][CSkin]]);
	
	SafeBox[faction][sbMembers] += 1;
	mysql_format(SQL, str,128,"UPDATE `safeboxs` SET `Members`='%d' WHERE `ID`='%d'",SafeBox[faction][sbMembers],faction);
	mysql_tquery(SQL, str, "", "");
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Chara`='%d',`Member`='%d',`Rank`='1' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Char],PlayerData[id][Member],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	FactionLog(playerid,id,faction,"Joined the faction","None");
	SetPlayerFColor(id);
	ShowPlayerDialog(id, DIALOG_SKINS, DIALOG_STYLE_MSGBOX, "Clothes", "Use {FFFFFF}Next {A9C4E4}to select the char you want to use.\nWhen you are done press {FFFFFF}Done{A9C4E4}.", "Next", "Done");
	
	if(faction >= 2 && faction <= 4)
	{
		for(new idt = 1; idt <= turfss; idt++)
		{
			if(TurfInfo[id][zOwned] == 2)
			{
				GangZoneShowForPlayer(id, Turfs[idt], TurfColorGrove);
			}
			if(TurfInfo[id][zOwned] == 3)
			{
				GangZoneShowForPlayer(id, Turfs[idt], TurfColorGSW);
			}
			if(TurfInfo[id][zOwned] == 4)
			{
				GangZoneShowForPlayer(id, Turfs[idt], TurfColorVNE);
			}
		}
		PlayerData[id][OnDuty] = 1;
	}
	if(faction == 5) PlayerData[id][OnDuty] = 1;
	return 1;
}

YCMD:accept(playerid, params[], help)
{
	new name[64], id, string[256], str[128];
	if(sscanf(params, "s[64]u", name,id))
	{
		SendUsage(playerid,"/accept <name> <Name/Playerid>");
		SendUsage(playerid,"Available names: War, Medic, Live, Paper, Gun, Drugs, Materials");
		SendUsage(playerid,"Available names: Ticket, Car, House");
	}
	else
	{
	    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	    if( strcmp ( name, "war" , true ) == 0 )
		{
		    if(PlayerData[playerid][WarOffered] == id && PlayerData[id][WarOffer] == playerid)
		    {
				new faction, factionid, price, tid;
				price = PlayerData[playerid][WarPrice];
				tid = PlayerData[playerid][WarTurf];
				faction = PlayerData[playerid][Leader];
				factionid = PlayerData[id][Leader];
				if(price > SafeBox[PlayerData[playerid][Leader]][sbMoney])
				{
				    SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have that sum of money in your safebox.");
				    SendClientMessage(id, COLOR_WHITE, "{FFFFCC}Error: The gang doesn't have that sum of money in the safebox.");
				    return 1;
				}
		        format(string, sizeof(string), "{FFFFFF}War: {33CCFF}%s started a war on turf {FFFFFF}%d {33CCFF}with {FFFFFF}%s {33CCFF}for {FFFFFF}$%d{33CCFF}.",FactionName(factionid),tid,FactionName(faction),price);
		    	SendRadioMessage(faction, COLOR_LIGHTBLUE,string);
		    	format(string, sizeof(string), "{FFFFFF}War: {33CCFF}%s started a war on turf {FFFFFF}%d {33CCFF}with {FFFFFF}%s {33CCFF}for {FFFFFF}$%d{33CCFF}.",FactionName(factionid),tid,FactionName(faction),price);
		    	SendRadioMessage(factionid, COLOR_LIGHTBLUE,string);
		    	WarInfo[tid][wPrice] = price;
                WarInfo[tid][wTime] = 30;
				WarInfo[tid][wFaction] = TurfInfo[tid][zOwned];
				WarInfo[tid][wAttacker] = factionid;
				foreach(Player,i)
				{
					if((PlayerData[i][Member] + PlayerData[i][Leader] == factionid) || (PlayerData[i][Member] + PlayerData[i][Leader] == faction))
					{
						if(factionid == 2)
						GangZoneFlashForPlayer(i,Turfs[tid],TurfColorGrove);
						if(factionid == 3)
						GangZoneFlashForPlayer(i,Turfs[tid],TurfColorGSW);
						if(factionid == 4)
						GangZoneFlashForPlayer(i,Turfs[tid],TurfColorVNE);
					}
				}
				War[faction] = 1;
				War[factionid] = 1;
				PlayerData[id][WarOffer] = -1;
				PlayerData[playerid][WarOffered] = -1;
				PlayerData[playerid][WarPrice] = -1;
				PlayerData[playerid][WarTurf] = -1;
		    }
		    else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player didn't offer you anything.");
		}
		if( strcmp ( name, "car" , true ) == 0 )
		{
			if(OwnableCarOffered[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered anything.");
			if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
			if(FindCSlot(playerid) == -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You have 5 vehicles!");
			new slot = OwnableCarSlot[playerid];
			new slotid = FindCSlot(playerid);
			
			if(slot == 1) { PlayerData[id][CarKey1] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey1 = %d WHERE ID = %d",PlayerData[id][CarKey1],PlayerData[id][ID]); }
			if(slot == 2) { PlayerData[id][CarKey2] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey2 = %d WHERE ID = %d",PlayerData[id][CarKey2],PlayerData[id][ID]); }
			if(slot == 3) { PlayerData[id][CarKey3] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey3 = %d WHERE ID = %d",PlayerData[id][CarKey3],PlayerData[id][ID]); }
			if(slot == 4) { PlayerData[id][CarKey4] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey4 = %d WHERE ID = %d",PlayerData[id][CarKey4],PlayerData[id][ID]); }
			if(slot == 5) { PlayerData[id][CarKey5] = 0; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey5 = %d WHERE ID = %d",PlayerData[id][CarKey5],PlayerData[id][ID]); }
			mysql_tquery(SQL, string, "", "");
			
			if(slotid == 1) { PlayerData[playerid][CarKey1] = OwnableCarID[playerid]; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey1 = %d WHERE ID = %d",PlayerData[playerid][CarKey1],PlayerData[playerid][ID]); }
			if(slotid == 2) { PlayerData[playerid][CarKey2] = OwnableCarID[playerid]; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey2 = %d WHERE ID = %d",PlayerData[playerid][CarKey2],PlayerData[playerid][ID]); }
			if(slotid == 3) { PlayerData[playerid][CarKey3] = OwnableCarID[playerid]; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey3 = %d WHERE ID = %d",PlayerData[playerid][CarKey3],PlayerData[playerid][ID]); }
			if(slotid == 4) { PlayerData[playerid][CarKey4] = OwnableCarID[playerid]; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey4 = %d WHERE ID = %d",PlayerData[playerid][CarKey4],PlayerData[playerid][ID]); }
			if(slotid == 5) { PlayerData[playerid][CarKey5] = OwnableCarID[playerid]; mysql_format(SQL, string,sizeof(string),"UPDATE users SET CarKey5 = %d WHERE ID = %d",PlayerData[playerid][CarKey5],PlayerData[playerid][ID]); }
			mysql_tquery(SQL, string, "", "");
			
			strmid(CarInfo[OwnableCarID[playerid]][cOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
			CarInfo[OwnableCarID[playerid]][Userid] = PlayerData[playerid][ID];
			
			mysql_format(SQL, string,sizeof(string),"UPDATE cars SET `Owner` = '%s',`Userid` = '%d' WHERE ID = %d",PlayerData[playerid][Name], PlayerData[playerid][ID], PlayerData[playerid][CarKey1]);
			mysql_tquery(SQL, string, "", "");
			
			format(string, sizeof(string), "* You accepted the %s's offer.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE2, string);
			format(string, sizeof(string), "* %s accepted your offer.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE2, string);
			
			RemovePlayerFromVehicle(id);
			GivePlayerCash(id, OwnableCarPrice[playerid]);
			GivePlayerCash(playerid, -OwnableCarPrice[playerid]);
			OwnableCarOffered[playerid] = -1;
			OwnableCarOffer[id] = -1;
			OwnableCarPrice[playerid] = 0;
			OwnableCarID[playerid] = 0;
		}
		if( strcmp ( name, "house" , true ) == 0 )
		{
			if(OwnableHouseOffered[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered anything.");
			if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
			if(PlayerData[playerid][HKey] != -1 && strcmp(PlayerData[playerid][Name], HouseInfo[PlayerData[playerid][HKey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player already own a house.");	
			
			PlayerData[playerid][HKey] = OwnableHouseID[playerid];
			PlayerData[id][HKey] = -1;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `HouseKey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][HKey],PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			mysql_format(SQL, str,128,"UPDATE `users` SET `HouseKey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][HKey],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
			strmid(HouseInfo[OwnableHouseID[playerid]][hOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
			mysql_format(SQL, string,sizeof(string),"UPDATE houses SET `Owner` = '%s' WHERE ID = %d",PlayerData[playerid][Name], PlayerData[playerid][HKey]);
			mysql_tquery(SQL, string, "", "");
			
			format(string, sizeof(string), "* You accepted the %s's offer.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE2, string);
			format(string, sizeof(string), "* %s accepted your offer.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE2, string);
			
			GivePlayerCash(id, OwnableHousePrice[playerid]);
			GivePlayerCash(playerid, -OwnableHousePrice[playerid]);
			OwnableHouseOffered[playerid] = -1;
			OwnableHouseOffer[id] = -1;
			OwnableHousePrice[playerid] = 0;
			OwnableHouseID[playerid] = 0;
		}
		if( strcmp ( name, "medic" , true ) == 0 )
		{
			if(MedicCall[id] == -2)
			{
				if(PlayerData[playerid][OnDuty] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not on-duty.");
				format(string, sizeof(string), "* You accepted the Medic Call from %s, you'll see the marker until you'll reach.", PlayerData[id][Name]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE2, string);
				format(string, sizeof(string), "* Medic %s has accepted your Medic call. Please wait in this position.", PlayerData[playerid][Name]);
				SendClientMessage(id, COLOR_LIGHTBLUE2, string);
				format(string, sizeof(string), "** %s has accepted the Medic call from %s.", PlayerData[playerid][Name], PlayerData[id][Name]);
				SendRadioMessage(7, TEAM_AZTECAS_COLOR, string);
				foreach(Player, i)
				{
					new faction = PlayerData[i][Member] + PlayerData[i][Leader];
					if(faction == 7) PlayerPlaySound(i, 0, 0.0, 0.0, 0.0);
				}
				MedicCall[id] = playerid;
				MedicAns[playerid] = id;
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(id, X, Y, Z);
				SetPlayerCheckpoint(playerid, X, Y, Z, 3);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player didn't call for a Medic.");
		}
		if( strcmp ( name, "ticket", true ) == 0 )
		{
			if(TicketOffer[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered you a ticket.");
			if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
			if(PlayerData[playerid][Cash] < TicketMoney[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			
			format(string, sizeof(string), "* You have paid the ticket of $%d to officer %s.", TicketMoney[playerid], PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE2, string);
			format(string, sizeof(string), "* %s has paid your ticket of $%d.", PlayerData[playerid][Name], TicketMoney[playerid]);
			SendClientMessage(id, COLOR_LIGHTBLUE2, string);
			GivePlayerCash(playerid, - TicketMoney[playerid]);
			GivePlayerCash(id, TicketMoney[playerid]);
			TicketOffer[playerid] = -1;
			TicketMoney[playerid] = 0;
			return 1;
		}
		if( strcmp ( name, "live" , true ) == 0 )
		{
			if(LiveOffer[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered you a live.");
			if(LiveOffer[playerid] >= 0)
			{
				if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends.");
				SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends (use /live again).");
				TogglePlayerControllable(playerid, 0);
				TogglePlayerControllable(LiveOffer[playerid], 0);
				TalkingLive[playerid] = LiveOffer[playerid];
				TalkingLive[LiveOffer[playerid]] = playerid;
				LiveOffer[playerid] = -1;
				LiveReporter[id] = -1;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: No-one offered you a live.");
		}
		if( strcmp ( name, "gun" , true ) == 0 )
		{
			if(GunOffered[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered you a gun.");
			if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
			if(PlayerData[playerid][Cash] < GunPrice[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			
			format(string, sizeof(string), "* %s created a %s from materials, and hands it to %s.", PlayerData[id][Name], GetWeaponNameEx(GunModel[playerid]), PlayerData[playerid][Name]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			
			new materials, ammo;
			
			if(GunModel[playerid] == 23) materials = 10; ammo = 50;
			if(GunModel[playerid] == 14) materials = 1; ammo = 1;
            if(GunModel[playerid] == 24) materials = 15; ammo = 50;
            if(GunModel[playerid] == 29) materials = 20; ammo = 200;
            if(GunModel[playerid] == 25) materials = 20; ammo = 50;
            if(GunModel[playerid] == 30) materials = 60; ammo = 250;
            if(GunModel[playerid] == 31) materials = 60; ammo = 250;
            if(GunModel[playerid] == 33) materials = 60; ammo = 250;
            
			PlayerData[id][Materials] -= materials;

			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Materials],PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			GivePlayerWeapon(playerid, GunModel[playerid], ammo);
			GivePlayerCash(playerid, -GunPrice[playerid]);
			GivePlayerCash(id, GunPrice[playerid]);
			
			GunOffer[id] = -1;
			GunOffered[playerid] = -1;
			GunPrice[playerid] = -1;
    		GunModel[playerid] = -1;
			return 1;
		}
		if( strcmp ( name, "drugs" , true ) == 0 )
		{
		    if(DrugOffered[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered you drugs.");
			if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
			if(PlayerData[id][Drugs] < DrugAmount[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player doesn't have enough drugs.");
            if(PlayerData[playerid][Drugs] + DrugAmount[playerid] > 10) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't have more than 10 drugs.");
			if(PlayerData[playerid][Cash] < DrugPrice[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");

			format(string, sizeof(string), "* %s sells %d grams of drugs to %s.", PlayerData[id][Name], DrugAmount[playerid], PlayerData[playerid][Name]);
			ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			
			PlayerData[id][Drugs] -= DrugAmount[playerid];
			PlayerData[playerid][Drugs] += DrugAmount[playerid];
			
			GivePlayerCash(playerid, -DrugPrice[playerid]);
			GivePlayerCash(id, DrugPrice[playerid]);
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Drugs],PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Drugs],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");
			
		    DrugOffer[id] = -1;
			DrugOffered[playerid] = -1;
			DrugPrice[playerid] = -1;
			DrugAmount[playerid] = -1;
		}
		if( strcmp ( name, "Materials" , true ) == 0 )
		{
		    if(MaterialsOffered[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered you drugs.");
			if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
			if(PlayerData[id][Materials] < MaterialsAmount[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player doesn't have enough drugs.");
			if(PlayerData[playerid][Cash] < MaterialsPrice[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
			
			format(string, sizeof(string), "* %s sells %d materials to %s.", PlayerData[id][Name], MaterialsAmount[playerid], PlayerData[playerid][Name]);
			ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			PlayerData[id][Materials] -= MaterialsAmount[playerid];
			PlayerData[playerid][Materials] += MaterialsAmount[playerid];

			GivePlayerCash(playerid, -MaterialsPrice[playerid]);
			GivePlayerCash(id, MaterialsPrice[playerid]);

			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Materials],PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");

			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Materials],PlayerData[playerid][ID]);
			mysql_tquery(SQL, str, "", "");

		    MaterialsOffer[id] = -1;
			MaterialsOffered[playerid] = -1;
			MaterialsPrice[playerid] = -1;
			MaterialsAmount[playerid] = -1;
		}
		if( strcmp ( name, "paper" , true ) == 0 )
		{
			if(PaperOffer[playerid] != id) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: This player doesn't offered you a paper.");
			if(PaperOffer[playerid] >= 0)
			{
				if(GetDistanceBetweenPlayers(playerid, id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
				format(string, sizeof(string), "* You have accepted a newspaper from %s (use /read, to read).", PlayerData[id][Name]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s has accepted your Newspaper.", PlayerData[playerid][Name]);
				SendClientMessage(PaperOffer[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
				strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
				strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
				strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
				strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
				strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
				strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
				strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
				strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
				strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
				GotPaper[playerid] = 1;
				PaperOffer[playerid] = -1;
				PaperReporter[id] = -1;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: No-one offered you a paper.");
		}
	}
	return 1;
}

YCMD:setstat(playerid, params[], help)
{
	new id, stat, amount, str[128], string[128];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "uii",id,stat,amount)) 		
	{
		SendUsage(playerid,"/setstat <Name/Playerid> <statcode> <amount>");
		SendUsage(playerid,"|1 Level |2 BankAccount |3 PhoneNumber |4 NULL |5 Premium");
		SendUsage(playerid,"|6 HouseKey |7 BizKey |8 NULL |9 FPunish |10 FWarnings");
	}
	else
	{
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		if(stat > 10 || stat < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid statcode.");
	    switch (stat)
		{
			case 1:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's level to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][Level] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `Level`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Level],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 2:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's bank account to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][Bank] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Bank],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 3:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's phonenr to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][PhoneNr] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `PhoneNr`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][PhoneNr],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 4:
			{
				
			}
			case 5:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's premium to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][Premium] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `PremiumAcc`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Premium],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 6:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's housekey to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][HKey] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `HouseKey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][HKey],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 7:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's bizkey to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][Bizkey] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `Bizkey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Bizkey],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 8:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's fpunish to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][FPunish] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `FPunish`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][FPunish],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
			case 9:
			{
				format(string, 256, "AdmCmd: Admin %s has set %s's fwarns to %d.", PlayerData[playerid][Name], PlayerData[id][Name],amount);
				ABroadCast(COLOR_LIGHTRED,string,1);
				
				PlayerData[id][FacWarns] = amount;
				mysql_format(SQL, str,128,"UPDATE `users` SET `FacWarns`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][FacWarns],PlayerData[id][ID]);
				mysql_tquery(SQL, str, "", "");
			}
		}
	}
	return 1;
}

YCMD:war(playerid, params[], help)
{
	new id, amount, tid, string[128];
	new faction = PlayerData[playerid][Leader];
	if( faction < 2 || faction > 4 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't leader of a gang.");
	if(sscanf(params, "uii", id, amount, tid)) return SendUsage(playerid,"/war <Name/Playerid> <amount> <turf id>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new factionid = PlayerData[id][Leader];
	if( factionid < 2 || factionid > 4 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: The player isn't leader of a gang.");
	if(amount < 5000 && amount > 20000) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Amount must be between $5,000 and $20,000.");
	if(SafeBox[faction][sbMoney] < amount) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have that sum of money in your safebox.");
	if(tid < 1 || tid > turfss) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid turf id.");
	if(TurfInfo[tid][zOwned] != factionid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Gang didn't own this turf.");
	format(string, sizeof(string), "{FFFFFF}War: {33CCFF}%s invited your gang to a match on turf %d for {FFFFFF}$%d{33CCFF}.", PlayerData[playerid][Name], tid, amount);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "{FFFFFF}War: {33CCFF}Type {FFFFFF}/accept war %d {33CCFF}to start the war.", playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "{FFFFFF}War: {33CCFF}You invited %s to a match on turf %d for {FFFFFF}$%d{33CCFF}.", PlayerData[id][Name], tid, amount);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	PlayerData[playerid][WarOffer] = id;
	PlayerData[id][WarOffered] = playerid;
	PlayerData[id][WarPrice] = amount;
	PlayerData[id][WarTurf] = tid;
	return 1;
}

YCMD:agivedrugs(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,drugs,string[128], str[256];
	if(sscanf(params, "ui", id, drugs)) return SendUsage(playerid,"/agd <Name/Playerid> <drugs>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	format(string, sizeof(string), "* %s has recieved %d drugs.",PlayerData[id][Name],drugs);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	format(string, sizeof(string), "AdmCmd: Admin %s has gave you %d drugs.",PlayerData[playerid][Name],drugs);
	SendClientMessage(id, COLOR_LIGHTRED, string);
	
	PlayerData[id][Drugs] += drugs;

	mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Drugs],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	return 1;
}

YCMD:agivemats(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,materials,string[128], str[256];
	if(sscanf(params, "ui", id, materials)) return SendUsage(playerid,"/agm <Name/Playerid> <materials>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	format(string, sizeof(string), "* %s has recieved %d materials.",PlayerData[id][Name],materials);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	format(string, sizeof(string), "AdmCmd: Admin %s has gave you %d materials.",PlayerData[playerid][Name],materials);
	SendClientMessage(id, COLOR_LIGHTRED, string);
	
	PlayerData[id][Materials] += materials;
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Materials],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	return 1;
}

YCMD:givegun(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,gun,ammo,string[128];
	if(sscanf(params, "uii", id, gun,ammo)) return SendUsage(playerid,"/givegun <Name/Playerid> <weapon> <ammo>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(gun < 1 || gun > 46) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid weapon id.");
	if(ammo < 1 || ammo > 10000) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid number of ammo.");
	format(string, sizeof(string), " You have given %s gun id %d with %d ammo.", PlayerData[id][Name], gun, ammo);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	format(string, sizeof(string), " Admin %s has given you gun id %d with %d ammo.", PlayerData[playerid][Name], gun, ammo);
	SendClientMessage(id, COLOR_WHITE, string);
	GivePlayerWeapon(id, gun, ammo);
  	return 1;
}

YCMD:destroycar(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][Admin] < 5) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new carid;
	if(sscanf(params, "i", carid)) return SendUsage(playerid,"/destroycar <id>");
	DestroyVehicle(carid);
	format(string, sizeof(string), "You have destroyed car %d.",carid);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

YCMD:setadminoff(playerid, params[],help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new level,vname[25],query[128];
	if(sscanf(params, "s[25]i", vname, level)) return SendUsage(playerid,"/setadminoff <Exact Name> <level>");	
	if(level > 6 || level < 0)  return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid admin level.");
	if(GetPlayerIdFromName(vname) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player is online.");
	
	mysql_format(SQL, query, 128, "SELECT `id` FROM `users` WHERE LOWER(username) = LOWER('%s') LIMIT 1",vname);
	mysql_tquery(SQL, query, "AdminOff", "sdd", vname,level,playerid);
	
	return 1;
}

YCMD:givelevelall(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128], str[128];
	foreach(Player, i)
    {
		new playerlevel = PlayerData[i][Level];
      	PlayerData[i][Level] = playerlevel + 1;
		SetPlayerScore(i, PlayerData[i][Level]);
		format(string, sizeof(string), "AdmBot: All players online have recieved 1 level from Admin %s.",PlayerData[playerid][Name]);
        SendClientMessage(i,COLOR_NEWS,string);

		mysql_format(SQL, str,128,"UPDATE `users` SET `Level`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][Level],PlayerData[i][ID]);
		mysql_tquery(SQL, str, "", "");
	}
	return 1;
}

YCMD:createaccount(playerid, params[], help)
{
	new pin, str[128];
    if(PlayerData[playerid][InBizz] != 22) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in bank.");
    if(PlayerData[playerid][PIN] != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already have an bank account!");
    if(sscanf(params, "i", pin)) return SendUsage(playerid,"/createaccount <pin>");
    
    PlayerData[playerid][PIN] = pin;
    mysql_format(SQL, str,128,"UPDATE `users` SET `PIN`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][PIN],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	
	SendClientMessage(playerid, COLOR_WHITE, "Use /authorise to use the bank commands!");
	return 1;
}

YCMD:authorise(playerid, params[], help)
{
	new pin;
    if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
    if(Authorised[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You already authorised!");
    if(sscanf(params, "i", pin)) return SendUsage(playerid,"/authorise <pin>");
    
    if(PlayerData[playerid][PIN] == pin)
    {
        SendClientMessage(playerid, COLOR_WHITE, "Welcome to your account!");
        SendClientMessage(playerid, COLOR_WHITE, "Now you can use the bank commands.");
        Authorised[playerid] = 1;
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "Invalid PIN!");
    }
	return 1;
}

YCMD:transfer(playerid, params[], help)
{
	new id, amount, str[128], string[128];
    if(PlayerData[playerid][InBizz] != 22) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in bank.");
	if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
	if(Authorised[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please authorise the bank commands!");
    if(sscanf(params, "ui", id, amount)) return SendUsage(playerid,"/transfer <Name/Playerid> <amount>");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
    if(amount < 0 || PlayerData[playerid][Bank] < amount) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid sum of money.");

	PlayerData[playerid][Bank] -= amount;
	PlayerData[id][Bank] += amount;

    mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Bank],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Bank],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	format(string, sizeof(string), "* You have transferred $%s to %s's account.", Decimal(amount), PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	format(string, sizeof(string), "* You have recieved $%s to into your account from %s.", Decimal(amount), PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_GRAD1, string);
	TransferLog(playerid, id, amount);
	
	format(string, sizeof(string), "%s transferd $%s to %s", PlayerData[playerid][Name], Decimal(amount), PlayerData[id][Name]);
	ABroadCast(COLOR_YELLOW,string,1);
	return 1;
}

YCMD:deposit(playerid, params[], help)
{
	new amount, str[128], string[128];
	if(PlayerData[playerid][InBizz] != 22) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in bank.");
	if(sscanf(params, "i", amount)) return SendUsage(playerid,"/deposit <amount>");
	
	if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
	if(Authorised[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please authorise the bank commands!");
	
	if(amount > PlayerData[playerid][Cash] || amount < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have that sum of money.");

	GivePlayerCash(playerid, -amount);

    new curfunds = PlayerData[playerid][Bank];
    
	PlayerData[playerid][Bank] += amount;
	mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Bank],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	
	SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%s", Decimal(curfunds));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%s",Decimal(amount));
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%s", Decimal(PlayerData[playerid][Bank]));
	SendClientMessage(playerid, COLOR_WHITE, string);
	
	return 1;
}

YCMD:atmwithdraw(playerid, params[], help)
{
	new amount, str[128], string[128];
    if(!IsAtATM(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near an ATM.");
    if(sscanf(params, "i", amount)) return SendUsage(playerid,"/atmwithdraw <amount>");

	if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
	if(Authorised[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please authorise the bank commands!");

	if(amount > PlayerData[playerid][Bank] || amount < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have that sum of money.");

	GivePlayerCash(playerid, amount);

    new curfunds = PlayerData[playerid][Bank];

	PlayerData[playerid][Bank] -= amount;
	mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Bank],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");

	SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%s", Decimal(curfunds));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Withdraw: $%s",Decimal(amount));
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%s", Decimal(PlayerData[playerid][Bank]));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:atmbalance(playerid, params[], help)
{
	new string[128];
	if(!IsAtATM(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not near an ATM.");
	if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
	if(Authorised[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please authorise the bank commands!");
    SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Balance: $%s", Decimal(PlayerData[playerid][Bank]));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}

YCMD:withdraw(playerid, params[], help)
{
	new amount, str[128], string[128];
	if(PlayerData[playerid][InBizz] != 22) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in bank.");
	if(sscanf(params, "i", amount)) return SendUsage(playerid,"/withdraw <amount>");

	if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
	if(Authorised[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please authorise the bank commands!");

	if(amount > PlayerData[playerid][Bank] || amount < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have that sum of money.");

	GivePlayerCash(playerid, amount);

    new curfunds = PlayerData[playerid][Bank];

	PlayerData[playerid][Bank] -= amount;
	mysql_format(SQL, str,128,"UPDATE `users` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Bank],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");

	SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%s", Decimal(curfunds));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Withdraw: $%s",Decimal(amount));
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%s", Decimal(PlayerData[playerid][Bank]));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:balance(playerid, params[], help)
{
	new string[128];
	if(PlayerData[playerid][InBizz] != 22) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in bank.");
	if(PlayerData[playerid][PIN] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must create a bank account!");
	if(Authorised[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Please authorise the bank commands!");
    SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Balance: $%s", Decimal(PlayerData[playerid][Bank]));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}
	
YCMD:pay(playerid, params[], help)
{
	new id, amount, szMessage[128];
    if(sscanf(params, "ui", id, amount)) return SendUsage(playerid,"/pay <Name/Playerid> <money>");
    if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can not use this command on yourself!");
	if(amount > 1000 && PlayerData[playerid][Level] < 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must be level 3 to pay over $1,000");
	if(amount < 1 || amount > 3000) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Don't go below $1, or above $3,000 at once.");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid,id) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough.");
	if(PlayerData[playerid][Cash] < amount) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
	GivePlayerCash(playerid, -amount);
	GivePlayerCash(id, amount);
	PayLog(playerid, id, amount);
	format(szMessage, sizeof(szMessage), "You sent to %s(%d), $%d.", PlayerData[id][Name], id, amount);
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	format(szMessage, sizeof(szMessage), "You recieve $%d from %s(%d).", amount, PlayerData[playerid][Name], playerid);
	SendClientMessage(id, COLOR_WHITE, szMessage);
	format(szMessage, sizeof(szMessage), "* %s takes out some cash, and hands it to %s.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
YCMD:refreshbar(playerid, params[], help)
{
	new string[128];
    PlayerTextDrawHide(playerid,XPRemain);
	PlayerTextDrawHide(playerid,XPTLeft);
	PlayerTextDrawHide(playerid,XPTotal);
	new XPneed = GetXPPoints(playerid);
	format(string, 100, "%d / %d XP", PlayerData[playerid][Exp], XPneed);
	PlayerTextDrawSetString(playerid, XPRemain, string);
	format(string, 100, "Time Left: %d min", XPneed-PlayerData[playerid][Exp]);
	PlayerTextDrawSetString(playerid, XPTLeft, string);
	format(string, 100, "Level: %d (%d XP)", PlayerData[playerid][Level],PlayerData[playerid][TotalExp]);
	PlayerTextDrawSetString(playerid, XPTotal, string);
	new Float:percent;
	percent = ((PlayerData[playerid][Exp] * 100) / XPneed);
	SetPlayerProgressBarValue(playerid, barxp, percent);
	HidePlayerProgressBar(playerid, barxp);
	ShowPlayerProgressBar(playerid, barxp);
	PlayerTextDrawShow(playerid,XPRemain);
	PlayerTextDrawShow(playerid,XPTLeft);
	PlayerTextDrawShow(playerid,XPTotal);
	return 1;
}

YCMD:speakerphone(playerid, params[], help)
{
    if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
    if(PlayerData[playerid][SpeakerPhone] == 1)
	{
    	PlayerData[playerid][SpeakerPhone] = 0;
        SendClientMessage(playerid, COLOR_WHITE, "You have disabled the speakerphone feature on your phone.");
 	}
 	else
	{
		PlayerData[playerid][SpeakerPhone] = 1;
        SendClientMessage(playerid, COLOR_WHITE, "You have enabled the speakerphone feature on your phone.");
  	}
    return 1;
}

YCMD:number(playerid, params[], help)
{
	new id, string[128];
	if(PlayerData[playerid][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your phone is offline!");
	if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/number <Name/Playerid>");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
    if(PlayerData[id][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player doesn't have a cellphone.");
    if(PlayerData[id][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player's phone is offline!");
	format(string, sizeof(string), "{FFFF00}Mobile{FFFFFF}: %s ({FFFF00}%s{FFFFFF})", PlayerData[id][Name], DecimalNumber(id));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

YCMD:togphone(playerid, params[], help)
{
	if (!PlayerData[playerid][PhoneOnline])
	{
		PlayerData[playerid][PhoneOnline] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}Your phone is now switched off.");
	}
	else
	{
		PlayerData[playerid][PhoneOnline] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}Your phone is now switched on.");
	}
	return 1;
}

YCMD:call(playerid, params[], help)
{
	new string[128], phonenumb;
	if(PlayerData[playerid][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your phone is offline!");
 	if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
	if(sscanf(params, "i", phonenumb)) return SendUsage(playerid,"/call <phone nr>");
	format(string, sizeof(string), "* %s takes out a cellphone.", PlayerData[playerid][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == PlayerData[playerid][PhoneNr]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't call yourself!");
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are already calling someone.");
	foreach(Player, i)
	{
		if(PlayerData[i][PhoneNr] == phonenumb && phonenumb != 0)
		{
			new id = i;
			if(PlayerData[id][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player's phone is offline!");
			Mobile[playerid] = id;
			if(Mobile[id] != -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is speaking with someone.");
			if(Mobile[id] == -1)
			{
				format(string, sizeof(string), "{FFFF00}Mobile: {FFFFFF}Your mobile is ringing - type /p to answer it. [Caller ID: %s]", PlayerData[playerid][Name]);
				SendClientMessage(id, COLOR_WHITE, string);
				
				format(string, sizeof(string), "* %s's phone begins to ring.", PlayerData[id][Name]);
				ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
				
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				return 1;
			}
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Mobile: Your call can not be completed as dialed, please check the number and try again.");
	return 1;
}

YCMD:p(playerid, params[], help)
{
    new string[128];
    if(PlayerData[playerid][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your phone is offline!");
    if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You are already calling someone.");
	foreach(Player, i)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i;
			SendClientMessage(i, COLOR_WHITE, "{FFFF00}Mobile: They picked up the call.");
			format(string, sizeof(string), "* %s answers their cellphone.", PlayerData[playerid][Name]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}
	return 1;
}

YCMD:h(playerid,params[], help)
{
	new string[128];
	if(PlayerData[playerid][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your phone is offline!");
 	if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
	new caller = Mobile[playerid];
	if(IsPlayerConnected(caller) && caller != -1)
	{
		if(caller < 500)
		{
			SendClientMessage(caller,  COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}They hung up.");
			format(string, sizeof(string), "* %s puts away their cellphone.", PlayerData[caller][Name]);
			ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Mobile[caller] = -1;
		}
		SendClientMessage(playerid,  COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}You hung up.");
		format(string, sizeof(string), "* %s puts away their cellphone.", PlayerData[playerid][Name]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Mobile[playerid] = -1;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}Your phone is in your pocket.");
	return 1;
}

YCMD:sms(playerid, params[], help)
{
	new string[144], phonenumb, text[100];
	if(PlayerData[playerid][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Your phone is offline!");
	if(PlayerData[playerid][PhoneNr] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a cellphone!");
	if(sscanf(params, "is[100]", phonenumb, text)) return SendUsage(playerid,"/sms <phone nr> <message>");
    if(FindIP(text) || Findhtml(text))
	{
		format(string, 256, "Warning: %s(%d) type on /sms: %s.", PlayerData[playerid][Name], playerid, text);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerData[i][PhoneNr] == phonenumb && phonenumb != 0)
		{
			new id = i;
			if(PlayerData[id][PhoneOnline] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player's phone is offline!");
			format(string, sizeof(string), "SMS: %s, Sender: %s ({FFFFFF}%s{FFFF00})", text,PlayerData[playerid][Name],DecimalNumber(playerid));
			SendClientMessage(id, COLOR_YELLOW, string);
			format(string, sizeof(string), "SMS: %s, Reciever: %s ({FFFFFF}%s{FFFF00})", text,PlayerData[id][Name],DecimalNumber(id));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}Text Message Delivered");
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Mobile: {FFFFFF}Message delivery failed...");
	return 1;
}

YCMD:id(playerid, params[], help)
{
	new id, sstring[256], afkt[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/id <Name>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(PlayerAFK[id] == 1 || IsPlayerPaused(id) == true)	format(afkt, sizeof(afkt), "[AFK]");
	else format(afkt, sizeof(afkt), "");
	format(sstring, sizeof(sstring), "{FFFFCC}ID: %s (%d) %s | Level: %d",afkt,id,PlayerData[id][Name],PlayerData[id][Level]);
	SendClientMessage(playerid, COLOR_WHITE, sstring);
	return 1;
}

YCMD:mypayday(playerid, params[], help)
{
	new string[128];
	format(string, sizeof(string), "You'll get the payday in %d minutes.",(60-OnExp[playerid]));
 	SendClientMessage(playerid,COLOR_NEWS,string);
	return 1;
}

YCMD:givepaydayall(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128];
	foreach(Player, i)
    {
        OnExp[i] = 59;
        format(string, sizeof(string), "AdmBot: All players online have 1 payday from Admin %s.",PlayerData[playerid][Name]);
        SendClientMessage(i,COLOR_NEWS,string);
	}
	return 1;
}

YCMD:givexpall(playerid, params[], help)
{
	new xp;
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "i", xp)) return SendUsage(playerid,"/givexpall <xp>");
	new string[128], str[128];
	foreach(Player, i)
    {
        PlayerData[i][Exp] += xp;
        PlayerData[i][TotalExp] += xp;
		format(string, sizeof(string), "AdmBot: All players online have recieved %d XP from Admin %s.",xp, PlayerData[playerid][Name]);
        SendClientMessage(i,COLOR_NEWS,string);

		mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[i][Exp],PlayerData[i][TotalExp],PlayerData[i][ID]);
		mysql_tquery(SQL, str, "", "");
	}
	return 1;
}

YCMD:aoffuninvite(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new vname[25], query[128];
	if(sscanf(params, "s[25]", vname)) return SendUsage(playerid,"/aoffuninvite <Exact Name>");
	if(GetPlayerIdFromName(vname) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player is online.");

	mysql_format(SQL, query, 128, "SELECT `id` FROM `users` WHERE LOWER(username) = LOWER('%s') LIMIT 1",vname);
	mysql_tquery(SQL, query, "AUninviteOff", "sd", vname,playerid);
	
	return 1;
}

YCMD:givexp(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,money,string[128],str[128];
	if(sscanf(params, "ui", id, money)) return SendUsage(playerid,"/givemxp <Name/Playerid> <money>");	
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	
	PlayerData[id][Exp] += money;
	PlayerData[id][TotalExp] += money;
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Exp`='%d',`TotalXP`='%d', WHERE `id`='%d' LIMIT 1",PlayerData[id][Exp],PlayerData[id][TotalExp],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	format(string, sizeof(string), "AdmCmd: %s has gived to %s %d XP.", PlayerData[playerid][Name], PlayerData[id][Name],money);
	ABroadCast(COLOR_LIGHTBLUE, string, 1);
	
	return 1;
}

YCMD:givelevelup(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,money,string[128],str[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/givelevelup <Name/Playerid>");	
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	
	PlayerData[id][Level] += 1;
	mysql_format(SQL, str,128,"UPDATE `users` SET `Level`='%d' WHERE `id`='%d' LIMIT 1",PlayerData[id][Level],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	format(string, sizeof(string), "AdmCmd: %s has gived %s level-up.", PlayerData[playerid][Name], PlayerData[id][Name],money);
	ABroadCast(COLOR_LIGHTBLUE, string, 1);
	return 1;
}

YCMD:givemoney(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id,money,string[128];
	if(sscanf(params, "ui", id, money)) return SendUsage(playerid,"/givemoney <Name/Playerid> <money>");	
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	GivePlayerCash(id, money);
	format(string, sizeof(string), "AdmCmd: %s has gived to %s %d money.", PlayerData[playerid][Name], PlayerData[id][Name],money);
	ABroadCast(COLOR_LIGHTBLUE, string, 1);
	PayLog(playerid, id, money);
	return 1;
}

YCMD:givemoneyall(playerid,params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new money,string[128];
	if(sscanf(params, "i", money)) return SendUsage(playerid,"/givemoneyal <money>");	
	foreach(Player, i)
	{
		GivePlayerCash(i, money);
		format(string, sizeof(string), "AdmBot: All players online has recieved %d money from Admin %s.",money,PlayerData[playerid][Name]);
		SendClientMessage(i,COLOR_NEWS,string);
	}
	return 1;
}

function OnPropTextdrawUpdate(update, h)
{
	new PropertyString[256];
	if(update == 1)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			DestroyDynamic3DTextLabel(HouseLabel[h]);
			format(PropertyString, sizeof(PropertyString), "{009900}House %d\nThis house is for sale\nPrice: {FFFFFF}$%s\n{009900}Level: {FFFFFF}%d\n{009900}Type {FFFFFF}/buyhouse {009900}to buy",h,Decimal(HouseInfo[h][hValue]),HouseInfo[h][hLevel]);		
			HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00FF,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
		}
		else if(HouseInfo[h][hOwned] == 1)
		{
			if(HouseInfo[h][hRentabil] == 0)
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString), "{009900}House %d\nOwner: {FFFFFF}%s\n{009900}Level: {FFFFFF}%d",h,HouseInfo[h][hOwner],HouseInfo[h][hLevel]);		
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00FF,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			}
			else
			{
				DestroyDynamic3DTextLabel(HouseLabel[h]);
				format(PropertyString, sizeof(PropertyString), "{009900}House %d\nOwner: {FFFFFF}%s\n{009900}Level: {FFFFFF}%d\n{009900}Rent: {FFFFFF}$%s\n{009900}to rent a room type {FFFFFF}/rentroom",h,HouseInfo[h][hOwner],HouseInfo[h][hLevel],Decimal(HouseInfo[h][hRent]));		
				HouseLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x09FF00FF,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			}
		}
	}
	else if(update == 2)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			DestroyDynamicPickup(BizzPickup[h]);
			format(PropertyString,sizeof(PropertyString),"{3366FF}Biz %d\n{FFFFFF}%s\n{3366FF}This biz is for sale\nPrice: {FFFFFF}$%s\n{3366FF}Level: {FFFFFF}%d\n{3366FF}Type {FFFFFF}/buybiz {3366FF}to buy",h,BizzInfo[h][bMessage],Decimal(BizzInfo[h][bBuyPrice]),BizzInfo[h][bLevelNeeded]);
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			BizzPickup[h] = CreateDynamicPickup(1239, 23, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], -1,-1,-1,100.0);
		}
		else if(BizzInfo[h][bOwned] == 1)
		{
			DestroyDynamic3DTextLabel(BizzLabel[h]);
			DestroyDynamicPickup(BizzPickup[h]);
			format(PropertyString,sizeof(PropertyString),"{3366FF}Biz %d\n{FFFFFF}%s\n{3366FF}Owner: {FFFFFF}%s\n{3366FF}Entrance Fee: {FFFFFF}$%s\n{3366FF}Type {FFFFFF}/enter {3366FF}to enter",h,BizzInfo[h][bMessage],BizzInfo[h][bOwner],Decimal(BizzInfo[h][bEntranceCost]));
			BizzLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			BizzPickup[h] = CreateDynamicPickup(1239, 23, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], -1,-1,-1,100.0);
		}
	}
	else if(update == 3)
	{
		if(SBizzInfo[h][sbOwned] == 0)
		{
			DestroyDynamic3DTextLabel(SBizzLabel[h]);
			DestroyDynamicPickup(SBizzPickup[h]);
			format(PropertyString,sizeof(PropertyString),"{3366FF}SBiz %d\n{FFFFFF}%s\n{3366FF}This biz is for sale\nPrice: {FFFFFF}$%s\n{3366FF}Level: {FFFFFF}%d\n{3366FF}Type {FFFFFF}/buybiz {3366FF}to buy",h,SBizzInfo[h][sbMessage],Decimal(SBizzInfo[h][sbBuyPrice]),SBizzInfo[h][sbLevelNeeded]);
			SBizzLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			SBizzPickup[h] = CreateDynamicPickup(1239, 23, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ], -1,-1,-1,100.0);
		}
		else if(SBizzInfo[h][sbOwned] == 1)
		{
			DestroyDynamic3DTextLabel(SBizzLabel[h]);
			DestroyDynamicPickup(SBizzPickup[h]);
			format(PropertyString,sizeof(PropertyString),"{3366FF}SBiz %d\n{FFFFFF}%s\n{3366FF}Owner: {FFFFFF}%s\n{3366FF}Fee: {FFFFFF}$%s",h,SBizzInfo[h][sbMessage],SBizzInfo[h][sbOwner],Decimal(SBizzInfo[h][sbEntranceCost]));
			SBizzLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			SBizzPickup[h] = CreateDynamicPickup(1239, 23, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ], -1,-1,-1,100.0);
		}
	}
	else if(update == 4)
	{
		if(PecoInfo[h][peOwned] == 0)
		{
            DestroyDynamic3DTextLabel(PecoLabel[h]);
			DestroyDynamicPickup(PecoPickup[h]);
			format(PropertyString,sizeof(PropertyString),"{3366FF}Gas Station %d\n{FFFFFF}%s\n{3366FF}This station is for sale\nPrice: {FFFFFF}$%d\n{3366FF}Level: {FFFFFF}%d\n{3366FF}Type {FFFFFF}/buygstation {3366FF}to buy",h,PecoInfo[h][peMessage],PecoInfo[h][peBuyPrice],PecoInfo[h][peLevelNeeded]);
			PecoLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,PecoInfo[h][peEntranceX],PecoInfo[h][peEntranceY], PecoInfo[h][peEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			PecoPickup[h] = CreateDynamicPickup(1239, 23, PecoInfo[h][peEntranceX], PecoInfo[h][peEntranceY], PecoInfo[h][peEntranceZ], -1,-1,-1,100.0);
		}
		else if(PecoInfo[h][peOwned] == 1)
		{
            DestroyDynamic3DTextLabel(PecoLabel[h]);
			DestroyDynamicPickup(PecoPickup[h]);
			format(PropertyString,sizeof(PropertyString),"{3366FF}Gas Station %d\n{FFFFFF}%s\n{3366FF}Owner: {FFFFFF}%s\n{3366FF}Price per liter: {FFFFFF}$%d",h,PecoInfo[h][peMessage],PecoInfo[h][peOwner],PecoInfo[h][peEntranceCost]);
			PecoLabel[h] = CreateDynamic3DTextLabel(PropertyString ,0x0066FFFF,PecoInfo[h][peEntranceX],PecoInfo[h][peEntranceY], PecoInfo[h][peEntranceZ],25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
			PecoPickup[h] = CreateDynamicPickup(1239, 23, PecoInfo[h][peEntranceX], PecoInfo[h][peEntranceY], PecoInfo[h][peEntranceZ], -1,-1,-1,100.0);
		}
	}
	return 1;
}

YCMD:createhouse(playerid, params[], help)
{
    new faction = PlayerData[playerid][Leader];
    if(faction != 5) return SendClientMessage(playerid, COLOR_WHITE, "Only for president.");
    new name[25], price, interior, str[128], string[128];
    if(sscanf(params, "s[25]ii", name, price, interior)) return SendUsage(playerid,"/createhouse <Exact Name> <Price> <Interior no.>");
    new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    new hid = houses + 1;
    GetPlayerPos(playerid, x, y, z);
	HouseInfo[hid][hEntrancex] = x;
	HouseInfo[hid][hEntrancey] = y;
	HouseInfo[hid][hEntrancez] = z;
	HouseInfo[hid][hValue] = price;
	strmid(HouseInfo[hid][hOwner], name, 0, strlen(name), 255);
	
	HouseInfo[hid][hHealth] = 1; HouseInfo[hid][hArmour] = 1; HouseInfo[hid][hLock] = 0; HouseInfo[hid][hRent] = 0; HouseInfo[hid][hRentabil] = 0;
	HouseInfo[hid][hTakings] = 0; HouseInfo[hid][hDate] = 0; HouseInfo[hid][hLevel] = 1, HouseInfo[hid][hOwned] = 1;
	
	switch(interior)
	{
  		case 2: { HouseInfo[hid][hExitx] = 140.17; HouseInfo[hid][hExity] = 1366.07; HouseInfo[hid][hExitz] = 1083.65; HouseInfo[hid][hInt] = 5; }
		case 3: { HouseInfo[hid][hExitx] = 2324.53; HouseInfo[hid][hExity] = -1149.54; HouseInfo[hid][hExitz] = 1050.71; HouseInfo[hid][hInt] = 12; }
		case 4: { HouseInfo[hid][hExitx] = 225.68; HouseInfo[hid][hExity] = 1021.45; HouseInfo[hid][hExitz] = 1084.02; HouseInfo[hid][hInt] = 7; }
		case 5: { HouseInfo[hid][hExitx] = 234.19; HouseInfo[hid][hExity] = 1063.73; HouseInfo[hid][hExitz] = 1084.21; HouseInfo[hid][hInt] = 6; }
		case 6: { HouseInfo[hid][hExitx] = 226.3; HouseInfo[hid][hExity] = 1114.24; HouseInfo[hid][hExitz] = 1080.99; HouseInfo[hid][hInt] = 5; }
		case 7: { HouseInfo[hid][hExitx] = 235.34; HouseInfo[hid][hExity] = 1186.68; HouseInfo[hid][hExitz] = 1080.26; HouseInfo[hid][hInt] = 3; }
		case 8: { HouseInfo[hid][hExitx] = 491.07; HouseInfo[hid][hExity] = 1398.5; HouseInfo[hid][hExitz] = 1080.26; HouseInfo[hid][hInt] = 2; }
		case 9: { HouseInfo[hid][hExitx] = 24.04; HouseInfo[hid][hExity] = 1340.17; HouseInfo[hid][hExitz] = 1084.38; HouseInfo[hid][hInt] = 10; }
		case 10: { HouseInfo[hid][hExitx] = -283.44; HouseInfo[hid][hExity] = 1470.93; HouseInfo[hid][hExitz] = 1084.38; HouseInfo[hid][hInt] = 15; }
		case 11: { HouseInfo[hid][hExitx] = -260.49; HouseInfo[hid][hExity] = 1456.75; HouseInfo[hid][hExitz] = 1084.37; HouseInfo[hid][hInt] = 4; }
		case 12: { HouseInfo[hid][hExitx] = 83.03; HouseInfo[hid][hExity] = 1322.28; HouseInfo[hid][hExitz] = 1083.87; HouseInfo[hid][hInt] = 9; }
		case 13: { HouseInfo[hid][hExitx] = 2317.89; HouseInfo[hid][hExity] = -1026.76; HouseInfo[hid][hExitz] = 1050.22; HouseInfo[hid][hInt] = 9; }
		case 14: { HouseInfo[hid][hExitx] = 2495.98; HouseInfo[hid][hExity] = -1692.08; HouseInfo[hid][hExitz] = 1014.74; HouseInfo[hid][hInt] = 3; }
		case 15: { HouseInfo[hid][hExitx] = 2807.48; HouseInfo[hid][hExity] = -1174.76; HouseInfo[hid][hExitz] = 1025.57; HouseInfo[hid][hInt] = 8; }
		case 16: { HouseInfo[hid][hExitx] = 2196.85; HouseInfo[hid][hExity] = -1204.25; HouseInfo[hid][hExitz] = 1049.02; HouseInfo[hid][hInt] = 6; }
		case 17: { HouseInfo[hid][hExitx] = 377.15; HouseInfo[hid][hExity] = 1417.41; HouseInfo[hid][hExitz] = 1081.33; HouseInfo[hid][hInt] = 15; }
		case 18: { HouseInfo[hid][hExitx] = 2270.38; HouseInfo[hid][hExity] = -1210.35; HouseInfo[hid][hExitz] = 1047.56; HouseInfo[hid][hInt] = 10; }
		case 19: { HouseInfo[hid][hExitx] = 446.99; HouseInfo[hid][hExity] = 1397.07; HouseInfo[hid][hExitz] = 1084.3; HouseInfo[hid][hInt] = 2; }
		case 20: { HouseInfo[hid][hExitx] = 387.22; HouseInfo[hid][hExity] = 1471.7; HouseInfo[hid][hExitz] = 1080.19; HouseInfo[hid][hInt] = 15; }
		case 21: { HouseInfo[hid][hExitx] = 22.88; HouseInfo[hid][hExity] = 1403.33; HouseInfo[hid][hExitz] = 1084.44; HouseInfo[hid][hInt] = 5; }
		case 22: { HouseInfo[hid][hExitx] = 2365.31; HouseInfo[hid][hExity] = -1135.6; HouseInfo[hid][hExitz] = 1050.88; HouseInfo[hid][hInt] = 8; }
		case 23: { HouseInfo[hid][hExitx] = 2237.59; HouseInfo[hid][hExity] = -1081.64; HouseInfo[hid][hExitz] = 1049.02; HouseInfo[hid][hInt] = 2; }
		case 24: { HouseInfo[hid][hExitx] = 295.04; HouseInfo[hid][hExity] = 1472.26; HouseInfo[hid][hExitz] = 1080.26; HouseInfo[hid][hInt] = 15; }
		case 25: { HouseInfo[hid][hExitx] = 261.12; HouseInfo[hid][hExity] = 1284.3; HouseInfo[hid][hExitz] = 1080.26; HouseInfo[hid][hInt] = 4; }
		case 26: { HouseInfo[hid][hExitx] = 221.92; HouseInfo[hid][hExity] = 1140.2; HouseInfo[hid][hExitz] = 1082.61; HouseInfo[hid][hInt] = 4; }
		case 27: { HouseInfo[hid][hExitx] = -68.81; HouseInfo[hid][hExity] = 1351.21; HouseInfo[hid][hExitz] = 1080.21; HouseInfo[hid][hInt] = 6; }
		case 28: { HouseInfo[hid][hExitx] = 260.85; HouseInfo[hid][hExity] = 1237.24; HouseInfo[hid][hExitz] = 1084.26; HouseInfo[hid][hInt] = 9; }
		case 29: { HouseInfo[hid][hExitx] = 2468.84; HouseInfo[hid][hExity] = -1698.24; HouseInfo[hid][hExitz] = 1013.51; HouseInfo[hid][hInt] = 2; }
		case 30: { HouseInfo[hid][hExitx] = 223.2; HouseInfo[hid][hExity] = 1287.08; HouseInfo[hid][hExitz] = 1082.14; HouseInfo[hid][hInt] = 1; }
		case 31: { HouseInfo[hid][hExitx] = 2283.04; HouseInfo[hid][hExity] = -1140.28; HouseInfo[hid][hExitz] = 1050.9; HouseInfo[hid][hInt] = 11; }
		case 32: { HouseInfo[hid][hExitx] = 328.05; HouseInfo[hid][hExity] = 1477.73; HouseInfo[hid][hExitz] = 1084.44; HouseInfo[hid][hInt] = 15; }
		case 33: { HouseInfo[hid][hExitx] = 223.2; HouseInfo[hid][hExity] = 1287.08; HouseInfo[hid][hExitz] = 1082.14; HouseInfo[hid][hInt] = 1; }
		case 34: { HouseInfo[hid][hExitx] = -42.59; HouseInfo[hid][hExity] = 1405.47; HouseInfo[hid][hExitz] = 1084.43; HouseInfo[hid][hInt] = 8; }
		case 35: { HouseInfo[hid][hExitx] = 446.9; HouseInfo[hid][hExity] = 506.35; HouseInfo[hid][hExitz] = 1001.42; HouseInfo[hid][hInt] = 12; }
		case 36: { HouseInfo[hid][hExitx] = 299.78; HouseInfo[hid][hExity] = 309.89; HouseInfo[hid][hExitz] = 1003.3; HouseInfo[hid][hInt] = 4; }
		case 37: { HouseInfo[hid][hExitx] = 2308.77; HouseInfo[hid][hExity] = -1212.94; HouseInfo[hid][hExitz] = 1049.02; HouseInfo[hid][hInt] = 6; }
		case 38: { HouseInfo[hid][hExitx] = 2233.64; HouseInfo[hid][hExity] = -1115.26; HouseInfo[hid][hExitz] = 1050.88; HouseInfo[hid][hInt] = 5; }
		case 39: { HouseInfo[hid][hExitx] = 2218.4; HouseInfo[hid][hExity] = -1076.18; HouseInfo[hid][hExitz] = 1050.48; HouseInfo[hid][hInt] = 1; }
		case 40: { HouseInfo[hid][hExitx] = 266.5; HouseInfo[hid][hExity] = 304.9; HouseInfo[hid][hExitz] = 999.15; HouseInfo[hid][hInt] = 2; }
		case 41: { HouseInfo[hid][hExitx] = 243.72; HouseInfo[hid][hExity] = 304.91; HouseInfo[hid][hExitz] = 999.15; HouseInfo[hid][hInt] = 1; }
		case 42: { HouseInfo[hid][hExitx] = 343.81; HouseInfo[hid][hExity] = 304.86; HouseInfo[hid][hExitz] = 999.15; HouseInfo[hid][hInt] = 6; }
		case 43: { HouseInfo[hid][hExitx] = 2259.38; HouseInfo[hid][hExity] = -1135.77; HouseInfo[hid][hExitz] = 1050.64; HouseInfo[hid][hInt] = 10; }
	}
	mysql_format(SQL, str,128,"INSERT INTO houses (ID, Owned) VALUES (%d, %d)",hid,HouseInfo[hid][hOwned]);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET Entrancex='%f' , Entrancey='%f' , Entrancez='%f' WHERE ID='%d'",HouseInfo[hid][hEntrancex], HouseInfo[hid][hEntrancey], HouseInfo[hid][hEntrancez], hid);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET Health='0' , Armour='0' , Lockk='0' WHERE ID='%d'",hid);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET Takings='0' , Drugs='0' , Materials='0' WHERE ID='%d'",hid);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET Rent='0' , Rentabil='0' , Date='0' WHERE ID='%d'",hid);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET Owner='%s' , Value='%d' , Level='%d' WHERE ID='%d'",HouseInfo[hid][hOwner],HouseInfo[hid][hValue],HouseInfo[hid][hLevel],hid);
	mysql_tquery(SQL, str, "", "");
    mysql_format(SQL, str,128,"UPDATE users SET HouseKey='%d' , Bank = Bank - '%d' WHERE username='%s'",hid, price, name);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET Exitx='%f' , Exity='%f' , Exitz='%f' WHERE ID='%d'",HouseInfo[hid][hExitx], HouseInfo[hid][hExity], HouseInfo[hid][hExitz], hid);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE houses SET `Int`='%d' WHERE ID='%d'",HouseInfo[hid][hInt],hid);
	mysql_tquery(SQL, str, "", "");
	new id = GetPlayerIdFromName(name);
	if(id != INVALID_PLAYER_ID)
	{//online	
		format(string, sizeof(string), "You selled a house to %s(%d) for $%s. ",PlayerData[id][Name],id,Decimal(price));
		SendClientMessage(playerid,COLOR_YELLOW2,string);
		format(string, sizeof(string), "Congratultions. You bought a new house for $%s. ",Decimal(price));
		SendClientMessage(id,COLOR_YELLOW2,string);
	    PlayerData[id][HKey] = hid;
		PlayerData[id][Bank] -= price;
	}
	
	houses += 1;
	
	OnPropTextdrawUpdate(1, hid);
	return 1;
}
YCMD:houseenter(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new hid;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "i", hid)) return SendUsage(playerid,"/houseenter <house id>");
	GetPlayerPos(playerid, x, y, z);
	HouseInfo[hid][hEntrancex] = x;
	HouseInfo[hid][hEntrancey] = y;
	HouseInfo[hid][hEntrancez] = z;
	
	new str2[512];
	mysql_format(SQL,str2,512,"UPDATE `houses` SET `Entrancex`='%f',`Entrancey`='%f',`Entrancez`='%f' WHERE `ID`='%d'",x,y,z,hid);
	mysql_tquery(SQL,str2, "", "");
	OnPropTextdrawUpdate(1, hid);
	return 1;
}

YCMD:bizenter(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new bid;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "i", bid)) return SendUsage(playerid,"/bizenter <biz id>");	
	GetPlayerPos(playerid, x, y, z);
	BizzInfo[bid][bEntranceX] = x;
	BizzInfo[bid][bEntranceY] = y;
	BizzInfo[bid][bEntranceZ] = z;
	
	new str2[512];
	mysql_format(SQL,str2,512,"UPDATE `bizz` SET `EntranceX`='%f',`EntranceY`='%f',`EntranceZ`='%f' WHERE `ID`='%d'",x,y,z,bid);
	mysql_tquery(SQL,str2, "", "");
	OnPropTextdrawUpdate(2, bid);
	return 1;
}

YCMD:pecoenter(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new bid;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "i", bid)) return SendUsage(playerid,"/pecoenter <id>");
	GetPlayerPos(playerid, x, y, z);
	PecoInfo[bid][peEntranceX] = x;
	PecoInfo[bid][peEntranceY] = y;
	PecoInfo[bid][peEntranceZ] = z;

	new str2[512];
	mysql_format(SQL,str2,512,"UPDATE `pecos` SET `EntranceX`='%f',`EntranceY`='%f',`EntranceZ`='%f' WHERE `ID`='%d'",x,y,z,bid);
	mysql_tquery(SQL,str2, "", "");
	OnPropTextdrawUpdate(4, bid);
	return 1;
}

YCMD:pecofill(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new bid;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "i", bid)) return SendUsage(playerid,"/pecofill <id>");
	GetPlayerPos(playerid, x, y, z);
	PecoInfo[bid][peExitX] = x;
	PecoInfo[bid][peExitY] = y;
	PecoInfo[bid][peExitZ] = z;

	new str2[512];
	mysql_format(SQL,str2,512,"UPDATE `pecos` SET `ExitX`='%f',`ExitY`='%f',`ExitZ`='%f' WHERE `ID`='%d'",x,y,z,bid);
	mysql_tquery(SQL,str2, "", "");
	return 1;
}

YCMD:sbizenter(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new bid;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "i", bid)) return SendUsage(playerid,"/sbizenter <sbiz id>");
	GetPlayerPos(playerid, x, y, z);
	SBizzInfo[bid][sbEntranceX] = x;
	SBizzInfo[bid][sbEntranceY] = y;
	SBizzInfo[bid][sbEntranceZ] = z;
	
	new str2[512];
	mysql_format(SQL,str2,512,"UPDATE `sbizz` SET `EntranceX`='%f',`EntranceY`='%f',`EntranceZ`='%f' WHERE `ID`='%d'",x,y,z,bid);
	mysql_tquery(SQL,str2, "", "");
	OnPropTextdrawUpdate(3, bid);
	return 1;
}

YCMD:gotoxyz(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128],interior;
	new Float:x, Float:y, Float:z;
	if(sscanf(params, "fffi", x,y,z,interior)) return SendUsage(playerid,"/gotoxyz <x> <y> <z> <interior>");
	SetPlayerPos(playerid, x, y, z);
	format(string,sizeof(string),"You've teleported to x = %f, y = %f, z = %f, interior %d.",x,y,z,interior);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid,interior);	
	return 1;
}

YCMD:setleader(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new id, faction,string[128];
	if(sscanf(params, "ui", id,faction)) return SendUsage(playerid,"/setleader <Name/Playerid> <faction>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(faction > 7 || faction < 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid faction number.");
	if(PlayerData[id][Member] != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player is member of a faction.");
	PlayerData[id][Leader] = faction;
	PlayerData[id][Rank] = 6;
	format(string, sizeof(string), "Admin %s promoted you as leader of %s.", PlayerData[playerid][Name], FactionName(faction));
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " You have given %s control to run Faction Number %d.", PlayerData[id][Name], faction);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmCmd: %s have promoted %s to Leader %s.", PlayerData[playerid][Name], PlayerData[id][Name], FactionName(faction));
	ABroadCast(COLOR_LIGHTRED, string, 1);
	if(faction == 0) { PlayerData[id][Char] = 47; PlayerData[id][Rank] = 0; PlayerData[id][SpawnChange] = 0;}
	if(faction == 1) { PlayerData[id][Char] = 265; PlayerData[id][Rank] = 8; }
	if(faction == 2) PlayerData[id][Char] = 270;
	if(faction == 3) PlayerData[id][Char] = 296;
	if(faction == 4) PlayerData[id][Char] = 46;
	if(faction == 5) PlayerData[id][Char] = 295;
	if(faction == 6) PlayerData[id][Char] = 147;
	if(faction == 7) PlayerData[id][Char] = 228;
	
	SetPlayerSkin(id,PlayerData[id][Char]);
	SetPlayerFColor(id);
	
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `Chara`='%d',`Leader`='%d',`Rank`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Char],PlayerData[id][Leader],PlayerData[id][Rank],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	if(faction >= 2 && faction <= 4)
	{
		for(new idt = 1; idt <= turfss; idt++)
		{
			if(TurfInfo[id][zOwned] == 2)
			{
				GangZoneShowForPlayer(id, Turfs[idt], TurfColorGrove);
			}
			if(TurfInfo[id][zOwned] == 3)
			{
				GangZoneShowForPlayer(id, Turfs[idt], TurfColorGSW);
			}
			if(TurfInfo[id][zOwned] == 4)
			{
				GangZoneShowForPlayer(id, Turfs[idt], TurfColorVNE);
			}
		}
		PlayerData[id][OnDuty] = 1;
	}
	if(faction == 5) PlayerData[id][OnDuty] = 1;
	return 1;
}

CMD:unban(playerid,params[])
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new vname[25],query[128];
	if(sscanf(params, "s[25]", vname)) return SendUsage(playerid,"/unban <Exact Name>");
	
	mysql_format(SQL, query, 128, "SELECT `id` FROM `users` WHERE LOWER(username) = LOWER('%s') LIMIT 1",vname);
	mysql_tquery(SQL, query, "PreUnban", "sd", vname,playerid);
	return 1;
}

function PreUnban(vname[], playerid)
{
	new query[128];
	if(cache_num_rows() == 0) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: [MYSQL]Player doesn't exist."); 
	mysql_format(SQL, query, 128, "SELECT `id`,`ip` FROM `bans` WHERE LOWER(Player) = LOWER('%s') LIMIT 1",vname);
	mysql_tquery(SQL, query, "Unban", "sd", vname,playerid);
	return 1;
}

function Unban(vname[], playerid)
{
	new query[128], string[128], ip[256];
	if(cache_num_rows() == 0) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: [MYSQL]Player isn't banned."); 
	cache_get_field_content(0, "ip", ip, SQL, 129);
	mysql_format(SQL, query,128,"UPDATE `users` SET `Banned`='0' WHERE `username`='%s' LIMIT 1",vname);
	mysql_tquery(SQL, query, "", "");
	
	mysql_format(SQL, query, 128,"DELETE FROM `bans` WHERE `Player`='%s'",vname);
	mysql_tquery(SQL, query, "", "");
	
	format(string, sizeof(string), "%s has been unbanned succesfully.", vname);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	
	format(string,sizeof(string),"unbanip %s",ip);
	SendRconCommand(string);
	SendRconCommand("reloadbans");
	format(string, sizeof(string), "IP %s has been unbanned from samp.ban",ip);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	
	ServerInfo[banned]--;
	mysql_format(SQL, query, 128,"UPDATE `infos` SET `banned`='%d' WHERE ID = 1",ServerInfo[banned]);
	mysql_tquery(SQL, query, "", "");
	return 1;
}

YCMD:safeboxs(playerid, params[], help)
{
	new string[512];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	for(new i = 1; i <= safeboxss; i++)
	{
		format(string, sizeof(string), "ID: {FFFFFF}%d{A9C4E4} | Money: {FFFFFF}$%s{A9C4E4} | Drugs: {FFFFFF}%d{A9C4E4} | Materials: {FFFFFF}%d{A9C4E4}", SafeBox[i][sbID], Decimal(SafeBox[i][sbMoney]), SafeBox[i][sbDrugs], SafeBox[i][sbMats]);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	return 1;
}

/*
enum peInfo
{
	peID,
	peOwned,
	peOwner[25],
	peMessage[128],
	Float:peEntranceX,
	Float:peEntranceY,
	Float:peEntranceZ,
	Float:peExitX,
	Float:peExitY,
	Float:peExitZ,
	peLevelNeeded,
	peBuyPrice,
	peEntranceCost,
	peTill,
	peLocked,
	peProducts,
	peMaxProducts,
	pePriceProd,
}
new PecoInfo[15][peInfo];
new Text3D:PecoLabel[sizeof(PecoInfo)];
new PecoPickup[sizeof(PecoInfo)];
*/

YCMD:asellpeco(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new str[128],biz;
	if(sscanf(params, "i", biz)) return SendUsage(playerid,"/asellpeco <biz id>");
	{
		PecoInfo[biz][peOwned] = 0;
		strmid(PecoInfo[biz][peOwner], "The State", 0, strlen("The State"), 255);
		
		format(str, sizeof(str), "~w~You have sold the Business");
		GameTextForPlayer(playerid, str, 10000, 3);
		OnPropTextdrawUpdate(4,biz);
		
		new Query[128];
		mysql_format(SQL, Query,128,"UPDATE `pecos` SET `Owned`='0',`Owner`='The State' WHERE `ID`='%d'",PecoInfo[biz][peID]);
		mysql_tquery(SQL, Query, "", "");
	}
	return 1;
}

YCMD:asellbiz(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new str[128],biz;
	if(sscanf(params, "i", biz)) return SendUsage(playerid,"/asellbiz <biz id>");
	{
		BizzInfo[biz][bLocked] = 1;
		BizzInfo[biz][bOwned] = 0;
		strmid(BizzInfo[biz][bOwner], "The State", 0, strlen("The State"), 255);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(str, sizeof(str), "~w~You have sold the Business");
		GameTextForPlayer(playerid, str, 10000, 3);
		OnPropTextdrawUpdate(2,biz);
		new Query[128];
		mysql_format(SQL, Query,128,"UPDATE `bizz` SET `Locked`='1',`Owned`='0',`Owner`='The State' WHERE `ID`='%d'",BizzInfo[biz][bID]);
		mysql_tquery(SQL, Query, "", "");
	}
	return 1;
}

YCMD:asellsbiz(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new str[128],sbiz;
	if(sscanf(params, "i", sbiz)) return SendUsage(playerid,"/asellsbiz <sbiz id>");
	{
		SBizzInfo[sbiz][sbLocked] = 1;
		SBizzInfo[sbiz][sbOwned] = 0;
		strmid(SBizzInfo[sbiz][sbOwner], "The State", 0, strlen("The State"), 255);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(str, sizeof(str), "~w~You have sold the Business");
		GameTextForPlayer(playerid, str, 10000, 3);
		OnPropTextdrawUpdate(3,sbiz);
		new Query [ 256 ] ;
		mysql_format(SQL, Query,256,"UPDATE `sbizz` SET `Locked`='1',`Owned`='0',`Owner`='The State' WHERE `ID`='%d'",SBizzInfo[sbiz][sbID]);
		mysql_tquery(SQL, Query, "", "");
	}
	return 1;
}

YCMD:buygstation(playerid, params[], help)
{
	new string[128];
    if(PlayerData[playerid][Bizkey] != -1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You already have a biz.");
	for(new b = 1; b <= pecos; b++)
	{
		if(PlayerToPoint(2.0, playerid, PecoInfo[b][peEntranceX], PecoInfo[b][peEntranceY], PecoInfo[b][peEntranceZ]) && PecoInfo[b][peOwned] == 0)
		{
			if(PlayerData[playerid][Level] < PecoInfo[b][peLevelNeeded]) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: Your level is too low.");
			if(PlayerData[playerid][Cash] < PecoInfo[b][peBuyPrice]) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't have enough money.");

			PlayerData[playerid][Bizkey] = b+200;
			PecoInfo[b][peOwned] = 1;
			strmid(PecoInfo[b][peOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
			GivePlayerCash(playerid,-PecoInfo[b][peBuyPrice]);

			mysql_format(SQL, string, 128,"UPDATE `users` SET `Bizkey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Bizkey],PlayerData[playerid][ID]);
			mysql_tquery(SQL, string, "", "");

			mysql_format(SQL, string, sizeof(string), "UPDATE pecos SET Owner='%s' WHERE id=%d", PecoInfo[b][peOwner], b);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE pecos SET Owned='%d' WHERE id=%d", PecoInfo[b][peOwned], b);
			mysql_tquery(SQL, string, "", "");

			OnPropTextdrawUpdate(3, b);
			return 1;
		}
	}
	return 1;
}

YCMD:bizfee(playerid, params[], help)
{
	new bouse = PlayerData[playerid][Bizkey];
	new price, str[128], string[128];
	if(bouse == -1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't won a biz.");
	if(sscanf(params, "i", price)) return SendUsage(playerid,"/bizfee <price>");
	if(price < 0 || price > 10) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: Invalid price ($1 - $10)");
	if(bouse >= 100)
	{
		if(bouse >= 200)
		{//Gas
		    PecoInfo[bouse-200][peEntranceCost] = price;
		    format(string, sizeof(string), "You set the fee to $%d.", price);
			SendClientMessage(playerid, COLOR_WHITE, string);
			
			mysql_format(SQL, str, 128, "UPDATE `pecos` SET `EntranceCost`='%d' WHERE `ID`='%d'",price,bouse-200);
			mysql_tquery(SQL, str, "", "");

			OnPropTextdrawUpdate(4, bouse);
            return 1;
		}
		else
		{//SBiz
			SBizzInfo[bouse-100][sbEntranceCost] = price;
			format(string, sizeof(string), "You set the fee to $%d.", price);
			SendClientMessage(playerid, COLOR_WHITE, string);
			
			mysql_format(SQL, str, 128, "UPDATE `bizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",price,bouse-100);
			mysql_tquery(SQL, str, "", "");
			
			OnPropTextdrawUpdate(3, bouse);
			return 1;
		}
	}
	else
	{//Biz
		BizzInfo[bouse][bEntranceCost] = price;
		format(string, sizeof(string), "You set the fee to $%d.", price);
		SendClientMessage(playerid, COLOR_WHITE, string);
		
		mysql_format(SQL, str, 128, "UPDATE `sbizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",price,bouse);
		mysql_tquery(SQL, str, "", "");
		
		OnPropTextdrawUpdate(2, bouse);
		return 1;
	}
}

YCMD:bizdeposit(playerid, params[], help)
{
	new amount, string[128], str[128];
	new bouse = PlayerData[playerid][Bizkey];
	if(bouse == -1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't won a biz.");
    if(sscanf(params, "i", amount)) return SendUsage(playerid,"/bizdeposit <amount>");
    if (bouse >= 100)
	{
		if(bouse >= 200)
		{
			GivePlayerCash(playerid, -amount);
			PecoInfo[bouse-200][peTill] += amount;

			format(string, sizeof(string), "You deposit $%s in your bussines. You have: $%s ", Decimal(amount),Decimal(PecoInfo[bouse-100][peTill]));
			SendClientMessage(playerid, COLOR_YELLOW, string);

			mysql_format(SQL, str, 128, "UPDATE `pecos` SET `Till`='%d' WHERE `ID`='%d'",PecoInfo[bouse-200][peTill],bouse-200);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else
		{
		    GivePlayerCash(playerid, -amount);
			SBizzInfo[bouse-100][sbTill] += amount;

			format(string, sizeof(string), "You deposit $%s in your bussines. You have: $%s ", Decimal(amount),Decimal(SBizzInfo[bouse-100][sbTill]));
			SendClientMessage(playerid, COLOR_YELLOW, string);

			mysql_format(SQL, str, 128, "UPDATE `sbizz` SET `Till`='%d' WHERE `ID`='%d'",SBizzInfo[bouse-100][sbTill],bouse-100);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
	}
	else
	{
		GivePlayerCash(playerid, -amount);
		BizzInfo[bouse][bTill] += amount;

		format(string, sizeof(string), "You deposit $%s in your bussines. You have: $%s ", Decimal(amount),Decimal(BizzInfo[bouse][bTill]));
		SendClientMessage(playerid, COLOR_YELLOW, string);

		mysql_format(SQL, str, 128, "UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bTill],bouse);
		mysql_tquery(SQL, str, "", "");
		return 1;
	}
}

YCMD:bizwithdraw(playerid, params[], help)
{
	new amount, string[128], str[128];
	new bouse = PlayerData[playerid][Bizkey];
	if(bouse == -1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't won a biz.");
    if(sscanf(params, "i", amount)) return SendUsage(playerid,"/bizwithdraw <amount>");
    if (bouse >= 100)
	{
		if(bouse >= 200)
		{
			GivePlayerCash(playerid, amount);
			PecoInfo[bouse-200][peTill] -= amount;

			format(string, sizeof(string), "You withdraw $%s from your bussines. You have: $%s ", Decimal(amount),Decimal(PecoInfo[bouse-100][peTill]));
			SendClientMessage(playerid, COLOR_YELLOW, string);

			mysql_format(SQL, str, 128, "UPDATE `pecos` SET `Till`='%d' WHERE `ID`='%d'",PecoInfo[bouse-200][peTill],bouse-200);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
		else
		{
		    GivePlayerCash(playerid, amount);
			SBizzInfo[bouse-100][sbTill] -= amount;

			format(string, sizeof(string), "You withdraw $%s from your bussines. You have: $%s ", Decimal(amount),Decimal(SBizzInfo[bouse-100][sbTill]));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			
			mysql_format(SQL, str, 128, "UPDATE `sbizz` SET `Till`='%d' WHERE `ID`='%d'",SBizzInfo[bouse-100][sbTill],bouse-100);
			mysql_tquery(SQL, str, "", "");
			return 1;
		}
	}
	else
	{
		GivePlayerCash(playerid, amount);
		BizzInfo[bouse][bTill] -= amount;
		
		format(string, sizeof(string), "You withdraw $%s from your bussines. You have: $%s ", Decimal(amount),Decimal(BizzInfo[bouse][bTill]));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		
		mysql_format(SQL, str, 128, "UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[bouse][bTill],bouse);
		mysql_tquery(SQL, str, "", "");
		return 1;
	}
}

YCMD:abizstats(playerid, params[], help)
{
    new bouse, string[128];
    if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
    if(sscanf(params, "i", bouse)) return SendUsage(playerid,"/abizstats <biz id>");
    if(bouse >= 100)
	{
		if(bouse >= 200)
		{//Gas
		    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string),"*** %s ***",PecoInfo[bouse-200][peMessage]);
			SendClientMessage(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "Locked: %d EntryFee: $%d Till: $%d", PecoInfo[bouse-200][peLocked], PecoInfo[bouse-200][peEntranceCost], PecoInfo[bouse-200][peTill]);
			SendClientMessage(playerid, COLOR_GRAD1,string);
			format(string, sizeof(string), "Products: %d/%d", PecoInfo[bouse-200][peProducts], PecoInfo[bouse-200][peMaxProducts]);
			SendClientMessage(playerid, COLOR_GRAD2,string);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
            return 1;
		}
		else
		{//SBiz
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string),"*** %s ***",SBizzInfo[bouse-100][sbMessage]);
			SendClientMessage(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "Locked: %d EntryFee: $%d Till: $%d UnitPrice: $%d", SBizzInfo[bouse-100][sbLocked], SBizzInfo[bouse-100][sbEntranceCost], SBizzInfo[bouse-100][sbTill], SBizzInfo[bouse-100][sbGunPrice]);
			SendClientMessage(playerid, COLOR_GRAD1,string);
			format(string, sizeof(string), "Products: %d/%d", SBizzInfo[bouse-100][sbProducts],SBizzInfo[bouse-100][sbMaxProducts]);
			SendClientMessage(playerid, COLOR_GRAD2,string);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
	}
	else
	{//Biz
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(string, sizeof(string),"*** %s ***",BizzInfo[bouse][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof(string), "Locked: %d EntryFee: $%d Till: $%d UnitPrice: $%d", BizzInfo[bouse][bLocked], BizzInfo[bouse][bEntranceCost], BizzInfo[bouse][bTill], BizzInfo[bouse][bGunPrice]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		format(string, sizeof(string), "Products: %d/%d", BizzInfo[bouse][bProducts],BizzInfo[bouse][bMaxProducts]);
		SendClientMessage(playerid, COLOR_GRAD2,string);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
}

YCMD:bizstats(playerid, params[], help)
{
    new bouse = PlayerData[playerid][Bizkey];
    new string[128];
    if(bouse == -1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't won a biz.");
    if(bouse >= 100)
	{
		if(bouse >= 200)
		{//Gas
		    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string),"*** %s ***",PecoInfo[bouse-200][peMessage]);
			SendClientMessage(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "Locked: %d EntryFee: $%d Till: $%d", PecoInfo[bouse-200][peLocked], PecoInfo[bouse-200][peEntranceCost], PecoInfo[bouse-200][peTill]);
			SendClientMessage(playerid, COLOR_GRAD1,string);
			format(string, sizeof(string), "Products: %d/%d", PecoInfo[bouse-200][peProducts], PecoInfo[bouse-200][peMaxProducts]);
			SendClientMessage(playerid, COLOR_GRAD2,string);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
            return 1;
		}
		else
		{//SBiz
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string),"*** %s ***",SBizzInfo[bouse-100][sbMessage]);
			SendClientMessage(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "Locked: %d EntryFee: $%d Till: $%d UnitPrice: $%d", SBizzInfo[bouse-100][sbLocked], SBizzInfo[bouse-100][sbEntranceCost], SBizzInfo[bouse-100][sbTill], SBizzInfo[bouse-100][sbGunPrice]);
			SendClientMessage(playerid, COLOR_GRAD1,string);
			format(string, sizeof(string), "Products: %d/%d", SBizzInfo[bouse-100][sbProducts],SBizzInfo[bouse-100][sbMaxProducts]);
			SendClientMessage(playerid, COLOR_GRAD2,string);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
	}
	else
	{//Biz
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(string, sizeof(string),"*** %s ***",BizzInfo[bouse][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof(string), "Locked: %d EntryFee: $%d Till: $%d UnitPrice: $%d", BizzInfo[bouse][bLocked], BizzInfo[bouse][bEntranceCost], BizzInfo[bouse][bTill], BizzInfo[bouse][bGunPrice]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		format(string, sizeof(string), "Products: %d/%d", BizzInfo[bouse][bProducts],BizzInfo[bouse][bMaxProducts]);
		SendClientMessage(playerid, COLOR_GRAD2,string);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
}
YCMD:abizfee(playerid, params[], help)
{
    new price, str[128], bouse, string[128];
    if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
    if(sscanf(params, "ii", bouse, price)) return SendUsage(playerid,"/abizfee <biz id> <price>");
    if(bouse >= 100)
	{
		if(bouse >= 200)
		{//Gas
		    PecoInfo[bouse-200][peEntranceCost] = price;
		    format(string, sizeof(string), "You set the fee to $%d.", price);
			SendClientMessage(playerid, COLOR_WHITE, string);

			mysql_format(SQL, str, 128, "UPDATE `pecos` SET `EntranceCost`='%d' WHERE `ID`='%d'",price,bouse-200);
			mysql_tquery(SQL, str, "", "");

			OnPropTextdrawUpdate(4, bouse);
            return 1;
		}
		else
		{//SBiz
			SBizzInfo[bouse-100][sbEntranceCost] = price;
			format(string, sizeof(string), "You set the fee to $%d.", price);
			SendClientMessage(playerid, COLOR_WHITE, string);

			mysql_format(SQL, str, 128, "UPDATE `bizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",price,bouse-100);
			mysql_tquery(SQL, str, "", "");

			OnPropTextdrawUpdate(3, bouse);
			return 1;
		}
	}
	else
	{//Biz
		BizzInfo[bouse][bEntranceCost] = price;
		format(string, sizeof(string), "You set the fee to $%d.", price);
		SendClientMessage(playerid, COLOR_WHITE, string);

		mysql_format(SQL, str, 128, "UPDATE `sbizz` SET `EntranceCost`='%d' WHERE `ID`='%d'",price,bouse);
		mysql_tquery(SQL, str, "", "");

		OnPropTextdrawUpdate(2, bouse);
		return 1;
	}
}
YCMD:buybiz(playerid, params[], help)
{
	new string[128];
    if(PlayerData[playerid][Bizkey] != -1) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You already have a biz.");
	for(new b = 1; b <= sbizzs; b++)
	{
		if(PlayerToPoint(2.0, playerid, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
		{
			if(PlayerData[playerid][Level] < SBizzInfo[b][sbLevelNeeded]) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: Your level is too low.");
			if(PlayerData[playerid][Cash] < SBizzInfo[b][sbBuyPrice]) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't have enough money.");

			PlayerData[playerid][Bizkey] = b+100;
			SBizzInfo[b][sbOwned] = 1;
			strmid(SBizzInfo[b][sbOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
			GivePlayerCash(playerid,-SBizzInfo[b][sbBuyPrice]);

			mysql_format(SQL, string, 128,"UPDATE `users` SET `Bizkey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Char],PlayerData[playerid][ID]);
			mysql_tquery(SQL, string, "", "");
			
			mysql_format(SQL, string, sizeof(string), "UPDATE sbizz SET Owner='%s' WHERE id=%d", SBizzInfo[b][sbOwner], b);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE sbizz SET Owned='%d' WHERE id=%d", SBizzInfo[b][sbOwned], b);
			mysql_tquery(SQL, string, "", "");

			OnPropTextdrawUpdate(3, b);
			return 1;
		}
	}
	for(new b = 1; b <= bizzs; b++)
	{
		if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
		{
			if(PlayerData[playerid][Level] < BizzInfo[b][bLevelNeeded]) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: Your level is too low.");
			if(PlayerData[playerid][Cash] < BizzInfo[b][bBuyPrice]) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: You don't have enough money.");

			PlayerData[playerid][Bizkey] = b;
			BizzInfo[b][bOwned] = 1;
			strmid(BizzInfo[b][bOwner], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
			GivePlayerCash(playerid,-BizzInfo[b][bBuyPrice]);

			mysql_format(SQL, string, 128,"UPDATE `users` SET `Bizkey`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][Char],PlayerData[playerid][ID]);
			mysql_tquery(SQL, string, "", "");
			
			mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Owner='%s' WHERE id=%d", BizzInfo[b][bOwner], b);
			mysql_tquery(SQL, string, "", "");
			mysql_format(SQL, string, sizeof(string), "UPDATE bizz SET Owned='%d' WHERE id=%d", BizzInfo[b][bOwned], b);
			mysql_tquery(SQL, string, "", "");

			OnPropTextdrawUpdate(2, b);
			return 1;
		}
	}
	return 1;
}

YCMD:edit(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new name[64],amount,string[512];
	if(sscanf(params, "s[64]i", name, amount))
	{
		SendUsage(playerid,"/edit <name> <amount>");
		SendUsage(playerid,"Available names: Level, Price, Funds, Products");
	}
	else
	{
		for(new i = 1; i <= houses; i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				format(string, sizeof(string), "House: %d", i);
				SendClientMessage(playerid, COLOR_YELLOW2, string);
				if(amount > 0)
				{
				    if(strcmp(name,"level",true) == 0)
				    {
						HouseInfo[i][hLevel] = amount;
						new str2[512];
						mysql_format(SQL, str2,512,"UPDATE `houses` SET `Level`='%d' WHERE `ID`='%d'",HouseInfo[i][hLevel],HouseInfo[i][hID]);
						mysql_tquery(SQL, str2, "", "");
						OnPropTextdrawUpdate(1, i);
					}
					else if(strcmp(name,"price",true) == 0)
				    {
						HouseInfo[i][hValue] = amount;
						new str2[512];
						mysql_format(SQL, str2,512,"UPDATE `houses` SET `Value`='%d' WHERE `ID`='%d'",HouseInfo[i][hValue],HouseInfo[i][hID]);
						mysql_tquery(SQL, str2, "", "");
						OnPropTextdrawUpdate(1, i);
					}
				}
			}
		}
		for(new i = 1; i <= bizzs; i++)
		{
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
			{
				format(string, sizeof(string), "Biz: %d", i);
				SendClientMessage(playerid, COLOR_YELLOW2, string);
				if(amount > 0)
				{
				    if(strcmp(name,"level",true) == 0)
				    {
						BizzInfo[i][bLevelNeeded] = amount;
						new Query[128];
						mysql_format(SQL, Query,128,"UPDATE `bizz` SET `LevelNeeded`='%d' WHERE `ID`='%d'",BizzInfo[i][bLevelNeeded],BizzInfo[i][bID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(2, i);
					}
					else if(strcmp(name,"price",true) == 0)
				    {
						BizzInfo[i][bBuyPrice] = amount;
						new Query[128];
						mysql_format(SQL, Query,128,"UPDATE `bizz` SET `BuyPrice`='%d' WHERE `ID`='%d'",BizzInfo[i][bBuyPrice],BizzInfo[i][bID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(2, i);
					}
					else if(strcmp(name,"funds",true) == 0)
				    {
						BizzInfo[i][bTill] = amount;
						new Query[128];
						mysql_format(SQL, Query,128,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[i][bTill],BizzInfo[i][bID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(2, i);
					}
					else if(strcmp(name,"products",true) == 0)
				    {
						BizzInfo[i][bProducts] = amount;
						new Query[128];
						mysql_format(SQL, Query,128,"UPDATE `bizz` SET `Products`='%d' WHERE `ID`='%d'",BizzInfo[i][bProducts],BizzInfo[i][bID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(2, i);
					}
				}
			}
		}
		for(new i = 1; i <= sbizzs; i++)
		{
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
			{
				format(string, sizeof(string), "SBiz: %d", i);
				SendClientMessage(playerid, COLOR_YELLOW2, string);
				if(amount > 0)
				{
				    if(strcmp(name,"level",true) == 0)
				    {
						SBizzInfo[i][sbLevelNeeded] = amount;
						new
							Query [ 256 ] ;
						mysql_format(SQL, Query,256,"UPDATE `sbizz` SET `LevelNeeded`='%d' WHERE `ID`='%d'",SBizzInfo[i][sbLevelNeeded],SBizzInfo[i][sbID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(3, i);
					}
					else if(strcmp(name,"price",true) == 0)
				    {
						SBizzInfo[i][sbBuyPrice] = amount;
						new
							Query [ 256 ] ;
						mysql_format(SQL, Query,256,"UPDATE `sbizz` SET `BuyPrice`='%d' WHERE `ID`='%d'",SBizzInfo[i][sbBuyPrice],SBizzInfo[i][sbID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(3, i);
					}
					else if(strcmp(name,"funds",true) == 0)
				    {
						SBizzInfo[i][sbTill] = amount;
						new
							Query [ 256 ] ;
						mysql_format(SQL, Query,256,"UPDATE `sbizz` SET `Till`='%d' WHERE `ID`='%d'",SBizzInfo[i][sbTill],SBizzInfo[i][sbID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(3, i);
					}
					else if(strcmp(name,"products",true) == 0)
				    {
						SBizzInfo[i][sbProducts] = amount;
						new
							Query [ 256 ] ;
						mysql_format(SQL, Query,256,"UPDATE `sbizz` SET `Products`='%d' WHERE `ID`='%d'",SBizzInfo[i][sbProducts],SBizzInfo[i][sbID]);
						mysql_tquery(SQL, Query, "", "");
						OnPropTextdrawUpdate(3, i);
					}
				}
			}
		}
	}
	return 1;
}

YCMD:safeboxedit(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new box, name[20], amount, string[128], str[512];
	if(sscanf(params, "is[20]i", box, name, amount))		
	{
		SendUsage(playerid,"/safeboxedit <Safebox ID> <name> <amount>");
		SendUsage(playerid,"Avaiable names: money, drugs, mats.");
	}
	else
	{
		if((box > 7) || (box < 1)) return 1;
		if( strcmp ( name, "money" , true ) == 0 )
		{
			SafeBox[box][sbMoney] += amount;
			
			mysql_format(SQL,str,512,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[box][sbMoney],box);
			mysql_tquery(SQL,str, "", "");
			
			format(string, sizeof(string), "You put $%s money in safebox %d.",Decimal(amount),box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "deposit %s money [ADMIN].",Decimal(amount));
			SafeboxLog(box,playerid,string);
		}
		if( strcmp ( name, "drugs" , true ) == 0 )
		{
			SafeBox[box][sbDrugs] += amount;
			
			mysql_format(SQL,str,512,"UPDATE `safeboxs` SET `Drugs`='%d' WHERE `ID`='%d'",SafeBox[box][sbDrugs],box);
			mysql_tquery(SQL,str, "", "");
			
			format(string, sizeof(string), "You put %d drugs in safebox %d.",amount,box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "deposit %d drugs [ADMIN].",amount);
			SafeboxLog(box,playerid,string);
		}
		if( strcmp ( name, "mats" , true ) == 0 )
		{
			SafeBox[box][sbMats] += amount;
			
			mysql_format(SQL,str,512,"UPDATE `safeboxs` SET `Mats`='%d' WHERE `ID`='%d'",SafeBox[box][sbMats],box);
			mysql_tquery(SQL,str, "", "");
			
			format(string, sizeof(string), "You put %d materials in safebox %d.",amount,box);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "deposit %d materials [ADMIN].",amount);
			SafeboxLog(box,playerid,string);
		}
	}
	return 1;
}
YCMD:rac(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128];
	new bool:unwanted[MAX_VEHICLES];
	foreach(Player, i)
    {
       	if(IsPlayerInAnyVehicle(i))
		{
			unwanted[GetPlayerVehicleID(i)] = true;
		}
    }
    format(string, sizeof(string), "AdmCmd: %s respawned all cars.", PlayerData[playerid][Name]);
	ABroadCast(COLOR_LIGHTRED,string,1);
	for(new car = 1; car <= vehss; car++)
	{
	    if(car == INVALID_VEHICLE_ID)
	    {
			break;
		}
		if(!unwanted[car])
		{
			if(StaticVeh[car][vModel] != 435 && StaticVeh[car][vSpecial] != 2) SetVehicleToRespawn(car);
	  		if(StaticVeh[car][vModel] == 481 || StaticVeh[car][vModel] == 509 || StaticVeh[car][vModel] == 510 || StaticVeh[car][vModel] == 462)
			{
				new e,l,a,d,b,bo,o;
				GetVehicleParamsEx(car,e,l,a,d,b,bo,o);
				SetVehicleParamsEx(car,1,l,a,d,b,bo,o);
			}
			else
			{
			    new e,l,a,d,b,bo,o;
				GetVehicleParamsEx(car,e,l,a,d,b,bo,o);
				SetVehicleParamsEx(car,0,l,a,d,b,bo,o);
			}
		}
	}
	return 1;
}

YCMD:musicforall(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new link[256],string[128];
	if(sscanf(params, "s[256]", link)) return SendUsage(playerid,"/musicforall <link>");
	foreach(Player, i)
	{
		StopAudioStreamForPlayer(i);
		PlayAudioStreamForPlayer(i, link);
		format(string, sizeof(string), "AdmBot: Admin %s plays a song for all players.",PlayerData[playerid][Name]);
		SendClientMessage(i,COLOR_NEWS,string);
	}
	return 1;
}

YCMD:youtube(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new link[256],string[128];
	if(sscanf(params, "s[256]", link)) return SendUsage(playerid,"/youtube <link>");
	foreach(Player, i)
	{
		StopAudioStreamForPlayer(i);
		YoutubeStream(playerid, link);
		format(string, sizeof(string), "AdmBot: Admin %s plays a song for all players.",PlayerData[playerid][Name]);
		SendClientMessage(i,COLOR_NEWS,string);
	}
	return 1;
}


YCMD:stopmusicforall(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new string[128];
	foreach(Player, i)
	{
	    StopAudioStreamForPlayer(i);
		format(string, sizeof(string), "AdmBot: Admin %s stops the music for all players.",PlayerData[playerid][Name]);
		SendClientMessage(i,COLOR_NEWS,string);
	}
	return 1;
}

YCMD:musichere(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new link[256],string[128];
	new Float:distance;
	if(sscanf(params, "s[256]i", link,distance)) return SendUsage(playerid,"/musichere <link> <distance>");
	foreach(Player, i)
	{
		StopAudioStreamForPlayer(i);
	}
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
  	PlayAudioStreamForPlayer(playerid, link, X, Y, Z, distance, 1);
	format(string, sizeof(string), "AdmBot: Admin %s plays a song for all players.",PlayerData[playerid][Name]);
	ProxDetector(distance, playerid, string, COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS,COLOR_NEWS);
	return 1;
}

YCMD:spawnchange(playerid, params[], help)
{
	new str[128];
	new spawn = PlayerData[playerid][SpawnChange];
	switch(spawn)
	{
		case 0:
		{//Public Spawn
			if(PlayerData[playerid][HKey] == -1)
			{//No House
				if(PlayerData[playerid][Member] + PlayerData[playerid][Leader] == 0)
				{//No House + Faction
					SendClientMessage(playerid, COLOR_WHITE, "You don't have a house and you aren't member of a faction.");
					PlayerData[playerid][SpawnChange] = 0;
				}
				else
				{//No House, but with faction
					SendClientMessage(playerid, COLOR_WHITE, "You don't have a house, you'll be spawned at HQ.");
					PlayerData[playerid][SpawnChange] = 2;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You'll be spawned home.");
				PlayerData[playerid][SpawnChange] = 1;
			}
		}
		case 1:
		{//Home
			if(PlayerData[playerid][Member] + PlayerData[playerid][Leader] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You aren't member of a faction, you'll be spawned at Normal Spawn");
				PlayerData[playerid][SpawnChange] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You'll be spawned at your HQ");
				PlayerData[playerid][SpawnChange] = 2;
			}
		}
		case 2:
		{//HQ
			SendClientMessage(playerid, COLOR_WHITE, "You'll be spawned at Normal Spawn.");
			PlayerData[playerid][SpawnChange] = 0;
		}
	}
	mysql_format(SQL, str,128,"UPDATE `users` SET `SpawnChange`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[playerid][SpawnChange],PlayerData[playerid][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

CMD:server(playerid, params[])
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	ShowPlayerDialog(playerid, DIALOG_SERVER, DIALOG_STYLE_LIST, "Server Control Panel", "Server Gravity\nServer Name\nServer Password\nServer Website\n","Select", "Cancel");
	return 1;
}
function AUninviteOff(vname[],playerid)
{
	new str[256], string[128];
	if(cache_num_rows() == 0) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: [MYSQL]Player doesn't exist."); 

	format(string, sizeof(string), "%s has been uninvited (offline).", vname);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	
	mysql_format(SQL, str,256,"UPDATE `users` SET `Member`='0',`Leader`='0',`Rank`='0',`Chara`='0',`Fpunish`='0,`SpawnChange`='0' WHERE `username`='%s' LIMIT 1",vname);
	mysql_tquery(SQL, str, "", "");
	
	return 1;
}

function AdminOff(vname[],level,playerid)
{
	new str[128], string[128];
	if(cache_num_rows() == 0) return SendClientMessage(playerid, COLOR_WHITE,"{FFFFCC}Error: [MYSQL]Player doesn't exist."); 

	format(string, sizeof(string), "You have promoted %s to a level %d admin. (offline)", vname,level);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "AdmCmd: %s has promoted %s to a level %d admin. (offline)", PlayerData[playerid][Name], vname,level);
	ABroadCast(COLOR_LIGHTBLUE, string, 1);
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Admin`='%d' WHERE `username`='%s' LIMIT 1",level,vname);
	mysql_tquery(SQL, str, "", "");
	
	return 1;
}

YCMD:veh(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	new model,color1,color2,string[128],sendername[25];
	new lights,alarm,doors,bonnet,boot,objective;
	if(sscanf(params, "iii", model,color1,color2)) return SendUsage(playerid,"/veh <model> <color1> <color2>");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
	new carid = CreateVehicle(model, X,Y,Z, 0.0, color1, color2, -1);
	SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective);
	GetPlayerName(playerid,sendername, sizeof(sendername));
	format(string, sizeof(string), "{F81414}AdmWarning:{FFFFFF} %s has been spawned an %s [ID:%d] !",sendername,vehName[GetVehicleModel(carid)-400],carid);
    ABroadCast(COLOR_WHITE,string,1);
	return 1;
}

YCMD:jetpack(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	SetPlayerSpecialAction(playerid,2);
	return 1;
}

YCMD:jetpackoff(playerid, params[], help)
{
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	SetPlayerSpecialAction(playerid,0);
	return 1;
}

stock GetRank(playerid)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	new leader = PlayerData[playerid][Leader];
	new rank = PlayerData[playerid][Rank];
	new ftexst[35];
	switch(faction)
	{
		case 0: ftexst = "None";
		case 1: 
		{// Police Departament
			if(leader > 0) ftexst = "Chief Commissioner";
			else
			switch(rank)
			{
				case 1: ftexst = "Cadet";
				case 2: ftexst = "Officer";
				case 3: ftexst = "Sheriff";
				case 4: ftexst = "Major Sergeant";
				case 5: ftexst = "Chief Inspector";
				case 6: ftexst = "Staff Superintendent";
				case 7: ftexst = "Commander";
				case 8: ftexst = "Deputy Chief";
			}
		}
		case 2:
		{// Grove St. 125
			if(leader > 0) ftexst = "Big Papa";
			else
			switch(rank)
			{
				case 6: ftexst = "Green Thug";
				case 5: ftexst = "Original Gangsta";
				case 4: ftexst = "Big Gangsta";
				case 3: ftexst = "Gangsta";
				case 2: ftexst = "Street Soldier";
				case 1: ftexst = "Associate";
			}
		}
		case 3:
		{// Grape Street Watts
			if(leader > 0) ftexst = "Master";
			else
			switch(rank)
			{
				case 6: ftexst = "Advisor";
				case 5: ftexst = "Assistant";
				case 4: ftexst = "Elite";
				case 3: ftexst = "Ganja";
				case 2: ftexst = "Freshman";
				case 1: ftexst = "Newcomer";
			}
		}
		case 4:
		{// Varrio Nuevo Estrada
			if(leader > 0) ftexst = "Jefe";
			else
			switch(rank)
			{
				case 6: ftexst = "Pee Wee";
				case 5: ftexst = "Real Boy";
				case 4: ftexst = "Guerro";
				case 3: ftexst = "Pandillero";
				case 2: ftexst = "Soldado";
				case 1: ftexst = "Cholo";
			}
		}
		case 5:
		{// SA Government
			if(leader > 0) ftexst = "President";
			else
			switch(rank)
			{
				case 6: ftexst = "Prime Minister";
				case 5: ftexst = "Congressman";
				case 4: ftexst = "Governor";
				case 3: ftexst = "Politician";
				case 2: ftexst = "Party member";
				case 1: ftexst = "Mediator";
			}
		}
		case 6:
		{// SA Network
			if(leader > 0) ftexst = "SAN Network Director";
			else
			switch(rank)
			{
				case 6: ftexst = "Network Producer";
				case 5: ftexst = "Network Anchor";
				case 4: ftexst = "Editor";
				case 3: ftexst = "Reporter";
				case 2: ftexst = "Journalist";
				case 1: ftexst = "Intern";
			}
		}
		case 7:
		{// Emergency Department";
			if(leader > 0) ftexst = "Unit Manager";
			else
			switch(rank)
			{
				case 6: ftexst = "Area Manager";
				case 5: ftexst = "Department Head";
				case 4: ftexst = "Emergency Medic";
				case 3: ftexst = "Medical Practioner";
				case 2: ftexst = "Student Doctor";
				case 1: ftexst = "Disciple";
			}
		}
	}
	return ftexst;
}

YCMD:untie(playerid, params[], help)
{
    new id, string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
    if( faction < 2 || faction > 4 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't member of a gang.");
    new rank = PlayerData[playerid][Rank];
    if( rank < 3 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're rank is too low.");
    if(sscanf(params, "u", id)) return SendUsage(playerid,"/tie <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't untie yourself!");
	if(PlayerTied[id] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't tied!");
	new car = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, car))
    {
        format(string, sizeof(string), "* You were untied up by %s.", PlayerData[playerid][Name]);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You untied %s up.", PlayerData[id][Name]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		GameTextForPlayer(id, "~g~Untied", 2500, 3);
		TogglePlayerControllable(id, 1);
		PlayerTied[id] = 0;
    }
    else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not in your car, or your not the driver!");
    return 1;
}

YCMD:tie(playerid, params[], help)
{
	new id, string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
    if( faction < 2 || faction > 4 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't member of a gang.");
    new rank = PlayerData[playerid][Rank];
    if( rank < 3 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're rank is too low.");
    if(sscanf(params, "u", id)) return SendUsage(playerid,"/tie <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't tie yourself!");
	if(PlayerTied[id] == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player already tied!");
	new car = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(id, car))
    {
        format(string, sizeof(string), "* You were tied up by %s, till untie.", PlayerData[playerid][Name]);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You tied %s up, till untie.", PlayerData[id][Name]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s ties %s up, so he wont go anywhere.", PlayerData[playerid][Name], PlayerData[id][Name]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		GameTextForPlayer(id, "~r~Tied", 2500, 3);
		TogglePlayerControllable(id, 0);
		PlayerTied[id] = 1;
    }
    else return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not in your car, or your not the driver!");
	return 1;
}

YCMD:order(playerid, params[], help)
{
	new number, meleeid = 0;
    new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
    if( faction < 2 || faction > 4 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't member of a gang.");
    if( PlayerData[playerid][InHQ] == -1 ) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in HQ.");
    if(sscanf(params, "i", number))
	{
		SendUsage(playerid,"/order <number>");
		SendUsage(playerid,"Order 1 ($50): Deagle(100)");
		SendUsage(playerid,"Order 2 ($150): Deagle(100) + AK47(200)");
		SendUsage(playerid,"Order 3 ($200): Deagle(100) + AK47(200) + Melee");
		SendUsage(playerid,"Order 4 ($350): Deagle(100) + AK47(200) + Melee + MP5(150)");
		SendUsage(playerid,"Order 5 ($500): Deagle(100) + AK47(200) + Melee + MP5(150) + Rifle(20)");
		SendUsage(playerid,"Order 6 ($600): Deagle(100) + AK47(200) + Melee + MP5(150) + Sniper(15)");
	}
	else
	{
	    if(number < 1 || number > 6) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid order no.");
		new rank = PlayerData[playerid][Rank];
		if(number > rank) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're rank is too low.");
		switch(faction)
		{
		    case 2: meleeid = 5;
		    case 3: meleeid = 15;
			case 4: meleeid = 2;
		}
		switch(number)
		{
		    case 1:
		    {
				if(PlayerData[playerid][Cash] < 50) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
				GivePlayerWeapon(playerid, 24, 100);
				if(War[faction] == 0)
				{
					GivePlayerCash(playerid, -50);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($50)You recieved: Deagle(100).");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You recieved: Deagle(100).");
				}
		    }
		    case 2:
		    {
				if(PlayerData[playerid][Cash] < 150) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
				GivePlayerWeapon(playerid, 24, 100);
				GivePlayerWeapon(playerid, 30, 200);
				if(War[faction] == 0)
				{
					GivePlayerCash(playerid, -150);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($150)You recieved: Deagle(100) + AK47(200).");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($WAR)You recieved: Deagle(100) + AK47(200).");
				}
		    }
		    case 3:
		    {
				if(PlayerData[playerid][Cash] < 200) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
				GivePlayerWeapon(playerid, 24, 100);
				GivePlayerWeapon(playerid, 30, 200);
				GivePlayerWeapon(playerid, meleeid, 1);
				if(War[faction] == 0)
				{
					GivePlayerCash(playerid, -200);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($200)You recieved: Deagle(100) + AK47(200) + Melee.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You recieved: Deagle(100) + AK47(200) + Melee.");
				}
		    }
		    case 4:
		    {
		        if(PlayerData[playerid][Cash] < 350) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
				GivePlayerWeapon(playerid, 24, 100);
				GivePlayerWeapon(playerid, 30, 200);
				GivePlayerWeapon(playerid, meleeid, 1);
				GivePlayerWeapon(playerid, 29, 150);
				if(War[faction] == 0)
				{
					GivePlayerCash(playerid, -350);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($350)You recieved: Deagle(100) + AK47(200) + Melee + MP5(150).");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You recieved: Deagle(100) + AK47(200) + Melee + MP5(150).");
				}
		    }
		    case 5:
		    {
		        if(PlayerData[playerid][Cash] < 500) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
				GivePlayerWeapon(playerid, 24, 100);
				GivePlayerWeapon(playerid, 30, 200);
				GivePlayerWeapon(playerid, meleeid, 1);
				GivePlayerWeapon(playerid, 29, 150);
				GivePlayerWeapon(playerid, 33, 20);
				if(War[faction] == 0)
				{
					GivePlayerCash(playerid, -500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($500)You recieved: Deagle(100) + AK47(200) + Melee + MP5(150) + Rifle(20).");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You recieved: Deagle(100) + AK47(200) + Melee + MP5(150) + Rifle(20).");
				}
		    }
		    case 6:
		    {
		        if(PlayerData[playerid][Cash] < 600) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
				GivePlayerWeapon(playerid, 24, 100);
				GivePlayerWeapon(playerid, 30, 200);
				GivePlayerWeapon(playerid, meleeid, 1);
				GivePlayerWeapon(playerid, 29, 150);
                GivePlayerWeapon(playerid, 34, 15);
				if(War[faction] == 0)
				{
					GivePlayerCash(playerid, -600);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ($600)You recieved: Deagle(100) + AK47(200) + Melee + MP5(150) + Sniper(15).");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* (WAR)You recieved: Deagle(100) + AK47(200) + Melee + MP5(150) + Sniper(15).");
				}
		    }
		}
	}
	return 1;
}

YCMD:r(playerid, params[], help)
{
	new message[128],string[256];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/r <message>");
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(FindIP(message) || Findhtml(message))
	{
		format(string, 256, "Warning: %s(%d) type on /r: %s.", PlayerData[playerid][Name], playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	format(string, sizeof(string), "** %s %s: %s, over. **", GetRank(playerid), PlayerData[playerid][Name], message); 
	SendRadioMessage(faction, TEAM_BLUE_COLOR, string);
	return 1;
}

YCMD:live(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	if(PlayerData[playerid][OnDuty] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not on-duty.");
	if(TalkingLive[playerid] >= 0)
	{
	    foreach(Player, i)
		{
            if(TalkingLive[i] >= 0)
            {
                SendClientMessage(i, COLOR_LIGHTBLUE, "* Live Conversation ended.");
                TogglePlayerControllable(i, 1);
                TalkingLive[i] = -1;
            }
		}
		return 1;
	}
	if(PlayerData[playerid][Rank] < 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must be rank 3+!");
	new id, string[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/live <Name/Playerid>");
	{
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
  		if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You cannot Talk Live with yourself!");
		format(string, sizeof(string), "* You offered %s to have a Live Conversation.", PlayerData[id][Name]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s offered you to have a Live Conversation, type (/accept live %d) to accept.", PlayerData[playerid][Name], playerid);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		LiveOffer[id] = playerid;
		LiveReporter[playerid] = id;
	}
	return 1;
}

YCMD:read(playerid, params[], help)
{
	new string[128];
	if(GotPaper[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have a newspaper.");
	SendClientMessage(playerid, COLOR_WHITE, "|_____________________________ Newspaper ____________________________|");
	format(string, sizeof(string), "| %s  |  by %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
 	SendClientMessage(playerid, COLOR_GREEN, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
	return 1;
}

YCMD:testpaper(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	new number, string[128];
	if(sscanf(params, "i", number)) return SendUsage(playerid,"/testpaper <number>");
	if(number < 1 || number > 10) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Paper number must be between 1 and 10.");
	if(PaperInfo[number][PaperUsed] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: There's no newspaper written on that number!");
	SendClientMessage(playerid, COLOR_WHITE, "|_____________________________ Newspaper ____________________________|");
	format(string, sizeof(string), "| %s  |  by reporter: %s.",PaperInfo[number][PaperTitle],PaperInfo[number][PaperMaker]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText1]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText2]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText3]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText4]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText5]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText6]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s",PaperInfo[number][PaperText7]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
	return 1;
}

YCMD:deliver(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	new id, string[128];
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/deliver <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 8) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
	if(PaperOffer[id] >= 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is already have an Paper Offer!");
	if(PaperReporter[playerid] >= 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Last player doesn't accept your paper!");

	format(string, sizeof(string), "* You offerd one of your Newspapers to %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Reporter %s wants to give you a Newspaper (use /accept paper %d, to accept).", PlayerData[playerid][Name], playerid);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	PaperOffer[id] = playerid;
	PaperReporter[playerid] = id;
	return 1;
}

YCMD:bring(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	if(!PlayerToPoint(3.0,playerid,756.3061,-1358.2039,13.5142)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not at the SA Network building!");
	new number, string[128];
	if(sscanf(params, "i", number)) return SendUsage(playerid,"/bring <number>");
	if(number < 1 || number > 10) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Paper number must be between 1 and 10.");
	if(PaperInfo[number][PaperUsed] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: There's no newspaper written on that number!");
	format(string, sizeof(string), "* You can now deliver Newspapers to people, Newspaper: %s, By: %s.",PaperInfo[number][PaperTitle],PaperInfo[number][PaperMaker]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperTitle]);
	strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperMaker]);
	strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText1]);
	strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText2]);
	strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText3]);
	strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText4]);
	strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText5]);
	strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText6]);
	strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
	format(string, sizeof(string), "%s", PaperInfo[number][PaperText7]);
	strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
	BringingPaper[playerid] = 1;
	return 1;
}

YCMD:paper(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	new option[7], number, string[128];
	if(sscanf(params, "s[7]i", option, number)) return SendUsage(playerid,"/paper <write/delete> <number>");
	if( strcmp ( option, "write" , true ) == 0 )
	{
		if(number < 1 || number > 10) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Paper number must be between 1 and 10.");
		if(PaperInfo[number][PaperUsed] == 1)
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are producing a new Newspaper.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "* Everything you type now will be added to the Newspaper, you have 7 lines available.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "* Please type in the Title of your Newspaper.");
		WritingPaper[playerid] = 1;
		WritingPaperNumber[playerid] = number;
		WritingLine[playerid] = 1;
	}
	else if( strcmp ( option, "delete" , true ) == 0 )
	{
		if(PlayerData[playerid][Rank] < 4) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You must be rank 4+.");
		ClearPaper(number);
		number += 1;
		format(string, sizeof(string), "You've deleted Newspaper %d.",number);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

YCMD:papers(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	if(!PlayerToPoint(3.0,playerid,756.3061,-1358.2039,13.5142)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not at the SA Network building!");
	new number = 0, string[128];
	for(new i = 1; i < sizeof(PaperInfo); i++)
	{
	    if(PaperInfo[i][PaperUsed] == 1)
		{
		    number ++;
		   	format(string, sizeof(string), "|%d| Newspaper: %s, By: %s",i,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	if(number == 0) return SendClientMessage(playerid, -1, "The're no newspapers created.");
	return 1;
}
YCMD:news(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 6) return SendClientMessage(playerid, COLOR_WHITE, ReporterOnly);
	if(PlayerData[playerid][OnDuty] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You're not on-duty.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(StaticVeh[tmpcar][vFaction] != 6) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in a SA Network vehicle.");
	new message[128], string[128];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/news <message>");
	if(FindIP(message) || Findhtml(message))
	{
		format(string, 256, "Warning: %s(%d) type on /news: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	format(string, sizeof(string), "NR %s: %s", PlayerData[playerid][Name], message);
	SendClientMessageToAll(COLOR_NEWS,string);
	return 1;
}

YCMD:stopsiren(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 7) SendClientMessage(playerid, COLOR_WHITE, MedicOnly);
	PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
	return 1;
}

YCMD:heal(playerid, params[], help)
{
    new id, price, string[128];
    new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction == 7)
	{
		if(PlayerData[playerid][InHouse] > 0 || PlayerData[playerid][InHQ] > 0)
		{
			SetPlayerHealth(playerid, 100.0);
			return 1;
		}
		if(sscanf(params, "ui", id, price)) return SendUsage(playerid,"/heal <Name/Playerid> <amount>");
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't heal yourself!");
		new tmpcar = GetPlayerVehicleID(playerid);
		new tmpcarid = GetPlayerVehicleID(id);
		if(StaticVeh[tmpcar][vFaction] != 7) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in a Emergency Vehicle.");
		if(tmpcar != tmpcarid) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't in your vehicle.");
		new Float: php = GetPlayerHealth(id,php);
		if(php > 96.0) return  SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player has more than 96 health points.");
		if(PlayerData[id][Cash] < price) return  SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player doesn't have enough money.");

		format(string, sizeof(string), "~w~You healed ~y~%s~n~~g~$%d", PlayerData[id][Name],price);
		GameTextForPlayer(playerid, string, 5000, 1);

		format(string, sizeof(string), "~w~Healed ~n~~r~-$%d", price);
		GameTextForPlayer(id, string, 5000, 1);

		GivePlayerCash(playerid, price);
		GivePlayerCash(id, -price);
		SetPlayerHealth(id, 100.0);
		return 1;
	}
	if(faction >= 1 && PlayerData[playerid][InHQ] > 0)
	{
	    SetPlayerHealth(playerid, 100.0);
	    return 1;
	}
	if(PlayerData[playerid][InHouse] > 0)
	{
	    SetPlayerHealth(playerid, 100.0);
	    return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, MedicOnly);
	return 1;
}

CMD:cancel(playerid, params[])
{
	new name[64], string[128];
	if(sscanf(params, "s[64]", name))
	{
		SendUsage(playerid,"/cancel <name>");
		SendUsage(playerid,"Available names: Medic");
	}
	else
	{
		if( strcmp ( name, "medic" , true ) == 0 )
		{
			if(MedicCall[playerid] == -2)
			{
				MedicCall[playerid] = -1;
				format(string, sizeof(string), "* %s cancelled the Medic call.", PlayerData[playerid][Name]);
				SendRadioMessage(7, COLOR_LIGHTBLUE, string);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have cancelled the Medic call.");
			}
			if(MedicCall[playerid] >= 0)
			{
				SendClientMessage(MedicCall[playerid], COLOR_LIGHTBLUE2, "* Your customer cancelled the Medic call.");
				DisablePlayerCheckpoint(MedicCall[playerid]);
				MedicCall[playerid] = -1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have cancelled the Medic call.");
			}
			if(MedicAns[playerid] >= 0)
			{
				MedicCall[MedicAns[playerid]] = -1;
				format(string, sizeof(string), "* Medic %s cancelled your call.", PlayerData[playerid][Name]);
				SendClientMessage(MedicAns[playerid], COLOR_LIGHTBLUE2, string);
				MedicAns[playerid] = -1;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have cancelled the Medic call.");
			}
		}
		if( strcmp ( name, "live" , true ) == 0 )
		{
			if(LiveOffer[playerid] >= 0)
			{//Jucator
				format(string, sizeof(string), "* Player %s cancelled your live.", PlayerData[playerid][Name]);
				SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE2, string);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have cancelled the live.");
				LiveReporter[LiveOffer[playerid]] = -1;
				LiveOffer[playerid] = -1;
			}
			if(LiveReporter[playerid] >= 0)
			{//Reporter
				format(string, sizeof(string), "* Reporter %s cancelled your live.", PlayerData[playerid][Name]);
				SendClientMessage(LiveReporter[playerid], COLOR_LIGHTBLUE2, string);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have cancelled the live.");
				LiveOffer[LiveReporter[playerid]] = -1;
				LiveReporter[playerid] = -1;
			}
		}
	}
	return 1;
}
YCMD:service(playerid, params[],help)
{
	new name[64], string[128], zone[30];
	if(sscanf(params, "s[64]", name))
	{
		SendUsage(playerid,"/service <name>");
		SendUsage(playerid,"Available names: Medic, Taxi, Mechanic");
	}
	else
	{
		if( strcmp ( name, "medic" , true ) == 0 )
		{
			if(Medics < 1) return SendClientMessage(playerid, COLOR_LIGHTBLUE2, "No medics on duty at this moment, please try again later.");
			if(MedicCall[playerid] != -1) return SendClientMessage(playerid, COLOR_GREY, "You already called for a medic, please wait.");
			GetPlayer3DZone(playerid,zone,30);
			format(string, sizeof(string), "** %s is in need of a Medic. Location: %s (use /accept medic %d to accept the call)", PlayerData[playerid][Name], zone, playerid);
		    SendRadioMessage(7, TEAM_AZTECAS_COLOR, string);
		    SendClientMessage(playerid, 0x3186FFFF, "* You have called for a Medic, wait for a reply.");
		    MedicCall[playerid] = -2;
			foreach(Player, i)
			{
				new faction = PlayerData[i][Member] + PlayerData[i][Leader];
				if(faction == 7) PlayerPlaySound(i,3401,0.0,0.0,0.0);
			}
		    return 1;
		}
	}
	return 1;
}

YCMD:settax(playerid, params[], help)
{
	new string[128], amount;
	if (PlayerData[playerid][Leader] != 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFB673}Error: Only President can use this command.");
	if(sscanf(params, "i", amount)) return SendUsage(playerid,"/settax <amount>");

	ServerInfo[tax] = amount;
	mysql_format(SQL, string, sizeof(string),"UPDATE `infos` SET `tax`='%d' WHERE ID = 1",ServerInfo[tax]);
	mysql_tquery(SQL, string, "", "");
	format(string, sizeof(string), "<< President %s sets tax to $%d. >>", PlayerData[playerid][Name], amount);
	SendClientMessageToAll(COLOR_President, string);
	return 1;
}

YCMD:taxstats(playerid, params[], help)
{
	if (PlayerData[playerid][Leader] != 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFB673}Error: Only President can use this command.");
	new players = 0, string[128];
	foreach(Player, i)
	{
		if((PlayerData[i][Level] > 0) && (PlayerData[i][Level] < 8))
		players++;
	}
	if(players == 0) return SendClientMessage(playerid,0x33CCFFAA, "Error.");
	format(string, sizeof(string), "Tax: $%s can be given to %d players, $%s to everyone.", Decimal(SafeBox[5][sbMoney]), players, Decimal(SafeBox[5][sbMoney]/players));
	SendClientMessage(playerid,0x33CCFFAA, string);
	return 1;
}

YCMD:givetax(playerid, params[], help)
{
	if (PlayerData[playerid][Leader] != 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFB673}Error: Only President can use this command.");
	if(SafeBox[5][sbMoney] < 1) return 1;
	new players = 0, string[128];
	foreach(Player, i)
	{
		if((PlayerData[i][Level] > 0) && (PlayerData[i][Level] < 8))
		players++;
	}
	if(players == 0) return SendClientMessage(playerid,0x33CCFFAA, "Error.");
	new amount = SafeBox[5][sbMoney]/players;
	foreach(Player, i)
	{
		if((PlayerData[i][Level] > 0) && (PlayerData[i][Level] < 8))
		GivePlayerCash(i,amount);
	}
	SafeBox[5][sbMoney] -= players*amount;
	mysql_format(SQL, string,128,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[5][sbMoney],5);
	mysql_tquery(SQL, string, "", "");

	format(string, sizeof(string), "<< President %s gave $%s to %d citizens level 1-7 >>", PlayerData[playerid][Name], Decimal(amount), players);
	SendClientMessageToAll(COLOR_President, string);
	return 1;
}

YCMD:charity(playerid, params[], help)
{
	new amount, string[128];
	if(sscanf(params, "i", amount)) return SendUsage(playerid,"/charity <amount>");
	{
		if(amount > PlayerData[playerid][Cash]) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You don't have enough money.");
		SafeBox[5][sbMoney] += amount;
		mysql_format(SQL, string,128,"UPDATE `safeboxs` SET `Money`='%d' WHERE `ID`='%d'",SafeBox[5][sbMoney],5);
		mysql_tquery(SQL, string, "", "");
		GivePlayerCash(playerid,-amount);
		format(string, sizeof(string), "{FFC266}You sent $%s for players level 2-7.", Decimal(amount));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

YCMD:f(playerid, params[], help)
{
	new message[128],string[256];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/r <message>");
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction < 2) return SendClientMessage(playerid, COLOR_WHITE, NoFaction);
	if(FindIP(message) || Findhtml(message))
	{
		format(string, 256, "Warning: %s(%d) type on /f: %s.", PlayerData[playerid][Name], playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	format(string, sizeof(string), "** %s %s: (( %s )) **", GetRank(playerid), PlayerData[playerid][Name], message);
	if(PlayerData[playerid][Leader] > 0)
		SendRadioMessage(faction, 0x00B8E600, string);
	else
	    //SendRadioMessage(faction, 0x33CCFFAA, string);
        SendRadioMessage(faction, 0x1AD7F4AA, string);
	return 1;
}

YCMD:m(playerid, params[], help)
{
	new message[128],string[256];
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/m <message>");
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	new tmpcar = GetPlayerVehicleID(playerid);
	if(StaticVeh[tmpcar][vFaction] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in a Police Vehicle.");
	if(FindIP(message) || Findhtml(message))
	{
	    format(string, 256, "Warning: %s(%d) type on /m: %s.", PlayerData[playerid][Name], playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	format(string, sizeof(string), "[Officer %s:o< %s]", PlayerData[playerid][Name], message);
	ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	return 1;
}

YCMD:equip(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][InBizz] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in Armoury!");
	SetPlayerHealth(playerid, 100.0);
	SetPlayerArmour(playerid, 100.0);
	GivePlayerWeapon(playerid, 3, 1);
	GivePlayerWeapon(playerid, 24, 250);
	GivePlayerWeapon(playerid, 29, 500);
	GivePlayerWeapon(playerid, 31, 500);
	GivePlayerWeapon(playerid, 41, 500);
	return 1;
}

YCMD:duty(playerid, params[], help)
{
	new string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction == 0) return SendClientMessage(playerid, COLOR_WHITE, NoFaction);
	if(faction == 1)
	{
		if(PlayerData[playerid][InBizz] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in Armoury!");
		if(PlayerData[playerid][OnDuty] == 0)
		{
			format(string, sizeof(string), "* %s took a badge from his locker.", PlayerData[playerid][Name]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerData[playerid][OnDuty] = 1;
		}
		else if(PlayerData[playerid][OnDuty] == 1)
		{
			format(string, sizeof(string), "* %s places his badge in his locker.", PlayerData[playerid][Name]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerData[playerid][OnDuty] = 0;
		}
	}
	if(faction == 7)
	{
	    if(PlayerData[playerid][OnDuty] == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are now off duty from your Medic Job and will not receive calls anymore.");
			PlayerData[playerid][OnDuty] = 0;
		    Medics -= 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are now on duty with your Medic Job and will receive calls from people in need.");
		    PlayerData[playerid][OnDuty] = 1;
		    Medics += 1;
		}
	}
	if(faction == 6)
	{
	    if(PlayerData[playerid][OnDuty] == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are now off duty from your SA Network Job.");
			PlayerData[playerid][OnDuty] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are now on duty from your SA Network Job.");
		    PlayerData[playerid][OnDuty] = 1;
		}
	}
	return 1;
}

function InsertCrime(playerid, id, level, reason[])
{//Pt ultimele x pot face cu (crime % x)
	if(PlayerData[id][WantedLevel] == 0) PlayerData[id][TrackLose] = 30; //If his wanted is 0, than set 30 mins
	new ini, string[256];
	ini = PlayerData[id][WantedLevel];
	if(level + PlayerData[id][WantedLevel] > 6) PlayerData[id][WantedLevel] = 6;
	else PlayerData[id][WantedLevel] = level + PlayerData[id][WantedLevel];
	SetPlayerWantedLevel(id,PlayerData[id][WantedLevel]);
	ini = PlayerData[id][WantedLevel]-ini;
	
	format(string, sizeof(string), "You've commited a Crime (%s). W: +%d, Reporter: %s.", reason, ini, PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Current Wanted Level: %d", PlayerData[id][WantedLevel]);
	SendClientMessage(id, COLOR_YELLOW, string);
	
	new date[50];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	format(date,sizeof(date),"%02d.%02d.%d %02d:%02d:%02d",d,m,y,h,mi,s);
	
	strmid(MDCData[id][PlayerData[id][MDC]][mDate], date, 0, strlen(date), 255);
	strmid(MDCData[id][PlayerData[id][MDC]][mReporter], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
	strmid(MDCData[id][PlayerData[id][MDC]][mReason], reason, 0, strlen(reason), 255);	
	
	strmid(PlayerData[id][LastDate], date, 0, strlen(date), 255);
	strmid(PlayerData[id][LastReporter], PlayerData[playerid][Name], 0, strlen(PlayerData[playerid][Name]), 255);
	strmid(PlayerData[id][LastCrime], reason, 0, strlen(reason), 255);
	
	PlayerData[id][MDC] += 1;
	PlayerData[id][Crimes] += 1;
	
	format(string, sizeof(string), "HQ: All Units APB: Reporter: %s, Crime: %s, W: +%d (%d), Suspect: %s (%d)", PlayerData[playerid][Name],reason,ini,PlayerData[id][WantedLevel],PlayerData[id][Name],id);
	SendRadioMessage(1, 0x3350FFFF, string);
	
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `WantedLevel`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][WantedLevel],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE `users` SET `LastCrime`='%s', `LastReporter`='%s' WHERE `ID`='%d' LIMIT 1",reason,PlayerData[playerid][Name],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	mysql_format(SQL, str,128,"UPDATE `users` SET `LastDate`='%s', `Crimes`='%d' WHERE `ID`='%d' LIMIT 1",date,PlayerData[id][Crimes],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:su(playerid, params[], help)
{
	new id,level,reason[64];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(sscanf(params, "uis[64]", id,level,reason)) return SendUsage(playerid,"/su <Name/Playerid> <level> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new factionid = PlayerData[id][Member] + PlayerData[id][Leader];
	if(level > 6 || level < 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Invalid wanted level.");
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(PlayerData[id][MDC] == 15) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Unknown error.");
	if(factionid == 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You can't suspect a Cop!");
	
	InsertCrime(playerid,id,level,reason);
	
	return 1;
}
YCMD:cuff(playerid, params[], help)
{
	new id, string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/cuff <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
	if(PlayerData[id][PlayerCuffed] > 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player is already cuffed!");
	
	format(string, sizeof(string), "You were cuffed by %s.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "You Cuffed %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s hand cuffs %s, so he wont go anywhere.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	GameTextForPlayer(id, "~r~Cuffed", 2500, 3);
	
	SetPlayerAttachedObject(id, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(id, 1);
	PlayerData[id][PlayerCuffed] = 10;
	if(IsPlayerInAnyVehicle(id))
	{
		TogglePlayerControllable(id, 0);
	}
	return 1;
}
YCMD:uncuff(playerid, params[], help)
{
	new id, string[64];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/uncuff <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
				
	format(string, sizeof(string), "* You were uncuffed by %s.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* You uncuffed %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	GameTextForPlayer(id, "~g~Uncuffed", 2500, 3);
	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(id,0);
	TogglePlayerControllable(id, 1);
	PlayerData[id][PlayerCuffed] = 0;
	
	return 1;
}
YCMD:punish(playerid, params[], help)
{
	new id, string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/punish <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
	if(PlayerData[id][Jailed] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player isn't in jail.");
	
	format(string, sizeof(string), "* You punished %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Officer %s punished you.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	
	SpawnPlayer(id);
	TogglePlayerControllable(id, 0);
	SetTimerEx("Tazed", 3000, 0, "d", id);
	
	return 1;
}

YCMD:aclear(playerid, params[], help)
{
	new id, string[128], reason[25];
	if(PlayerData[playerid][Admin] < 6) return SendClientMessage(playerid, COLOR_WHITE, AdminOnly);
	if(sscanf(params, "us[25]", id, reason)) return SendUsage(playerid,"/aclear <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	
	format(string, sizeof(string), "* You cleared the records and wanted points of %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* ADMIN %s has cleared your records and wanted points.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	
	format(string, sizeof(string), "* ADMIN %s cleared %s's records and wanted points, reason: %s.", PlayerData[playerid][Name], PlayerData[id][Name], reason);
	SendRadioMessage(1, COLOR_LIGHTRED, string);
		
	ClearLog(playerid,id,reason);
	
	PlayerData[id][MDC] = 0;
	PlayerData[id][WantedLevel] = 0;
	SetPlayerWantedLevel(id,PlayerData[id][WantedLevel]);
	
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `WantedLevel`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][WantedLevel],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:clear(playerid, params[], help)
{
	new id, string[128], reason[25];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "us[25]", id, reason)) return SendUsage(playerid,"/clear <Name/Playerid> <reason>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	
	format(string, sizeof(string), "* You cleared the records and wanted points of %s.", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Officer %s has cleared your records and wanted points.", PlayerData[playerid][Name]);
	SendClientMessage(id, COLOR_LIGHTBLUE, string);
	
	format(string, sizeof(string), "* %s cleared %s's records and wanted points, reason: %s.", PlayerData[playerid][Name], PlayerData[id][Name], reason);
	SendRadioMessage(1, COLOR_LIGHTRED, string);
		
	ClearLog(playerid,id,reason);
	
	PlayerData[id][MDC] = 0;
	PlayerData[id][WantedLevel] = 0;
	SetPlayerWantedLevel(id,PlayerData[id][WantedLevel]);
	
	new str[128];
	mysql_format(SQL, str,128,"UPDATE `users` SET `WantedLevel`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][WantedLevel],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	return 1;
}

YCMD:tazer(playerid, params[], help)
{
	new string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Cannot use this while being in the Car!");
	new suspect = GetClosestPlayer(playerid);
	if(IsPlayerInAnyVehicle(suspect)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Suspect is in a Car, get him out first!");
	if(suspect == -1) return 1;
	if(GetDistanceBetweenPlayers(playerid,suspect) > 5) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: No-one near you!");
	ApplyAnimation(suspect,"CRACK","crckdeth2",4.1,1,1,1,1,1);
	TogglePlayerControllable(suspect, 0);
	
	format(string, sizeof(string), "* You were tazed by %s for 10 seconds.", PlayerData[playerid][Name]);
	SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* You tazed %s for 10 seconds.", PlayerData[suspect][Name]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* %s shoots with his tazer at %s, and tazed him.", PlayerData[playerid][Name], PlayerData[suspect][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	GameTextForPlayer(suspect, "~r~Tazed", 3000, 3);
	
	SetTimerEx("Tazed", 10000, 0, "d", suspect);
	return 1;
}

YCMD:mdc(playerid, params[], help)
{	
	new id, string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/mdc <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(StaticVeh[tmpcar][vFaction] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in a Police Vehicle.");
	SendClientMessage(playerid, COLOR_WHITE,"{5181EE}______-={FFFFFF}MOBILE DATA COMPUTER{5181EE}=-_______");
	format(string, sizeof(string), "{B5B5B5}Name: {FFFFFF}%s", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "{B5B5B5}Current Crimes: {FFFFFF}%d", PlayerData[id][MDC]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "{B5B5B5}Wanted Level: {FFFFFF}%d", PlayerData[id][WantedLevel]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "{B5B5B5}Time until track lose: {FFFFFF}%d mins", PlayerData[id][TrackLose]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	if(PlayerData[id][MDC] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2,"Last Crime:");
		format(string,sizeof(string),"- %s {B5B5B5}(Claimant: {FFFFFF}%s{B5B5B5}) on %s",PlayerData[id][LastCrime],PlayerData[id][LastReporter],PlayerData[id][LastDate]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		for(new i = 0; i < PlayerData[id][MDC]; i++)
		{
			format(string,sizeof(string),"- %s {B5B5B5}(Claimant: {FFFFFF}%s{B5B5B5}) on %s",MDCData[id][i][mReason],MDCData[id][i][mReporter],MDCData[id][i][mDate]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "{B5B5B5}Total crimes commited: {FFFFFF}%d", PlayerData[id][Crimes]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	format(string, sizeof(string), "{B5B5B5}Times arrested: {FFFFFF}%d", PlayerData[id][Arrests]);
	SendClientMessage(playerid, COLOR_WHITE,string);
	SendClientMessage(playerid, COLOR_WHITE,"{5181EE}_______________________________________");
	return 1;
}

YCMD:wanted(playerid, params[], help)
{
	new string[512], suspects = 0, title[30];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	for(new i = 1; i <= 6; i++)
	{
		foreach(Player, j)
		{
			if(PlayerData[j][WantedLevel] == i)
			{
				Suspects[playerid][suspects] = j;
				format(string, sizeof(string), "%s\nW%d: %s (%d) - %d mins", string, PlayerData[j][WantedLevel], PlayerData[j][Name], j, PlayerData[j][TrackLose]);
				suspects += 1;
			}
		}
	}
	if(suspects)
	{
		format(title, sizeof(title), "Suspects: %d", suspects);
		ShowPlayerDialog(playerid, DIALOG_WANTED, DIALOG_STYLE_LIST, title, string, "Find", "Close");
	}
	else
	{
		SendClientMessage(playerid, COLOR_DBLUE, "There're no suspects.");
	}
	return 1;
}

YCMD:nearwanted(playerid, params[], help)
{
	new string[128], suspects = 0, title[30];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	for(new i = 1; i <= 6; i++)
	{
		foreach(Player, j)
		{
			if(PlayerData[j][WantedLevel] == i)
			{
				if(GetDistanceBetweenPlayers(playerid, j) < 50)
				{
					Suspects[playerid][suspects] = j;
					format(string, sizeof(string), "%s\nW%d: %s (%d) - %d mins", string, PlayerData[j][WantedLevel], PlayerData[j][Name], j, PlayerData[j][TrackLose]);
					suspects += 1;
				}
			}
		}
	}
	if(suspects)
	{
		format(title, sizeof(title), "Suspects: %d", suspects);
		ShowPlayerDialog(playerid, DIALOG_WANTED, DIALOG_STYLE_LIST, title, string, "Find", "Close");
	}
	else
	{
		SendClientMessage(playerid, COLOR_DBLUE, "There're no suspects.");
	}
	return 1;
}

YCMD:confiscate(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	new id, item[25], str[128], string[128];
	if(sscanf(params, "us[25]", id,item))
	{
		SendUsage(playerid,"/confiscate <Name/Playerid> <item>");
		SendUsage(playerid,"Licenses: Drivinglic, Flyinglic, Boatlic, Fishlic, Weaponlic, Matslic");
		SendUsage(playerid,"Items: Drugs, Materials, Weapons");
	}
	else
	{
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
		if(GetDistanceBetweenPlayers(playerid, id) > 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
		if(strcmp(item,"drivinglic",true) == 0)
		{
			PlayerData[id][CarLic] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `CarLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your Driving License.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's Driving License.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"flyinglic",true) == 0)
		{
			PlayerData[id][FlyLic] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `FlyLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your Flying License.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's Flying License.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"boatlic",true) == 0)
		{
			PlayerData[id][BoatLic] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `BoatLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your Boat License.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's Boat License.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"fishlic",true) == 0)
		{
			PlayerData[id][BoatLic] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `FishLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your Fish License.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's Fish License.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"weaponlic",true) == 0)
		{
			PlayerData[id][GunLic] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `GunLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your Weapon License.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's Weapon License.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"matslic",true) == 0)
		{
			PlayerData[id][MatsLic] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `MatsLic`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your Material License.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's Material License.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"drugs",true) == 0)
		{
			PlayerData[id][Drugs] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Drugs`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your drugs.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's drugs.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"materials",true) == 0)
		{
			PlayerData[id][Materials] = 0;
			
			mysql_format(SQL, str,128,"UPDATE `users` SET `Materials`='0' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
			mysql_tquery(SQL, str, "", "");
			
			format(string, sizeof(string), "%s has confiscated your materials.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's materials.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		else if(strcmp(item,"weapons",true) == 0)
		{
			ResetPlayerWeapons(id);
			
			format(string, sizeof(string), "%s has confiscated your weapons.", PlayerData[playerid][Name]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You confiscated %s's weapons.", PlayerData[id][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}

YCMD:frisk(playerid, params[], help)
{
	new id;
	//new weight = Fishes[id][pWeight1]+Fishes[id][pWeight2]+Fishes[id][pWeight3]+Fishes[id][pWeight4]+Fishes[id][pWeight5];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/frisk <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 3) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That player is not near you.");
	
	new text1[30],text2[30],string[128],sweapon,sammo;
	if(PlayerData[id][Drugs] > 0) 
	{ 
		format(text1, sizeof(text1), "| %d grams of Drugs",PlayerData[id][Drugs]);
	}
	else 
	{ 
		text1 = "| Empty Pocket."; 
	}
	
	if(PlayerData[id][Materials] > 0) 
	{ 
		format(text2, sizeof(text2), "| %d Materials",PlayerData[id][Materials]);
	} 
	else 
	{ 
		text2 = "| Empty Pocket."; 
	}
	
	/*if(PlayerData[id][pPhoneBook] > 0) 
	{ 
		text3 = "| Phone Book."; 
	} 
	else 
	{ 
		text3 = "| Empty Pocket."; 
	}
	
	if(weight > 0) 
	{ 
		format(text4, sizeof(text4), "| %d kg of fishes",weight);
	} 
	else 
	{ 
		text4 = "| Empty Pocket."; 
	}*/
	
	format(string, sizeof(string), "|_______ Items with %s (Level %d) _______|", PlayerData[id][Name],PlayerData[id][Level]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "%s.", text1);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s.", text2);
	SendClientMessage(playerid, COLOR_GREY, string);
	/*format(string, sizeof(string), "%s.", text3);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "%s.", text4);
	SendClientMessage(playerid, COLOR_GREY, string);*/
	for (new i = 0; i < 12; i++)
	{
		GetPlayerWeaponData(id, i, sweapon, sammo);
		if(sweapon != 0)
		{
			new wtext[25];
			if(sweapon == 46){ wtext = "Parachute"; }
			else if(sweapon == 1){ wtext = "Brass Knuckles"; }
			else if(sweapon == 2){ wtext = "Golfclub"; }
			else if(sweapon == 3){ wtext = "Nightstick"; }
			else if(sweapon == 5){ wtext = "Naseballbat"; }
			else if(sweapon == 6){ wtext = "Shovel"; }
			else if(sweapon == 7){ wtext = "Poolcue"; }
			else if(sweapon == 10){ wtext = "Purple Dildo"; }
			else if(sweapon == 11){ wtext = "White Dildo"; }
			else if(sweapon == 12){ wtext = "Longwhite Dildo"; }
			else if(sweapon == 13){ wtext = "White Dildo II"; }
			else if(sweapon == 14){ wtext = "Flowers"; }
			else if(sweapon == 15){ wtext = "Cane"; }
			else if(sweapon == 23){ wtext = "SD Pistol"; }
			else if(sweapon == 24){ wtext = "Desert Eagle"; }
			else if(sweapon == 29){ wtext = "MP5"; }
			else if(sweapon == 25){ wtext = "Shotgun"; }
			else if(sweapon == 30){ wtext = "AK47"; }
			else if(sweapon == 31){ wtext = "M4"; }
			else if(sweapon == 33){ wtext = "Rifle"; }
			else if(sweapon == 4){ wtext = "Knife"; }
			else if(sweapon == 34){ wtext = "Sniper Rifle"; }
			else if(sweapon == 41){ wtext = "Spray"; }
			else if(sweapon == 42){ wtext = "Instinctor";}
			else if(sweapon == 43){ wtext = "Foto Camera"; }
			else { wtext = "Unknown weapon - cheats"; }
			format(string, sizeof(string), "| %s (%d)", wtext, sammo);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	format(string, sizeof(string), "* %s has frisked %s for any illegal items.", PlayerData[playerid][Name], PlayerData[id][Name]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

YCMD:gov(playerid, params[], help)
{
	new message[128],string[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1 && faction != 5) return SendClientMessage(playerid, COLOR_WHITE, "{F5DEB3}You are not a cop / member of goverment.");
	if(sscanf(params, "s[128]", message)) return SendUsage(playerid,"/gov <message>");
	if(FindIP(message) || Findhtml(message))
	{
		format(string, 256, "Warning: %s(%d) type on /gov: %s.", PlayerData[playerid][Name],playerid, message);
		ABroadCast(COLOR_YELLOW,string,1);
		return 1;
	}
	if(faction == 1 && PlayerData[playerid][Rank] >= 5)
	{
		SendClientMessageToAll(COLOR_WHITE, "|___________ Government News Announcement ___________|");
		format(string, sizeof(string), "%s %s:{FFFFFF} %s", GetRank(playerid), PlayerData[playerid][Name], message);
		SendClientMessageToAll(COLOR_DBLUE, string);
	}
	else if(faction == 5 && PlayerData[playerid][Rank] >= 5)			
	{
		SendClientMessageToAll(COLOR_WHITE, "|___________ Government News Announcement ___________|");
		format(string, sizeof(string), "%s %s:{FFFFFF} %s", GetRank(playerid), PlayerData[playerid][Name], message);
		SendClientMessageToAll(COLOR_President, string);  
	}
	return 1;
}

YCMD:startradar(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	new maxspeed, string[128];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "i", maxspeed)) return SendUsage(playerid,"/startradar <limit>");
	new tmpcar = GetPlayerVehicleID(playerid);
	if(StaticVeh[tmpcar][vFaction] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't in a Police Vehicle.");
	if(maxspeed < 50 || maxspeed > 220) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Limit must be between 50 and 200 kmph.");
	
	PlayerData[playerid][RadarUse] = maxspeed;

	format(string,sizeof(string),"You start your radar (limit: %d).",maxspeed);
	SendClientMessage(playerid, COLOR_LIGHTBLUE2, string);
	return 1;
}

YCMD:stopradar(playerid, params[], help)
{
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	
	PlayerData[playerid][RadarUse] = 0;
	SendClientMessage(playerid, COLOR_LIGHTBLUE2, "You stopped your radar.");
	return 1;
}

YCMD:opencell(playerid, params[], help)
{
	new id;
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(sscanf(params, "i", id)) return SendUsage(playerid,"/opencell <cell number>");
	switch(id)
	{
		case 1: { MoveObject(cell[1], 147.348+1.632, -200.28, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 1 has been opened."); }
		case 2: { MoveObject(cell[2], 147.358+1.632, -184.27, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 2 has been opened."); }
		case 3: { MoveObject(cell[3], 152.128+1.632, -200.26, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 3 has been opened."); }
		case 4: { MoveObject(cell[4], 152.168+1.632, -184.27, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 4 has been opened."); }
		case 5: { MoveObject(cell[5], 156.818+1.632, -200.27, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 5 has been opened."); }
		case 6: { MoveObject(cell[6], 156.848+1.632, -184.22, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 6 has been opened."); }
		case 7: { MoveObject(cell[7], 156.868+1.632, -184.29, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 7 has been opened."); }
		case 8: { MoveObject(cell[8], 156.908+1.632, -200.29, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 8 has been opened."); }
		case 9: { MoveObject(cell[9], 161.568+1.632, -200.25, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 9 has been opened."); }
		case 10: { MoveObject(cell[10], 161.658+1.632, -200.25, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 10 has been opened."); }
		case 11: { MoveObject(cell[11], 161.668+1.632, -184.21, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 11 has been opened."); }
		case 12: { MoveObject(cell[12], 161.668+1.632, -184.23, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 12 has been opened."); }
		case 13: { MoveObject(cell[13], 166.328+1.632, -184.24, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 13 has been opened."); }
		case 14: { MoveObject(cell[14], 166.368+1.632, -184.25, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 14 has been opened."); }
		case 15: { MoveObject(cell[15], 166.368+1.632, -200.25, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 15 has been opened."); }
		case 16: { MoveObject(cell[16], 166.368+1.632, -200.26, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 16 has been opened."); }
		case 17: { MoveObject(cell[17], 170.558+1.632, -184.32, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 17 has been opened."); }
		case 18: { MoveObject(cell[18], 170.578+1.632, -200.25, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 18 has been opened."); }
		case 19: { MoveObject(cell[19], 170.878+1.632, -184.23, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 19 has been opened."); }
		case 20: { MoveObject(cell[20], 170.878+1.632, -200.29, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 20 has been opened."); }
		default: SendClientMessage(playerid, COLOR_WHITE,"Invalid cell number.");
	}
	return 1;
}

YCMD:closecell(playerid, params[], help)
{
	new id;
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(sscanf(params, "i", id)) return SendUsage(playerid,"/opencell <cell number>");
	switch(id)
	{
		case 1: { MoveObject(cell[1], 147.348, -200.28, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 1 has been closed."); }
		case 2: { MoveObject(cell[2], 147.358, -184.27, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 2 has been closed."); }
		case 3: { MoveObject(cell[3], 152.128, -200.26, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 3 has been closed."); }
		case 4: { MoveObject(cell[4], 152.168, -184.27, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 4 has been closed."); }
		case 5: { MoveObject(cell[5], 156.818, -200.27, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 5 has been closed."); }
		case 6: { MoveObject(cell[6], 156.848, -184.22, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 6 has been closed."); }
		case 7: { MoveObject(cell[7], 156.868, -184.29, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 7 has been closed."); }
		case 8: { MoveObject(cell[8], 156.908, -200.29, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 8 has been closed."); }
		case 9: { MoveObject(cell[9], 161.568, -200.25, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 9 has been closed."); }
		case 10: { MoveObject(cell[10], 161.658, -200.25, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 10 has been closed."); }
		case 11: { MoveObject(cell[11], 161.668, -184.21, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 11 has been closed."); }
		case 12: { MoveObject(cell[12], 161.668, -184.23, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 12 has been closed."); }
		case 13: { MoveObject(cell[13], 166.328, -184.24, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 13 has been closed."); }
		case 14: { MoveObject(cell[14], 166.368, -184.25, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 14 has been closed."); }
		case 15: { MoveObject(cell[15], 166.368, -200.25, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 15 has been closed."); }
		case 16: { MoveObject(cell[16], 166.368, -200.26, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 16 has been closed."); }
		case 17: { MoveObject(cell[17], 170.558, -184.32, 348.54, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 17 has been closed."); }
		case 18: { MoveObject(cell[18], 170.578, -200.25, 348.55, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 18 has been closed."); }
		case 19: { MoveObject(cell[19], 170.878, -184.23, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 19 has been closed."); }
		case 20: { MoveObject(cell[20], 170.878, -200.29, 344.53, 0.50); SendClientMessage(playerid, COLOR_WHITE,"Cell number 20 has been closed."); }
		default: SendClientMessage(playerid, COLOR_WHITE,"Invalid cell number.");
	}
	return 1;
}

YCMD:arrest(playerid, params[], help)
{
	new id, string[128], str[128];
	new faction = PlayerData[playerid][Member] + PlayerData[playerid][Leader];
	if(faction != 1) return SendClientMessage(playerid, COLOR_WHITE, CopOnly);
	if(PlayerData[playerid][OnDuty] != 1) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't on duty.");
	if(sscanf(params, "u", id)) return SendUsage(playerid,"/arrest <Name/Playerid>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player not connected.");
	if(GetDistanceBetweenPlayers(playerid,id) > 10) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player isn't close enough to arrest.");
	if(!IsAtJailPoint(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't near an arrest point!");
	if(PlayerData[id][WantedLevel] == 0) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: Player must be at least Wanted Level 1.");
	format(string, sizeof(string), "* You arrested %s!", PlayerData[id][Name]);
	SendClientMessage(playerid, COLOR_1BLUE, string);
	
	new time = 0, amount = 0;
	
	switch(PlayerData[id][WantedLevel])
	{
		case 1: { time = 360; amount = 150; }
		case 2: { time = 480; amount = 250; }
		case 3: { time = 720; amount = 500; }
		case 4: { time = 960; amount = 750; }
		case 5: { time = 1080; amount = 1000; }
		case 6: { time = 1200; amount = 1200; }
	}
	
	GivePlayerCash(id, -amount);
	GivePlayerCash(playerid, amount);
	
	ResetPlayerWeapons(id);
	
	PlayerData[id][WantedLevel] = 0;
	PlayerData[id][TrackLose] = 0;
	PlayerData[id][Arrests] += 1;
	PlayerData[id][JailTime] = time;
	PlayerData[id][Jailed] = 1;
	PlayerData[id][MDC] = 0;
	
	SetPlayerWantedLevel(id, 0);
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `WantedLevel`='0',`TrackLose`='0',`Jailed`='1' WHERE `ID`='%d' LIMIT 1",PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	mysql_format(SQL, str,128,"UPDATE `users` SET `Arrests`='%d',`JailTime`='%d' WHERE `ID`='%d' LIMIT 1",PlayerData[id][Arrests],PlayerData[id][JailTime],PlayerData[id][ID]);
	mysql_tquery(SQL, str, "", "");
	
	format(string, sizeof(string), "You are jailed for %d seconds.", PlayerData[id][JailTime]);
	SendClientMessage(id, COLOR_1BLUE, string);
	
	format(string, sizeof(string), "<< %s arrested suspect %s for %d seconds ($%s). >>", PlayerData[playerid][Name], PlayerData[id][Name], time, Decimal(amount));
	SendRadioMessage(1, COLOR_LIGHTRED, string);
	
	SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(id,0);
	TogglePlayerControllable(id, 1);
	
	PutPlayerInJail(id);
	return 1;
}
function SendCustomPlayerMessage(playerid, color, text[])
{
    if(strlen(text) > 128)
    {
        new text1[97],
            text2[97],
			string[194];

        strmid(text2, text, 128, 192);
        strmid(text1, text, 0, 128);

        format(string, 200, "%s...", text1);
        SendClientMessage(playerid, color, string);

        format(string, 200, "...%s", text2);
        SendClientMessage(playerid, color, string);
    }
    else SendClientMessage(playerid, color, text);
}

function NTime(playerid)
{
	PlayerData[playerid][nTime] = 0;
}

function Report(playerid)
{
	rTime[playerid] = 0;
}

function Tazed(playerid)
{
	TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid);
}

function SendHelperMessage(color, string[])
{
	foreach(Player, i)
	{
		if(PlayerData[i][Helper] >= 1 || PlayerData[i][Admin] >= 1)
	    {
			if(strlen(string) > 128)
			{
 				new text1[97],
     				text2[97],
					string2[194];

				strmid(text2, string, 128, 192);
 				strmid(text1, string, 0, 128);

				format(string2, 200, "%s...", text1);
				SendClientMessage(i, color, string2);

				format(string2, 200, "...%s", text2);
 				SendClientMessage(i, color, string2);
		    }
		    else SendClientMessage(i, color, string);
		}
	}
}

function SendAdminMessage(color, string[])
{
	foreach(Player, i)
	{
		if(PlayerData[i][Admin] >= 1)
	    {
			if(strlen(string) > 128)
			{
 				new text1[97],
     				text2[97],
					string2[194];

				strmid(text2, string, 128, 192);
 				strmid(text1, string, 0, 128);

				format(string2, 200, "%s...", text1);
				SendClientMessage(i, color, string2);

				format(string2, 200, "...%s", text2);
 				SendClientMessage(i, color, string2);
		    }
		    else SendClientMessage(i, color, string);
		}
	}
}

function SendLeaderMessage(color, string[])
{
	foreach(Player, i)
	{
		if(PlayerData[i][Leader] >= 1 || PlayerData[i][Admin] >= 3)
	    {
			if(strlen(string) > 128)
			{
 				new text1[97],
     				text2[97],
					string2[194];

				strmid(text2, string, 128, 192);
 				strmid(text1, string, 0, 128);

				format(string2, 200, "%s...", text1);
				SendClientMessage(i, color, string2);

				format(string2, 200, "...%s", text2);
 				SendClientMessage(i, color, string2);
		    }
		    else SendClientMessage(i, color, string);
		}
	}
}

function ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new coordsstring[1024], text[25], job[25];
		
		if(PlayerData[targetid][Jailed] == 1) format(text, sizeof(text), "Yes, %d sec", PlayerData[targetid][JailTime]);
		else format(text, sizeof(text), "No");
		
		format(job, sizeof(job), "{FFA500}%s",JobName(PlayerData[targetid][Job]));
		
		new faction = PlayerData[targetid][Leader] + PlayerData[targetid][Member];
		new playersip[256];
		GetPlayerIp(targetid,playersip,sizeof(playersip));

		SendClientMessage(playerid, COLOR_WHITE,"{FFA500}_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s (%d) ***", PlayerData[targetid][Name],targetid);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Level: {FFA500}%d {FFFFFF}| Cash: {FFA500}$%s {FFFFFF}| Bank: {FFA500}$%s {FFFFFF}| Phone: {FFA500}%s {FFFFFF}", PlayerData[targetid][Level], Decimal(PlayerData[targetid][Cash]), Decimal(PlayerData[targetid][Bank]), DecimalNumber(targetid));
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Wanted level: {FFA500}%d {FFFFFF}| Drugs: {FFA500}%d {FFFFFF}| Materials: {FFA500}%d {FFFFFF}| Jailed: {FFA500}%s", PlayerData[targetid][WantedLevel], PlayerData[targetid][Drugs], PlayerData[targetid][Materials], text);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Wanted deaths: {FFA500}%d {FFFFFF}| Crimes commited: {FFA500}%d {FFFFFF}| Times arrested: {FFA500}%d", PlayerData[targetid][WDeaths], PlayerData[targetid][Crimes], PlayerData[playerid][Arrests]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Job: {FFA500}%s {FFFFFF}| Faction: {FFA500}%s {FFFFFF}| Rank: {FFA500}%s {FFFFFF}", job, FactionName(faction), GetRank(targetid));
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "FPunish: {FFA500}%d{FFFFFF}/30 | FWarn: {FFA500}%d{FFFFFF}/3 | Warns: {FFA500}%d{FFFFFF}/3", PlayerData[targetid][FPunish], PlayerData[targetid][FacWarns], PlayerData[targetid][Warns]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		if (PlayerData[playerid][Admin] >= 1)
		{
			format(coordsstring, sizeof(coordsstring), "{FFA500}House: %i | Business: %i | Skin: %d | Interior: %d | VirtualWorld: %d | IP: %s", PlayerData[targetid][HKey], PlayerData[targetid][Bizkey], PlayerData[targetid][Char], GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), playersip);
			SendClientMessage(playerid, COLOR_WHITE, coordsstring);
			if(PlayerData[targetid][CarKey1] != 0)
			{
				new idd = PlayerData[targetid][CarKey1];
				new locktext[6], spawntext[6];
				if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
				else {locktext = "No";}
				if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
				else {spawntext = "No";}
				format(coordsstring, sizeof(coordsstring), "{FFA500}Slot 1 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s] (%d)", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext, CarInfo[idd][Spawned]);
				SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			}
			if(PlayerData[targetid][CarKey2] != 0)
			{
				new idd = PlayerData[targetid][CarKey2];
				new locktext[6], spawntext[6];
				if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
				else {locktext = "No";}
				if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
				else {spawntext = "No";}
				format(coordsstring, sizeof(coordsstring), "{FFA500}Slot 2 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s] (%d)", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext, CarInfo[idd][Spawned]);
				SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			}
			if(PlayerData[targetid][CarKey3] != 0)
			{
				new idd = PlayerData[targetid][CarKey3];
				new locktext[6], spawntext[6];
				if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
				else {locktext = "No";}
				if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
				else {spawntext = "No";}
				format(coordsstring, sizeof(coordsstring), "{FFA500}Slot 3 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s] (%d)", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext, CarInfo[idd][Spawned]);
				SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			}
			if(PlayerData[targetid][CarKey4] != 0)
			{
				new idd = PlayerData[targetid][CarKey4];
				new locktext[6], spawntext[6];
				if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
				else {locktext = "No";}
				if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
				else {spawntext = "No";}
				format(coordsstring, sizeof(coordsstring), "{FFA500}Slot 4 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s] (%d)", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext, CarInfo[idd][Spawned]);
				SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			}
			if(PlayerData[targetid][CarKey5] != 0)
			{
				new idd = PlayerData[targetid][CarKey5];
				new locktext[6], spawntext[6];
				if(CarInfo[idd][cLock] > 0) {locktext = "Yes";}
				else {locktext = "No";}
				if(CarInfo[idd][Spawned] > 0) {spawntext = "Yes";}
				else {spawntext = "No";}
				format(coordsstring, sizeof(coordsstring), "{FFA500}Slot 5 | Model:[%s] Standard Price:[$%s] Locked:[%s] Spawned:[%s] (%d)", vehName[CarInfo[idd][cModel]-400], Decimal(CarInfo[idd][cValue]), locktext, spawntext, CarInfo[idd][Spawned]);
				SendClientMessage(playerid, COLOR_WHITE,coordsstring);
			}
			//Car data
		}
		SendClientMessage(playerid, COLOR_WHITE,"{FFA500}_______________________________________");
	}
	return 1;
}

function KickLog(playerid,id,reason[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
    if(id == 1024)
	{
	    mysql_format(SQL,query,800,"INSERT INTO log_kick (`admin`,`name`,`reason`,`time`) VALUES ('AdmBot','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",reason,PlayerData[playerid][Name],d,m,y,h,mi,s);
		mysql_tquery(SQL,query, "", "");
	}
	else
	{
		mysql_format(SQL,query,800,"INSERT INTO log_kick (`admin`,`name`,`reason`,`time`) VALUES ('%s','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",PlayerData[playerid][Name],PlayerData[id][Name],reason,d,m,y,h,mi,s);
		mysql_tquery(SQL,query, "", "");
 }
}

function ABCLog(const string[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,800,"INSERT INTO log_abc (`log`,`time`) VALUES ('%s','%02d.%02d.%d %02d:%02d:%02d')",string,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function FloodLog(string[],ip[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,800,"INSERT INTO log_flood (`ip`,`log`,`time`) VALUES ('%s','%s','%02d.%02d.%d %02d:%02d:%02d')",ip,string,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function LoginLog(playerid,ip[],country[],city[],isp[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,800,"INSERT INTO log_login (`name`,`ip`,`country`,`city`,`isp`,`time`,`type`) VALUES ('%s','%s','%s','%s','%s','%02d.%02d.%d %02d:%02d:%02d','1')",PlayerData[playerid][Name],ip,country,city,isp,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function PayLog(playerid, id, amount)
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
    new playersip[256];
	GetPlayerIp(playerid,playersip,sizeof(playersip));
	new idip[256];
	GetPlayerIp(id,idip,sizeof(idip));
	mysql_format(SQL,query,800,"INSERT INTO log_pay (`person`,`reciever`,`amount`,`time`,`ipperson`,`ipreciever`) VALUES ('%s','%s','%d','%02d.%02d.%d %02d:%02d:%02d','%s','%s')",PlayerData[playerid][Name],PlayerData[id][Name],amount,d,m,y,h,mi,s,playersip,idip);
	mysql_tquery(SQL,query, "", "");
}

function TransferLog(playerid, id, amount)
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
    new playersip[256];
	GetPlayerIp(playerid,playersip,sizeof(playersip));
	new idip[256];
	GetPlayerIp(id,idip,sizeof(idip));
	mysql_format(SQL,query,800,"INSERT INTO log_transfer (`person`,`reciever`,`amount`,`time`,`ipperson`,`ipreciever`) VALUES ('%s','%s','%d','%02d.%02d.%d %02d:%02d:%02d','%s','%s')",PlayerData[playerid][Name],PlayerData[id][Name],amount,d,m,y,h,mi,s,playersip,idip);
	mysql_tquery(SQL,query, "", "");
}

function WarnLog(playerid,id,reason[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,800,"INSERT INTO log_warn (`admin`,`name`,`reason`,`time`) VALUES ('%s','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",PlayerData[playerid][Name],PlayerData[id][Name],reason,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function UnWarnLog(playerid,id,reason[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,800,"INSERT INTO log_unwarn (`admin`,`name`,`reason`,`time`) VALUES ('%s','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",PlayerData[playerid][Name],PlayerData[id][Name],reason,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function ClearLog(playerid,id,reason[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,800,"INSERT INTO log_clear (`admin`,`name`,`reason`,`time`) VALUES ('%s','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",PlayerData[playerid][Name],PlayerData[id][Name],reason,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function SafeboxLog(faction,playerid,action[])
{
	new query[800];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	if(playerid == -1)
	{
		mysql_format(SQL,query,800,"INSERT INTO log_safebox (`faction`,`name`,`action`,`time`) VALUES ('%d','AdmBot','%s','%02d.%02d.%d %02d:%02d:%02d')",faction,action,d,m,y,h,mi,s);
		mysql_tquery(SQL,query, "", "");
	}
	else
	{
		mysql_format(SQL,query,800,"INSERT INTO log_safebox (`faction`,`name`,`action`,`time`) VALUES ('%d','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",faction,PlayerData[playerid][Name],action,d,m,y,h,mi,s);
		mysql_tquery(SQL,query, "", "");
	}	
}

function FactionLog(playerid,id,faction,action[],reason[])
{
	new query[2000];
	new y,m,d,h,mi,s;
    getdate(y,m,d);
    gettime(h,mi,s);
	mysql_format(SQL,query,2000,"INSERT INTO log_faction (`leader`,`name`,`faction`,`reason`,`action`,`time`) VALUES ('%s','%s','%d','%s','%s','%02d.%02d.%d %02d:%02d:%02d')",PlayerData[playerid][Name],PlayerData[id][Name],faction,reason,action,d,m,y,h,mi,s);
	mysql_tquery(SQL,query, "", "");
}

function UnfreezeT(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		TogglePlayerControllable(playerid, 1);
		if(PlayerStoned[playerid] >= 6) PlayerStoned[playerid] = 0;
	}
}

function BanA(playerid,adminban[],reason[],length,type,ex)
{
	if(type == 0)
	{//Permanent
		new string[1024],str[128],playersip[256];
		new hour,minute,second,year, month,day;
		gettime(hour,minute,second);
		getdate(year, month, day);
		GetPlayerIp(playerid,playersip,sizeof(playersip));
		mysql_format(SQL,str,128,"UPDATE `users` SET `Banned`='2' WHERE `username`='%s'",PlayerData[playerid][Name]);
		mysql_tquery(SQL,str, "", "");
		mysql_format(SQL,string, sizeof(string), "INSERT INTO `bans`(Player,Admin,BannedDate,reason,ip,time)VALUES('%s','%s','%02d/%02d/%04d %02d:%02d:%02d','%s','%s','%d')",PlayerData[playerid][Name],adminban,day,month,year,hour,minute,second,reason,playersip,length);
		mysql_tquery(SQL,string, "", "");
		format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s", PlayerData[playerid][Name], adminban, reason);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		if(ex) BanExx(playerid,reason);
		else KickEx(playerid);
		ServerInfo[banned]++;
		mysql_format(SQL,string, sizeof(string),"UPDATE `infos` SET `banned`='%d' WHERE ID = 1",ServerInfo[banned]);
		mysql_tquery(SQL,string, "", "");
		return 1;
	}
	if(type == 1)
	{//Temporar
		new string[1024],str[128],playersip[256];
		new hour,minute,second,year, month,day;
		gettime(hour,minute,second);
		getdate(year, month, day);
		GetPlayerIp(playerid,playersip,sizeof(playersip));
		mysql_format(SQL,str,128,"UPDATE `users` SET `Banned`='1' WHERE `username`='%s'",PlayerData[playerid][Name]);
		mysql_tquery(SQL,str, "", "");
		new monthh;
		new dayy;
		new yearr;
		if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
		{
			if(day+length>31)
			{
				monthh = month + 1;
				dayy = length+day-31;
			}
			else
			{
			    dayy = day + length;
			    monthh = month;
			}
			if(monthh > 12)
			{
				yearr = year + 1;
				monthh = monthh % 12;
			}
			else
			{
				yearr =year;
			}
		}
		else if(month == 4 || month == 6 || month == 9 || month == 11)
		{
			if(day+length>30)
			{
				monthh = month + 1;
				dayy = length+day-30;
			}
			else
			{
				dayy = day + length;
				monthh = month;
			}
			if(monthh > 12)
			{
				yearr =year + 1;
				monthh = monthh % 12;
			}
			else
			{
				yearr =year;
			}
		}
		else
		{
			if(day+length>28 && year / 4 != 0)
				{
				monthh = month + 1;
				dayy = length+day-28;
			}
			else if(day+length>29 && year / 4 == 0)
			{
				monthh = month + 1;
				dayy = length+day-29;
			}
			else
			{
				dayy = day + length;
				monthh = month;
			}
			yearr = year;
		}
		mysql_format(SQL,string, sizeof(string), "INSERT INTO `bans`(Player,Admin,BannedDate,reason,ip,time,UD,UM,UY,UH,UMi)VALUES('%s','%s','%02d/%02d/%04d %02d:%02d:%02d','%s','%s','%d','%d','%d','%d','%d','%d')",PlayerData[playerid][Name],adminban,day,month,year,hour,minute,second,reason,playersip,length,dayy,monthh,yearr,hour,minute);
		mysql_tquery(SQL,string, "", "");
		format(string, sizeof(string), "AdmCmd: %s was banned by %s for %d days, reason: %s", PlayerData[playerid][Name], adminban, length, reason);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		KickEx(playerid);
		ServerInfo[banned]++;
		mysql_format(SQL,string, sizeof(string),"UPDATE `infos` SET `banned`='%d' WHERE ID = 1",ServerInfo[banned]);
		mysql_tquery(SQL,string, "", "");
		return 1;
	}
	return 0;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(PlayerData[playerid][IsLoggedIn] == false)
	{
		SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: You aren't logged in!");
		return 0;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
	{
		SendClientMessage(playerid, COLOR_WHITE, "{FFFFCC}Error: That command isn't recognized. Please use /n(ewbie) for further help.");
	}
	else
	{
		printf("Player %s %s", PlayerData[playerid][Name], cmdtext);
		return 1;
	}
	return 1;
}

stock GetPassword(playerid)
{
	cache_get_field_content(0, "Password", PlayerData[playerid][Password], SQL, 129);
	KeyReset[playerid] = cache_get_field_content_int(0, "KeyReset");
	return 1;
}

stock AssignPlayerData(playerid)
{
	PlayerData[playerid][ID] = cache_get_field_content_int(0, "id");
	PlayerData[playerid][Level] = cache_get_field_content_int(0, "Level");
	PlayerData[playerid][Cash] = cache_get_field_content_int(0, "Cash");
	PlayerData[playerid][Admin] = cache_get_field_content_int(0, "Admin");
	PlayerData[playerid][Banned] = cache_get_field_content_int(0, "Banned");
	PlayerData[playerid][Muted] = cache_get_field_content_int(0, "Muted");
	PlayerData[playerid][MutedTime] = cache_get_field_content_int(0, "MutedTime");
	PlayerData[playerid][CarLic] = cache_get_field_content_int(0, "CarLic");
	PlayerData[playerid][FlyLic] = cache_get_field_content_int(0, "FlyLic");
	PlayerData[playerid][BoatLic] = cache_get_field_content_int(0, "BoatLic");
	PlayerData[playerid][FishLic] = cache_get_field_content_int(0, "FishLic");
	PlayerData[playerid][GunLic] = cache_get_field_content_int(0, "GunLic");
	PlayerData[playerid][MatsLic] = cache_get_field_content_int(0, "MatsLic");
	PlayerData[playerid][Warns] = cache_get_field_content_int(0, "Warns");
	PlayerData[playerid][Job] = cache_get_field_content_int(0, "Job");
	PlayerData[playerid][Jailed] = cache_get_field_content_int(0, "Jailed");
	PlayerData[playerid][JailTime] = cache_get_field_content_int(0, "JailTime");
	PlayerData[playerid][Wanted] = cache_get_field_content_int(0, "Wanted");
	PlayerData[playerid][Leader] = cache_get_field_content_int(0, "Leader");
	PlayerData[playerid][Member] = cache_get_field_content_int(0, "Member");
	PlayerData[playerid][SpawnChange] = cache_get_field_content_int(0, "SpawnChange");
	PlayerData[playerid][Rank] = cache_get_field_content_int(0, "Rank");
	PlayerData[playerid][FacWarns] = cache_get_field_content_int(0, "FacWarns");
	PlayerData[playerid][Char] = cache_get_field_content_int(0, "Chara");
	PlayerData[playerid][Drugs] = cache_get_field_content_int(0, "Drugs");
	PlayerData[playerid][Materials] = cache_get_field_content_int(0, "Materials");
	PlayerData[playerid][Exp] = cache_get_field_content_int(0, "Exp");
	PlayerData[playerid][FPunish] = cache_get_field_content_int(0, "FPunish");
	PlayerData[playerid][Bizkey] = cache_get_field_content_int(0, "Bizkey");
	PlayerData[playerid][WantedLevel] = cache_get_field_content_int(0, "WantedLevel");
	cache_get_field_content(0, "LastCrime", PlayerData[playerid][LastCrime], SQL, 129);
	cache_get_field_content(0, "LastReporter", PlayerData[playerid][LastReporter], SQL, 129);
	cache_get_field_content(0, "LastDate", PlayerData[playerid][LastDate], SQL, 129);
	PlayerData[playerid][Crimes] = cache_get_field_content_int(0, "Crimes");
	PlayerData[playerid][Arrests] = cache_get_field_content_int(0, "Arrests");
	PlayerData[playerid][TrackLose] = cache_get_field_content_int(0, "TrackLose");
    PlayerData[playerid][TotalExp] = cache_get_field_content_int(0, "TotalXP");
	cache_get_field_content(0, "LastLogin", PlayerData[playerid][LastLog], SQL, 129);
    cache_get_field_content(0, "RegisterDate", PlayerData[playerid][RegDate], SQL, 129);
    PlayerData[playerid][online] = cache_get_field_content_int(0, "online");
    PlayerData[playerid][Helper] = cache_get_field_content_int(0, "Helper");
    PlayerData[playerid][JobTime] = cache_get_field_content_int(0, "JobTime");
    PlayerData[playerid][PhoneNr] = cache_get_field_content_int(0, "PhoneNr");
    PlayerData[playerid][Fuel] = cache_get_field_content_int(0, "Fuel");
    PlayerData[playerid][Bank] = cache_get_field_content_int(0, "Bank");
    PlayerData[playerid][WDeaths] = cache_get_field_content_int(0, "WDeaths");
    PlayerData[playerid][HKey] = cache_get_field_content_int(0, "HouseKey");
    PlayerData[playerid][Tutorial] = cache_get_field_content_int(0, "Tutorial");
    cache_get_field_content(0, "Email", PlayerData[playerid][Email], SQL, 129);
    PlayerData[playerid][CarKey1] = cache_get_field_content_int(0, "CarKey1");
    PlayerData[playerid][PIN] = cache_get_field_content_int(0, "PIN");
    OnExp[playerid] = cache_get_field_content_int(0, "OnExp");
  	PlayerData[playerid][Activated] = cache_get_field_content_int(0, "Activated");
	PlayerData[playerid][CarKey2] = cache_get_field_content_int(0, "CarKey2");
	PlayerData[playerid][CarKey3] = cache_get_field_content_int(0, "CarKey3");
	PlayerData[playerid][CarKey4] = cache_get_field_content_int(0, "CarKey4");
	PlayerData[playerid][CarKey5] = cache_get_field_content_int(0, "CarKey5");
	PlayerData[playerid][Premium] = cache_get_field_content_int(0, "PremiumAcc");
	PlayerData[playerid][Refferal] = cache_get_field_content_int(0, "Refferal");
	PlayerLogin(playerid,0);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    new string[512];
    if(PlayerData[playerid][Leader] == 1 || PlayerData[playerid][Member] == 1)
	{
		if ((newkeys==KEY_CROUCH ))
		{
			if(PlayerToPoint(20, playerid,1544.5293, -1627.6019, 12.4348))
			{
				SetObjectRot(bariera, 0, 0, 270);
				SetTimer("closebarieralspd",2000,0);
			}
			if(PlayerToPoint(20, playerid,1588.2037, -1638.3373, 12.3533))
			{
				MoveObject(lspdgate,1597.34, -1637.89, 13.18,2);
				SetTimer("closegatelspd", 5000, 0);
			}
		}
	}
	if ((newkeys==KEY_CTRL_BACK )&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{//Radio Car
		string = "{FFFF00}Listen to {FFFFFF}Kiss FM\r\n{FFFF00}Listen to {FFFFFF}One FM\r\n{FFFF00}Listen to {FFFFFF}Pro FM\r\n{FFFF00}Listen to {FFFFFF}Radio 21\r\n";
		strcat(string, "{FFFF00}Listen to {FFFFFF}Radio ZU\r\n{FFFF00}Listen to {FFFFFF}Taraf FM\n{FFFF00}Listen to {FFFFFF}Vibe FM\r\n{FFFF00}Listen to {FFFFFF}Radio Intens\r\n");
		strcat(string, "{FFFF00}Listen to {FFFFFF}Radio Greu de Difuzat\r\n{FFFF00}Listen to {FFFFFF}Radio Tequilla\r\n{FFFF00}Listen to {FFFFFF}Radio Guerilla\r\n{E60000}Turn OFF the radio");
		ShowPlayerDialog(playerid,DIALOG_RADIO,DIALOG_STYLE_LIST,"Radio Stations",string,"Select", "Close");
	}
	if((newkeys == KEY_ACTION) &&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
		new masina = GetPlayerVehicleID(playerid);
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(masina,engine,lights,alarm,doors,bonnet,boot,objective);
		if(lights == 1)
		{
		   	SetVehicleParamsEx(masina,engine,0,alarm,doors,bonnet,boot,objective);
		}
		else
		{
			SetVehicleParamsEx(masina,engine,1,alarm,doors,bonnet,boot,objective);
		}
	}
    if ((newkeys== KEY_FIRE )&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
	    new Veh = GetPlayerVehicleID(playerid);
		if(PlayerData[playerid][Job] == 4 && StaticVeh[Veh][vJob] == 4)
		{
	  		new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found=0;
			new vid=0;
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if  ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						PFarmerCP[playerid] = -1;
						DisablePlayerCheckpoint(playerid);
					}
					else
					{
						if(StaticVeh[vid][vSpecial] == 2)
						{
							AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
						}
					}
				}
			}
			if(!Found)
			{
				SendClientMessage(playerid,COLOR_WHITE,"#Error.");
			}
		}
	}
}

stock GetWeaponNameEx(weaponid)
{
	new string[32];
	switch (weaponid)
	{
		case 0:	format(string,sizeof(string),"Fist");
		case 1:	format(string,sizeof(string),"Brass Knuckles");
		case 2:	format(string,sizeof(string),"Golf Club");
		case 3:	format(string,sizeof(string),"Nightstick");
		case 4:	format(string,sizeof(string),"Knife");
		case 5:	format(string,sizeof(string),"Baseball Bat");
		case 6:	format(string,sizeof(string),"Shovel");
		case 7:	format(string,sizeof(string),"Pool Cue");
		case 8:	format(string,sizeof(string),"Katana");
		case 9:	format(string,sizeof(string),"Chainsaw");
		case 10:	format(string,sizeof(string),"Double-ended Dildo");
		case 11:	format(string,sizeof(string),"Dildo");
		case 12:	format(string,sizeof(string),"Vibrator");
		case 13:	format(string,sizeof(string),"Silver Vibrator");
		case 14:	format(string,sizeof(string),"Flowers");
		case 15:	format(string,sizeof(string),"Cane");
		case 16:	format(string,sizeof(string),"Grenade");
		case 17:	format(string,sizeof(string),"Tear Gas");
		case 18:	format(string,sizeof(string),"Molotov Cocktail");
		case 22:	format(string,sizeof(string),"9mm");
		case 23:	format(string,sizeof(string),"Silenced 9mm");
		case 24:	format(string,sizeof(string),"Desert Eagle");
		case 25:	format(string,sizeof(string),"Shotgun");
		case 26:	format(string,sizeof(string),"Sawnoff Shotgun");
		case 27:	format(string,sizeof(string),"Combat Shotgun");
		case 28:	format(string,sizeof(string),"Micro SMG/Uzi");
		case 29:	format(string,sizeof(string),"MP5");
		case 30:	format(string,sizeof(string),"AK-47");
		case 31:	format(string,sizeof(string),"M4");
		case 32:	format(string,sizeof(string),"Tec-9");
		case 33:	format(string,sizeof(string),"Country Rifle");
		case 34:	format(string,sizeof(string),"Sniper Rifle");
		case 35:	format(string,sizeof(string),"RPG");
		case 36:	format(string,sizeof(string),"HS Rocket");
		case 37:	format(string,sizeof(string),"Flamethrower");
		case 38:	format(string,sizeof(string),"Minigun");
		case 39:	format(string,sizeof(string),"Satchel Charge");
		case 40:	format(string,sizeof(string),"Detonator");
		case 41:	format(string,sizeof(string),"Spraycan");
		case 42:	format(string,sizeof(string),"Fire Extinguisher");
		case 43:	format(string,sizeof(string),"Camera");
		case 44:	format(string,sizeof(string),"Night Vis Goggles");
		case 45:	format(string,sizeof(string),"Thermal Goggles");
		case 46:	format(string,sizeof(string),"Parachute");
	}
	return string;
}
stock GetWeaponSlot (weaponid)
{
	switch (weaponid)
	{
		case 0, 1:
			return 0;

		case 2 .. 9:
			return 1;

		case 10 .. 15:
			return 10;

		case 16 .. 19, 39:
			return 8;

		case 22 .. 24:
			return 2;

		case 25 .. 27:
			return 3;

		case 28, 29, 32:
			return 4;

		case 30, 31:
			return 5;

		case 33, 34:
			return 6;

		case 35 .. 38:
			return 7;

		case 40:
			return 12;

		case 41 .. 43:
			return 9;

		case 44 .. 46:
			return 11;
	}
	return 0;
}

stock GivePlayerCash(playerid, money)
{
    PlayerData[playerid][Cash] += money;
	if(PlayerData[playerid][IsLoggedIn] == true)
 	{
		new str[128];
		mysql_format(SQL, str,128,"UPDATE `users` SET `Cash`='%d' WHERE `id` = '%d' LIMIT 1",PlayerData[playerid][Cash],PlayerData[playerid][ID]);
		mysql_tquery(SQL, str, "", "");
	}
    UpdateMoneyBar(playerid,PlayerData[playerid][Cash]);
	if(PlayerData[playerid][Cash] != GetPlayerMoney(playerid))
	{
	    GivePlayerMoney(playerid, PlayerData[playerid][Cash] - GetPlayerMoney(playerid));
	}
    return PlayerData[playerid][Cash];
}

stock SetPlayerCash(playerid)
{
	ResetMoneyBar(playerid);
	UpdateMoneyBar(playerid,PlayerData[playerid][Cash]);
	return PlayerData[playerid][Cash];
}

stock SendUsage( playerid, usage[ ] )
{
   new Str[ 256 ];
   format( Str, 256, "{B8DBFF}Synthax: %s", usage );
   SendClientMessage( playerid,0xB8DBFFFF, Str );
   return 1;
}

stock SendHelp( playerid, usage[ ] )
{
   new Str[ 256 ];
   format( Str, 256, "{B8DBFF}Help: {FFFFFF}%s", usage );
   SendClientMessage( playerid,0xB8DBFFFF, Str );
   return 1;
}

stock GetPlayerIdFromName(playername[])
{
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(strcmp(PlayerData[i][Name], playername, true, strlen(playername)) == 0)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock Decimal(money)
{
    new str[30];
    if(money >= 0)
    {
        format(str, sizeof(str), "%d", money);
        if(1000 <= money < 10000) strins(str, ",", 1, sizeof(str));
        else if(10000 <= money < 100000) strins(str, ",", 2, sizeof(str));
        else if(100000 <= money < 1000000) strins(str, ",", 3, sizeof(str));
        else if(1000000 <= money < 10000000) { strins(str, ",", 1, sizeof(str)); strins(str, ",", 5, sizeof(str)); }
        else if(10000000 <= money < 100000000) { strins(str, ",", 2, sizeof(str)); strins(str, ",", 6, sizeof(str)); }
        else if(100000000 <= money < 1000000000) { strins(str, ",", 3, sizeof(str)); strins(str, ",", 7, sizeof(str)); }
        else if(money >= 1000000000) { strins(str, ",", 1, sizeof(str)); strins(str, ",", 5, sizeof(str)); strins(str, ",", 9, sizeof(str)); }
    }
    else
    {
        format(str, sizeof(str), "-%d", money-(money*2));
        if(-1000 >= money > -10000) strins(str, ",", 2, sizeof(str));
        else if(-10000 >= money > -100000) strins(str, ",", 3, sizeof(str));
        else if(-100000 >= money > -1000000) strins(str, ",", 4, sizeof(str));
        else if(-1000000 >= money > -10000000) { strins(str, ",", 2, sizeof(str)); strins(str, ",", 6, sizeof(str)); }
        else if(-10000000 >= money > -100000000) { strins(str, ",", 3, sizeof(str)); strins(str, ",", 7, sizeof(str)); }
        else if(-100000000 >= money > -1000000000) { strins(str, ",", 4, sizeof(str)); strins(str, ",", 8, sizeof(str)); }
        else if(money <= -1000000000) { strins(str, ",", 2, sizeof(str)); strins(str, ",", 6, sizeof(str)); strins(str, ",", 10, sizeof(str));}
    }
    return str;
}

stock CalculateTime(seconds)
{
	new time = seconds;
	new hour=time/3600;
	time=time%3600;
	new min2=time/60;
	time=time%60;
	new sec=time;
	new string[20];
	format(string,sizeof(string),"%02d:%02d:%02d",hour,min2,sec);
	return string;
}

stock JobName(job)
{
    new ftexst[35];
	switch(job)
	{
		case 0: ftexst = "None";
		case 1: ftexst = "Pizzaboy";
		case 2: ftexst = "Street Sweeper";
		case 3: ftexst = "Garbageman";
		case 4: ftexst = "Farmer";
		case 5: ftexst = "Trucker";
		case 6: ftexst = "Bus Driver";
		//case 7: ftexst = "Garbageman";
		case 8: ftexst = "Arms Dealer";
		case 9: ftexst = "Drugs Dealer";
	}
	return ftexst;
}

stock FactionName(faction)
{
	new ftexst[35];
	switch(faction)
	{
		case 0: ftexst = "Civillian";
		case 1: ftexst = "Police Department";
		case 2: ftexst = "Grove St. 125";
		case 3: ftexst = "Grape Street Watts";
		case 4: ftexst = "Varrio Nuevo Estrada";
		case 5: ftexst = "SA Government";
		case 6: ftexst = "SA Network";
		case 7: ftexst = "Emergency Department";
	}
	return ftexst;
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else GetPlayerVelocity(playerid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

new YoutubeID[32];
stock YoutubeStream(playerid, vlink[])
{
	new videoid[128], YoutubeString[128];
	strmid(videoid,vlink,31,44,strlen(vlink));
	format(YoutubeString,sizeof(YoutubeString),"www.youtube-mp3.org/api/itemInfo/?video_id=%s",videoid);
	strmid(YoutubeID, videoid, 0, 12);
    HTTP(playerid,HTTP_GET,YoutubeString,videoid,"U2BStream");
}

function U2BStream(playerid, response_code, data[])
{
	if(response_code == 200)
	{
	    new result[33], u2bstr[33]; new streamedurl[128];
		new crypted = strfind(data, "\"h\"", true, -1);
		strmid(result,data,crypted+7,crypted+39,strlen(data));
		format(u2bstr,sizeof(u2bstr), "%s", result);
		format(streamedurl, sizeof(streamedurl), "http://www.youtube-mp3.org/get?video_id=%s&h=%s",YoutubeID, u2bstr);
		PlayAudioStreamForPlayer(playerid, streamedurl);
  	}
  	else
    {
		SendClientMessage(playerid, 0xAA3333AA, "Invalid Youtube URL, please try again with other video.");
    }
  	return 1;
}

stock GetPlayer3DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock GetPlayer3DZone2(Float:x, Float:y, Float:z, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock RadioName(radio)
{
	new ftexst[35];
	switch(radio)
	{
		case 666: ftexst = "Kiss FM";
		case 1: ftexst = "One FM";
		case 2: ftexst = "Pro FM";
		case 3: ftexst = "Radio 21";
		case 4: ftexst = "Radio ZU";
		case 5: ftexst = "Taraf FM";
		case 6: ftexst = "Vibe FM";
		case 7: ftexst = "Radio Intens";
		case 8: ftexst = "Radio Greu de Difuzat";
		case 9: ftexst = "Radio Tequilla";
		case 10: ftexst = "Radio Guerilla";
		case 11: ftexst = "OFF";
	}
	return ftexst;
}

stock IsALetter(string)
{
	if(string == 'q') return 1;
	else if(string == 'Q') return 1;
	else if(string == 'w') return 1;
	else if(string == 'W') return 1;
	else if(string == 'e') return 1;
	else if(string == 'E') return 1;
	else if(string == 'R') return 1;
	else if(string == 'r') return 1;
	else if(string == 't') return 1;
	else if(string == 'T') return 1;
	else if(string == 'y') return 1;
	else if(string == 'Y') return 1;
	else if(string == 'u') return 1;
	else if(string == 'U') return 1;
	else if(string == 'i') return 1;
	else if(string == 'I') return 1;
	else if(string == 'o') return 1;
	else if(string == 'O') return 1;
	else if(string == 'P') return 1;
	else if(string == 'p') return 1;
	else if(string == 'A') return 1;
	else if(string == 'a') return 1;
	else if(string == 'S') return 1;
	else if(string == 's') return 1;
	else if(string == 'D') return 1;
	else if(string == 'd') return 1;
	else if(string == 'F') return 1;
	else if(string == 'f') return 1;
	else if(string == 'G') return 1;
	else if(string == 'g') return 1;
	else if(string == 'H') return 1;
	else if(string == 'h') return 1;
	else if(string == 'J') return 1;
	else if(string == 'j') return 1;
	else if(string == 'k') return 1;
	else if(string == 'K') return 1;
	else if(string == 'l') return 1;
	else if(string == 'L') return 1;
	else if(string == 'z') return 1;
	else if(string == 'Z') return 1;
	else if(string == 'X') return 1;
	else if(string == 'x') return 1;
	else if(string == 'C') return 1;
	else if(string == 'c') return 1;
	else if(string == 'V') return 1;
	else if(string == 'v') return 1;
	else if(string == 'b') return 1;
	else if(string == 'B') return 1;
	else if(string == 'N') return 1;
	else if(string == 'n') return 1;
	else if(string == 'M') return 1;
	else if(string == 'm') return 1;
	else if(string == '0') return 1;
	else if(string == '1') return 1;
	else if(string == '2') return 1;
	else if(string == '3') return 1;
	else if(string == '4') return 1;
	else if(string == '5') return 1;
	else if(string == '6') return 1;
	else if(string == '7') return 1;
	else if(string == '8') return 1;
	else if(string == '9') return 1;
	else return 0;
}

stock DecimalNumber(playerid)
{
    new str[30];
    new money=PlayerData[playerid][PhoneNr];
    if(money >= 0)
    {
        format(str, sizeof(str), "%d", money);
        if(1000000 <= money < 10000000)
		{
			strins(str, "-", 3, sizeof(str));
		}
    }
    return str;
}

stock YoutubeStopStream(playerid)
{
	PlayAudioStreamForPlayer(playerid, "Youtube streaming was stoped.");
}

stock WhoIsDriver(vehicleid)
{
    foreach(Player, i)
    {
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerState(i) == PLAYER_STATE_DRIVER) return i; //Returns playerid if the player is in the vehicleid provided AND is the driver
    }
    return INVALID_PLAYER_ID;
}
main() {}
